%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <5F02><8D28><6027><7FA4><4F53><4E0E><540C><8D28><6027><7FA4><4F53>.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ASUS
%%CreationDate: 2021/7/1, 21:23:57
%%BoundingBox: 0 0 542 349
%%HiResBoundingBox: 0 0 541.3180 348.3938
%%CropBox: 0 0 541.3180 348.3938
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 574 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-07-01T21:14:46+08:00"
   xmp:CreatorTool="Matplotlib v3.4.2, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.4.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -348.394 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 348.394 li
541.318 348.394 li
541.318 0 li
cp
clp
gsave
0 348.394 mo
542 348.394 li
542 -.606236 li
0 -.606236 li
0 348.394 li
clp
0 348.394 mo
541.318 348.394 li
541.318 0 li
0 0 li
0 348.394 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
f
69.2548 295.855 mo
69.2548 256.845 li
69.2548 286.102 li
72.148 266.086 li
74.5409 258.045 li
74.7367 257.712 li
78.5317 249.085 li
80.2184 249.585 li
82.5266 246.574 li
85.7003 248.393 li
91.1821 252.402 li
96.6639 258.145 li
102.146 257.387 li
107.628 261.179 li
113.109 252.402 li
118.591 247.309 li
124.073 255.761 li
129.555 255.111 li
132.989 255.79 li
129.555 260.746 li
124.073 273.966 li
118.591 268.548 li
113.109 264.213 li
107.628 266.706 li
102.146 286.861 li
96.6639 284.26 li
91.1821 283.61 li
85.7003 281.443 li
80.2184 288.594 li
74.7367 286.969 li
69.2548 295.855 li
321.418 282.635 mo
315.937 271.907 li
310.455 277.108 li
304.973 269.09 li
299.491 265.189 li
294.009 272.015 li
288.527 268.114 li
283.046 276.025 li
277.564 272.665 li
272.082 272.34 li
266.6 275.483 li
261.118 264.755 li
255.637 256.52 li
250.155 268.765 li
244.673 255.761 li
241.393 257.188 li
244.673 248.176 li
250.155 250.56 li
255.637 248.068 li
261.118 247.201 li
266.6 254.678 li
272.082 262.046 li
277.564 237.232 li
283.046 238.641 li
288.527 252.511 li
294.009 248.501 li
299.491 256.411 li
304.973 261.938 li
310.455 248.501 li
315.937 255.87 li
321.418 246.009 li
326.9 257.929 li
332.382 261.071 li
337.864 238.532 li
343.346 240.266 li
344.596 238.437 li
348.828 241.783 li
351.981 232.621 li
354.309 232.897 li
359.791 266.706 li
365.273 267.464 li
370.755 260.638 li
376.237 244.925 li
381.718 257.712 li
387.2 241.349 li
392.682 246.659 li
398.164 264.322 li
398.164 265.514 li
392.682 275.158 li
387.2 270.607 li
381.718 271.04 li
376.237 276.675 li
370.755 274.291 li
365.273 270.39 li
359.791 272.557 li
354.309 264.864 li
348.828 280.793 li
343.346 276.458 li
337.864 268.223 li
332.382 276.35 li
326.9 271.474 li
321.418 282.635 li
156.964 271.799 mo
151.482 263.13 li
146 260.963 li
144.245 259.887 li
146 254.786 li
151.482 249.477 li
156.964 253.811 li
162.446 234.306 li
167.652 260.963 li
162.446 260.963 li
156.964 271.799 li
200.818 265.297 mo
195.337 264.105 li
189.855 263.347 li
184.373 257.278 li
178.891 253.486 li
173.409 253.703 li
169.115 259.39 li
173.409 248.61 li
178.891 250.127 li
184.373 255.761 li
189.855 257.712 li
195.337 254.028 li
200.818 255.761 li
206.3 246.009 li
211.782 250.018 li
217.264 247.743 li
222.746 236.365 li
228.228 256.195 li
233.709 251.21 li
237.097 258.642 li
233.709 259.446 li
228.228 261.938 li
222.746 259.337 li
217.264 254.353 li
211.782 263.672 li
206.3 260.529 li
200.818 265.297 li
140.518 231.705 mo
135.037 217.185 li
132.989 216.781 li
135.037 213.826 li
140.518 218.594 li
144.245 220.877 li
140.518 231.705 li
239.191 224.229 mo
237.096 219.633 li
239.191 219.136 li
241.393 218.178 li
239.191 224.229 li
167.928 223.362 mo
167.652 221.953 li
167.928 221.953 li
169.115 220.38 li
167.928 223.362 li
/1 
[/DeviceCMYK] /CSA add_res
.054902 .0862745 .152941 0 cmyk
f
72.9094 221.809 mo
74.7367 209.167 li
78.9344 196.72 li
74.7367 218.377 li
74.5409 219.035 li
72.9094 221.809 li
140.518 202.232 mo
135.037 163.33 li
129.555 178.067 li
124.073 202.015 li
118.591 160.188 li
113.109 150.544 li
107.628 181.427 li
102.146 182.077 li
98.2157 176.328 li
102.146 156.829 li
107.628 154.228 li
113.109 111.643 li
113.149 111.603 li
118.591 121.178 li
124.073 163.005 li
129.555 139.058 li
135.037 124.321 li
140.518 163.222 li
146 145.668 li
151.482 135.048 li
156.964 147.076 li
162.446 148.16 li
167.928 153.145 li
173.409 144.259 li
178.891 156.504 li
184.373 131.147 li
189.855 152.061 li
195.337 143.717 li
200.818 147.835 li
206.3 147.727 li
211.782 134.398 li
217.264 161.922 li
222.746 123.346 li
228.228 162.03 li
233.709 154.77 li
239.191 130.822 li
244.673 141.875 li
250.155 136.891 li
255.637 158.996 li
261.118 147.293 li
266.6 147.943 li
272.082 126.488 li
277.564 152.928 li
283.046 130.822 li
288.527 159.213 li
294.009 144.259 li
299.491 158.563 li
304.973 134.94 li
310.455 146.318 li
315.937 151.194 li
321.418 149.135 li
326.9 128.655 li
332.382 133.098 li
337.864 156.395 li
343.346 142.417 li
348.828 130.389 li
354.309 142.417 li
359.791 141.442 li
365.273 143.284 li
370.755 150.652 li
376.237 128.113 li
381.718 140.358 li
387.2 141.333 li
392.682 152.928 li
398.164 135.59 li
398.164 174.6 li
392.682 191.937 li
387.2 180.343 li
381.718 179.368 li
376.237 167.123 li
370.755 189.662 li
365.273 182.293 li
359.791 180.451 li
354.309 181.427 li
348.828 169.399 li
343.346 181.427 li
337.864 195.405 li
332.382 172.107 li
326.9 167.665 li
321.418 188.145 li
315.937 190.204 li
310.455 185.327 li
304.973 173.95 li
299.491 197.572 li
294.009 183.269 li
288.527 198.222 li
283.046 169.832 li
277.564 191.937 li
272.082 165.498 li
266.6 186.953 li
261.118 186.303 li
255.637 198.005 li
250.155 175.9 li
244.673 180.885 li
239.191 169.832 li
233.709 193.779 li
228.228 201.04 li
222.746 162.355 li
217.264 200.931 li
211.782 173.408 li
206.3 186.736 li
200.818 186.845 li
195.337 182.727 li
189.855 191.071 li
184.373 170.157 li
178.891 195.513 li
173.409 183.269 li
167.928 192.154 li
162.446 187.169 li
156.964 186.086 li
151.482 174.058 li
146 184.677 li
140.518 202.232 li
81.4578 185.734 mo
85.7003 161.163 li
88.8891 140.615 li
85.7003 170.807 li
81.4578 185.734 li
88.8891 179.624 mo
91.1821 157.912 li
93.4311 168.626 li
91.1821 164.847 li
88.8891 179.624 li
96.6639 145.017 mo
93.4311 129.617 li
96.6639 135.048 li
98.2157 137.318 li
96.6639 145.017 li
.00392157 .196078 .12549 0 cmyk
f
69.2548 286.102 mo
69.2548 256.845 li
69.2548 275.808 li
72.148 266.086 li
69.2548 286.102 li
.0431373 .254902 .231373 0 cmyk
f
72.148 266.086 mo
72.9094 260.818 li
74.5409 258.045 li
72.148 266.086 li
.282353 .254902 .105882 0 cmyk
f
69.2548 275.808 mo
69.2548 256.845 li
69.2548 267.031 li
72.9094 260.818 li
72.148 266.086 li
69.2548 275.808 li
.27451 .372549 .160784 0 cmyk
f
85.7429 209.414 mo
85.7003 209.383 li
84.2533 208.554 li
85.7003 200.173 li
88.8891 179.624 li
85.7429 209.414 li
78.9344 196.72 mo
80.2184 190.095 li
81.4578 185.734 li
80.2184 192.913 li
78.9344 196.72 li
96.6639 184.027 mo
93.4311 168.626 li
96.6639 174.058 li
98.2157 176.328 li
96.6639 184.027 li
102.146 143.067 mo
98.2157 137.318 li
102.146 117.819 li
107.628 115.219 li
113.109 72.6332 li
118.591 67.1068 li
124.073 51.2863 li
129.555 63.3142 li
135.037 48.6856 li
140.518 58.3296 li
146 35.4656 li
151.482 51.1778 li
156.964 52.0447 li
162.446 31.9981 li
167.928 54.4287 li
173.409 39.2583 li
178.891 47.2769 li
184.373 36.3325 li
189.855 45.5432 li
195.337 33.0818 li
200.818 38.9332 li
206.3 41.1003 li
211.782 46.6267 li
217.264 35.4656 li
222.746 38.6081 li
228.228 54.7537 li
233.709 34.4905 li
239.191 35.4656 li
244.673 66.3483 li
250.155 62.0138 li
255.637 30.156 li
261.118 70.3576 li
266.6 44.0261 li
272.082 58.5463 li
277.564 45.5432 li
283.046 68.5154 li
288.527 46.3016 li
294.009 40.1252 li
299.491 76.3174 li
304.973 56.4874 li
310.455 31.348 li
315.937 36.3325 li
321.418 31.7814 li
326.9 64.6145 li
332.382 54.4287 li
337.864 20.9454 li
343.346 30.9145 li
348.828 38.9332 li
354.309 43.701 li
359.791 51.6114 li
365.273 49.6608 li
370.755 39.2583 li
376.237 35.0323 li
381.718 26.6885 li
387.2 33.1901 li
392.682 31.7814 li
398.164 36.4409 li
398.164 75.4505 li
392.682 70.791 li
387.2 72.1996 li
381.718 65.6981 li
376.237 74.0418 li
370.755 78.2678 li
365.273 88.6703 li
359.791 90.6208 li
354.309 82.7105 li
348.828 77.9427 li
343.346 69.9241 li
337.864 59.955 li
332.382 93.4383 li
326.9 103.624 li
321.418 70.791 li
315.937 75.3421 li
310.455 70.3576 li
304.973 95.497 li
299.491 115.327 li
294.009 79.1347 li
288.527 85.3112 li
283.046 107.525 li
277.564 84.5527 li
272.082 97.5559 li
266.6 83.0357 li
261.118 109.367 li
255.637 69.1656 li
250.155 101.023 li
244.673 105.358 li
239.191 74.4752 li
233.709 73.5 li
228.228 93.7634 li
222.746 77.6176 li
217.264 74.4752 li
211.782 85.6363 li
206.3 80.1099 li
200.818 77.9427 li
195.337 72.0914 li
189.855 84.5527 li
184.373 75.3421 li
178.891 86.2865 li
173.409 78.2678 li
167.928 93.4383 li
162.446 71.0077 li
156.964 91.0543 li
151.482 90.1874 li
146 74.4752 li
140.518 97.3392 li
135.037 87.6952 li
129.555 102.324 li
124.073 90.2958 li
118.591 106.116 li
113.149 111.603 li
113.109 111.534 li
107.628 142.417 li
102.146 143.067 li
88.8891 140.615 mo
91.1821 118.903 li
93.4311 129.617 li
91.1821 125.838 li
88.8891 140.615 li
.243137 .196078 0 0 cmyk
f
74.5409 219.035 mo
74.7367 218.377 li
78.9344 196.72 li
80.2184 192.913 li
81.4578 185.734 li
85.7003 170.807 li
88.8891 140.615 li
91.1821 125.838 li
93.4311 129.617 li
96.6639 145.017 li
98.2157 137.318 li
102.146 143.067 li
107.628 142.417 li
113.109 111.534 li
113.149 111.603 li
113.109 111.643 li
107.628 154.228 li
102.146 156.829 li
98.2157 176.328 li
96.6639 174.058 li
93.4311 168.626 li
91.1821 157.912 li
88.8891 179.624 li
85.7003 200.173 li
84.2533 208.554 li
80.2184 206.241 li
74.7367 218.702 li
74.5409 219.035 li
.247059 .333333 .0862745 0 cmyk
f
140.518 270.715 mo
135.037 256.195 li
132.989 255.79 li
135.037 252.836 li
140.518 257.603 li
144.245 259.887 li
140.518 270.715 li
398.164 264.322 mo
398.164 264.322 li
398.164 226.504 li
392.682 236.148 li
387.2 231.597 li
381.718 232.031 li
376.237 237.665 li
370.755 235.281 li
365.273 231.38 li
359.791 233.548 li
354.309 225.854 li
351.981 232.621 li
348.828 232.247 li
344.596 238.437 li
343.346 237.449 li
337.864 229.213 li
332.382 237.34 li
326.9 232.464 li
321.418 243.625 li
315.937 232.897 li
310.455 238.099 li
304.973 230.08 li
299.491 226.179 li
294.009 233.006 li
288.527 229.105 li
283.046 237.015 li
277.564 233.656 li
272.082 233.331 li
266.6 236.473 li
261.118 225.746 li
255.637 217.51 li
250.155 229.755 li
244.673 216.752 li
241.393 218.178 li
244.673 209.167 li
250.155 211.551 li
255.637 209.058 li
261.118 208.191 li
266.6 215.668 li
272.082 223.037 li
277.564 198.222 li
283.046 199.631 li
288.527 213.501 li
294.009 209.492 li
299.491 217.402 li
304.973 222.928 li
310.455 209.492 li
315.937 216.86 li
321.418 206.999 li
326.9 218.919 li
332.382 222.061 li
337.864 199.523 li
343.346 201.256 li
348.828 193.238 li
354.309 193.888 li
359.791 227.696 li
365.273 228.455 li
370.755 221.628 li
376.237 205.916 li
381.718 218.702 li
387.2 202.34 li
392.682 207.65 li
398.164 225.312 li
398.164 264.322 li
239.191 263.238 mo
237.097 258.642 li
239.191 258.145 li
241.393 257.188 li
239.191 263.238 li
167.928 262.371 mo
167.652 260.963 li
167.928 260.963 li
169.115 259.39 li
167.928 262.371 li
78.5317 249.085 mo
76.4646 248.472 li
78.9344 235.729 li
80.2184 231.922 li
81.4578 224.744 li
85.7003 209.817 li
85.7429 209.414 li
91.1821 213.393 li
96.6639 219.136 li
102.146 218.377 li
107.628 222.17 li
113.109 213.393 li
118.591 208.3 li
124.073 216.752 li
129.555 216.102 li
132.989 216.781 li
129.555 221.736 li
124.073 234.956 li
118.591 229.538 li
113.109 225.204 li
107.628 227.696 li
102.146 247.851 li
96.6639 245.25 li
91.1821 244.6 li
85.7003 242.433 li
82.5266 246.574 li
80.2184 245.25 li
78.5317 249.085 li
156.964 232.789 mo
151.482 224.12 li
146 221.953 li
144.245 220.877 li
146 215.777 li
151.482 210.467 li
156.964 214.801 li
162.446 195.297 li
167.652 221.953 li
162.446 221.953 li
156.964 232.789 li
200.818 226.287 mo
195.337 225.095 li
189.855 224.337 li
184.373 218.269 li
178.891 214.476 li
173.409 214.693 li
169.115 220.38 li
173.409 209.6 li
178.891 211.117 li
184.373 216.752 li
189.855 218.702 li
195.337 215.018 li
200.818 216.752 li
206.3 206.999 li
211.782 211.009 li
217.264 208.733 li
222.746 197.355 li
228.228 217.185 li
233.709 212.201 li
237.096 219.633 li
233.709 220.436 li
228.228 222.928 li
222.746 220.328 li
217.264 215.343 li
211.782 224.662 li
206.3 221.52 li
200.818 226.287 li
.270588 .0823529 .145098 .0156863 cmyk
f
365.273 267.464 mo
359.791 266.706 li
354.309 232.897 li
351.981 232.621 li
354.309 225.854 li
359.791 233.548 li
365.273 231.38 li
370.755 235.281 li
376.237 237.665 li
381.718 232.031 li
387.2 231.597 li
392.682 236.148 li
398.164 226.504 li
398.164 264.322 li
392.682 246.659 li
387.2 241.349 li
381.718 257.712 li
376.237 244.925 li
370.755 260.638 li
365.273 267.464 li
272.082 262.046 mo
266.6 254.678 li
261.118 247.201 li
255.637 248.068 li
250.155 250.56 li
244.673 248.176 li
241.393 257.188 li
239.191 258.145 li
237.097 258.642 li
233.709 251.21 li
228.228 256.195 li
222.746 236.365 li
217.264 247.743 li
211.782 250.018 li
206.3 246.009 li
200.818 255.761 li
195.337 254.028 li
189.855 257.712 li
184.373 255.761 li
178.891 250.127 li
173.409 248.61 li
169.115 259.39 li
167.928 260.963 li
167.652 260.963 li
162.446 234.306 li
156.964 253.811 li
151.482 249.477 li
146 254.786 li
144.245 259.887 li
140.518 257.603 li
135.037 252.836 li
132.989 255.79 li
129.555 255.111 li
124.073 255.761 li
118.591 247.309 li
113.109 252.402 li
107.628 261.179 li
102.146 257.387 li
96.6639 258.145 li
91.1821 252.402 li
85.7003 248.393 li
82.5266 246.574 li
85.7003 242.433 li
91.1821 244.6 li
96.6639 245.25 li
102.146 247.851 li
107.628 227.696 li
113.109 225.204 li
118.591 229.538 li
124.073 234.956 li
129.555 221.736 li
132.989 216.781 li
135.037 217.185 li
140.518 231.705 li
144.245 220.877 li
146 221.953 li
151.482 224.12 li
156.964 232.789 li
162.446 221.953 li
167.652 221.953 li
167.928 223.362 li
169.115 220.38 li
173.409 214.693 li
178.891 214.476 li
184.373 218.269 li
189.855 224.337 li
195.337 225.095 li
200.818 226.287 li
206.3 221.52 li
211.782 224.662 li
217.264 215.343 li
222.746 220.328 li
228.228 222.928 li
233.709 220.436 li
237.096 219.633 li
239.191 224.229 li
241.393 218.178 li
244.673 216.752 li
250.155 229.755 li
255.637 217.51 li
261.118 225.746 li
266.6 236.473 li
272.082 233.331 li
277.564 233.656 li
283.046 237.015 li
288.527 229.105 li
294.009 233.006 li
299.491 226.179 li
304.973 230.08 li
310.455 238.099 li
315.937 232.897 li
321.418 243.625 li
326.9 232.464 li
332.382 237.34 li
337.864 229.213 li
343.346 237.449 li
344.596 238.437 li
343.346 240.266 li
337.864 238.532 li
332.382 261.071 li
326.9 257.929 li
321.418 246.009 li
315.937 255.87 li
310.455 248.501 li
304.973 261.938 li
299.491 256.411 li
294.009 248.501 li
288.527 252.511 li
283.046 238.641 li
277.564 237.232 li
272.082 262.046 li
74.5409 258.045 mo
74.7367 257.387 li
76.4646 248.472 li
78.5317 249.085 li
74.7367 257.712 li
74.5409 258.045 li
.309804 .141176 .25098 .0156863 cmyk
f
78.9344 235.729 mo
80.2184 229.105 li
81.4578 224.744 li
80.2184 231.922 li
78.9344 235.729 li
.27451 .219608 .231373 .0156863 cmyk
f
69.2548 236.798 mo
69.2548 228.021 li
72.9094 221.809 li
72.148 227.076 li
69.2548 236.798 li
.270588 .0823529 .145098 .0156863 cmyk
f
72.148 227.076 mo
72.9094 221.809 li
74.5409 219.035 li
72.148 227.076 li
.27451 .219608 .231373 .0156863 cmyk
f
76.4646 248.472 mo
74.8031 247.979 li
78.9344 235.729 li
76.4646 248.472 li
69.2548 247.093 mo
69.2548 236.798 li
72.148 227.076 li
69.2548 247.093 li
81.4578 224.744 mo
84.2533 208.554 li
85.7003 209.383 li
85.7429 209.414 li
85.7003 209.817 li
81.4578 224.744 li
.439216 .219608 .145098 .0156863 cmyk
f
72.9094 260.818 mo
74.7367 248.176 li
74.8031 247.979 li
76.4646 248.472 li
74.7367 257.387 li
74.5409 258.045 li
72.9094 260.818 li
.466667 .258824 .219608 .0156863 cmyk
f
69.2548 256.845 mo
69.2548 247.093 li
72.148 227.076 li
74.5409 219.035 li
74.7367 218.702 li
80.2184 206.241 li
84.2533 208.554 li
81.4578 224.744 li
80.2184 229.105 li
78.9344 235.729 li
74.8031 247.979 li
74.7367 247.959 li
69.2548 256.845 li
.443137 .313726 .203922 .0156863 cmyk
f
69.2548 267.031 mo
69.2548 256.845 li
74.7367 247.959 li
74.8031 247.979 li
74.7367 248.176 li
72.9094 260.818 li
69.2548 267.031 li
.462745 .341176 .258824 .0156863 cmyk
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
.8 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.2548 309.6 mo
69.2548 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
69.2548 309.6 mo
69.2548 313.1 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.2548 309.6 mo
69.2548 313.1 li
@
71.8798 320.952 mo
71.8798 321.528 71.8318 322.056 71.7358 322.536 cv
71.6398 323.016 71.4958 323.436 71.2798 323.784 cv
71.0638 324.132 70.7878 324.396 70.4518 324.576 cv
70.1038 324.756 69.6838 324.852 69.1798 324.852 cv
68.6998 324.852 68.3038 324.768 67.9798 324.612 cv
67.6438 324.444 67.3798 324.204 67.1878 323.868 cv
66.9838 323.532 66.8398 323.124 66.7558 322.644 cv
66.6718 322.164 66.6358 321.612 66.6358 320.988 cv
66.6358 320.412 66.6838 319.872 66.7798 319.392 cv
66.8758 318.912 67.0198 318.504 67.2358 318.156 cv
67.4398 317.808 67.7158 317.544 68.0638 317.352 cv
68.3998 317.16 68.8318 317.064 69.3358 317.064 cv
69.8158 317.064 70.2118 317.148 70.5358 317.316 cv
70.8598 317.484 71.1238 317.736 71.3278 318.072 cv
71.5198 318.408 71.6638 318.804 71.7478 319.284 cv
71.8318 319.764 71.8798 320.328 71.8798 320.952 cv
cp
70.8478 321.012 mo
70.8478 320.64 70.8238 320.304 70.7998 320.004 cv
70.7758 319.704 70.7278 319.44 70.6798 319.2 cv
70.6318 318.972 70.5598 318.78 70.4758 318.612 cv
70.3918 318.444 70.2958 318.312 70.1758 318.204 cv
70.0558 318.096 69.9238 318.012 69.7798 317.964 cv
69.6238 317.916 69.4558 317.892 69.2758 317.892 cv
68.9398 317.892 68.6638 317.976 68.4598 318.132 cv
68.2558 318.288 68.0998 318.504 67.9798 318.768 cv
67.8598 319.044 67.7758 319.368 67.7278 319.728 cv
67.6798 320.1 67.6678 320.496 67.6678 320.916 cv
67.6678 321.48 67.6918 321.96 67.7518 322.356 cv
67.8118 322.764 67.9078 323.088 68.0278 323.328 cv
68.1478 323.58 68.3158 323.76 68.5198 323.868 cv
68.7118 323.988 68.9518 324.036 69.2398 324.036 cv
69.4558 324.036 69.6478 324.012 69.8158 323.94 cv
69.9838 323.868 70.1278 323.772 70.2478 323.64 cv
70.3678 323.508 70.4638 323.352 70.5358 323.16 cv
70.6078 322.98 70.6798 322.776 70.7278 322.56 cv
70.7758 322.344 70.7998 322.104 70.8238 321.84 cv
70.8358 321.576 70.8478 321.3 70.8478 321.012 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
124.073 309.6 mo
124.073 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
124.073 309.6 mo
124.073 313.1 li
f
124.073 309.6 mo
124.073 313.1 li
@
123.431 324.36 mo
123.407 324.552 li
123.359 324.672 li
123.287 324.744 li
123.215 324.756 li
119.255 324.756 li
119.183 324.744 li
119.111 324.672 li
119.051 324.552 li
119.039 324.36 li
119.051 324.18 li
119.099 324.048 li
119.171 323.976 li
119.255 323.952 li
120.839 323.952 li
120.839 318.18 li
119.375 319.056 li
119.183 319.128 li
119.075 319.104 li
119.027 318.972 li
119.015 318.924 119.015 318.852 119.015 318.756 cv
119.015 318.576 li
119.039 318.468 li
119.099 318.384 li
119.183 318.312 li
120.935 317.196 li
120.983 317.16 li
121.067 317.136 li
121.199 317.124 li
121.379 317.124 li
121.607 317.136 li
121.751 317.172 li
121.823 317.22 li
121.847 317.28 li
121.847 323.952 li
123.215 323.952 li
123.299 323.976 li
123.371 324.048 li
123.407 324.18 li
123.431 324.36 li
cp
f
129.743 320.952 mo
129.743 321.528 129.695 322.056 129.599 322.536 cv
129.503 323.016 129.359 323.436 129.143 323.784 cv
128.927 324.132 128.651 324.396 128.315 324.576 cv
127.967 324.756 127.547 324.852 127.043 324.852 cv
126.563 324.852 126.167 324.768 125.843 324.612 cv
125.507 324.444 125.243 324.204 125.051 323.868 cv
124.847 323.532 124.703 323.124 124.619 322.644 cv
124.535 322.164 124.499 321.612 124.499 320.988 cv
124.499 320.412 124.547 319.872 124.643 319.392 cv
124.739 318.912 124.883 318.504 125.099 318.156 cv
125.303 317.808 125.579 317.544 125.927 317.352 cv
126.263 317.16 126.695 317.064 127.199 317.064 cv
127.679 317.064 128.075 317.148 128.399 317.316 cv
128.723 317.484 128.987 317.736 129.191 318.072 cv
129.383 318.408 129.527 318.804 129.611 319.284 cv
129.695 319.764 129.743 320.328 129.743 320.952 cv
cp
128.711 321.012 mo
128.711 320.64 128.687 320.304 128.663 320.004 cv
128.639 319.704 128.591 319.44 128.543 319.2 cv
128.495 318.972 128.423 318.78 128.339 318.612 cv
128.255 318.444 128.159 318.312 128.039 318.204 cv
127.919 318.096 127.787 318.012 127.643 317.964 cv
127.487 317.916 127.319 317.892 127.139 317.892 cv
126.803 317.892 126.527 317.976 126.323 318.132 cv
126.119 318.288 125.963 318.504 125.843 318.768 cv
125.723 319.044 125.639 319.368 125.591 319.728 cv
125.543 320.1 125.531 320.496 125.531 320.916 cv
125.531 321.48 125.555 321.96 125.615 322.356 cv
125.675 322.764 125.771 323.088 125.891 323.328 cv
126.011 323.58 126.179 323.76 126.383 323.868 cv
126.575 323.988 126.815 324.036 127.103 324.036 cv
127.319 324.036 127.511 324.012 127.679 323.94 cv
127.847 323.868 127.991 323.772 128.111 323.64 cv
128.231 323.508 128.327 323.352 128.399 323.16 cv
128.471 322.98 128.543 322.776 128.591 322.56 cv
128.639 322.344 128.663 322.104 128.687 321.84 cv
128.699 321.576 128.711 321.3 128.711 321.012 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
178.891 309.6 mo
178.891 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
178.891 309.6 mo
178.891 313.1 li
f
178.891 309.6 mo
178.891 313.1 li
@
178.225 324.324 mo
178.213 324.516 li
178.165 324.648 li
178.093 324.732 li
178.009 324.756 li
173.809 324.756 li
173.665 324.744 li
173.557 324.672 li
173.497 324.54 li
173.485 324.48 173.485 324.408 173.485 324.312 cv
173.485 324.12 li
173.521 323.964 li
173.593 323.832 li
173.713 323.676 li
175.189 322.116 li
175.525 321.756 175.789 321.444 176.005 321.156 cv
176.209 320.868 176.365 320.616 176.473 320.376 cv
176.581 320.136 176.653 319.932 176.689 319.74 cv
176.725 319.548 176.749 319.368 176.749 319.2 cv
176.749 319.032 176.713 318.876 176.665 318.72 cv
176.605 318.576 176.521 318.444 176.425 318.324 cv
176.329 318.216 176.197 318.132 176.041 318.06 cv
175.885 317.988 175.705 317.952 175.501 317.952 cv
175.261 317.952 175.045 317.988 174.853 318.06 cv
174.661 318.132 174.505 318.204 174.361 318.276 cv
174.217 318.348 174.097 318.42 174.001 318.492 cv
173.905 318.564 173.833 318.588 173.797 318.588 cv
173.713 318.564 li
173.665 318.492 li
173.629 318.348 li
173.617 318.132 li
173.617 317.988 li
173.641 317.868 li
173.689 317.784 li
173.773 317.688 li
173.821 317.64 173.893 317.592 174.013 317.52 cv
174.133 317.448 174.277 317.388 174.457 317.316 cv
174.625 317.244 174.817 317.184 175.033 317.136 cv
175.237 317.088 175.453 317.064 175.693 317.064 cv
176.053 317.064 176.377 317.124 176.653 317.22 cv
176.917 317.328 177.145 317.472 177.337 317.652 cv
177.517 317.832 177.649 318.036 177.745 318.276 cv
177.829 318.516 177.877 318.768 177.877 319.032 cv
177.877 319.272 177.853 319.512 177.817 319.752 cv
177.769 319.992 177.685 320.256 177.541 320.532 cv
177.397 320.82 177.205 321.132 176.941 321.468 cv
176.677 321.816 176.329 322.212 175.897 322.644 cv
174.697 323.904 li
177.997 323.904 li
178.081 323.928 li
178.165 324.012 li
178.213 324.144 li
178.225 324.324 li
cp
f
184.561 320.952 mo
184.561 321.528 184.513 322.056 184.417 322.536 cv
184.321 323.016 184.177 323.436 183.961 323.784 cv
183.745 324.132 183.469 324.396 183.133 324.576 cv
182.785 324.756 182.365 324.852 181.861 324.852 cv
181.381 324.852 180.985 324.768 180.661 324.612 cv
180.325 324.444 180.061 324.204 179.869 323.868 cv
179.665 323.532 179.521 323.124 179.437 322.644 cv
179.353 322.164 179.317 321.612 179.317 320.988 cv
179.317 320.412 179.365 319.872 179.461 319.392 cv
179.557 318.912 179.701 318.504 179.917 318.156 cv
180.121 317.808 180.397 317.544 180.745 317.352 cv
181.081 317.16 181.513 317.064 182.017 317.064 cv
182.497 317.064 182.893 317.148 183.217 317.316 cv
183.541 317.484 183.805 317.736 184.009 318.072 cv
184.201 318.408 184.345 318.804 184.429 319.284 cv
184.513 319.764 184.561 320.328 184.561 320.952 cv
cp
183.529 321.012 mo
183.529 320.64 183.505 320.304 183.481 320.004 cv
183.457 319.704 183.409 319.44 183.361 319.2 cv
183.313 318.972 183.241 318.78 183.157 318.612 cv
183.073 318.444 182.977 318.312 182.857 318.204 cv
182.737 318.096 182.605 318.012 182.461 317.964 cv
182.305 317.916 182.137 317.892 181.957 317.892 cv
181.621 317.892 181.345 317.976 181.141 318.132 cv
180.937 318.288 180.781 318.504 180.661 318.768 cv
180.541 319.044 180.457 319.368 180.409 319.728 cv
180.361 320.1 180.349 320.496 180.349 320.916 cv
180.349 321.48 180.373 321.96 180.433 322.356 cv
180.493 322.764 180.589 323.088 180.709 323.328 cv
180.829 323.58 180.997 323.76 181.201 323.868 cv
181.393 323.988 181.633 324.036 181.921 324.036 cv
182.137 324.036 182.329 324.012 182.497 323.94 cv
182.665 323.868 182.809 323.772 182.929 323.64 cv
183.049 323.508 183.145 323.352 183.217 323.16 cv
183.289 322.98 183.361 322.776 183.409 322.56 cv
183.457 322.344 183.481 322.104 183.505 321.84 cv
183.517 321.576 183.529 321.3 183.529 321.012 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
233.709 309.6 mo
233.709 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
233.709 309.6 mo
233.709 313.1 li
f
233.709 309.6 mo
233.709 313.1 li
@
232.983 322.584 mo
232.983 322.944 232.923 323.256 232.803 323.532 cv
232.683 323.82 232.503 324.06 232.275 324.252 cv
232.047 324.444 231.771 324.6 231.435 324.696 cv
231.099 324.792 230.727 324.852 230.319 324.852 cv
230.055 324.852 229.815 324.828 229.599 324.792 cv
229.383 324.756 229.179 324.72 229.011 324.66 cv
228.843 324.612 228.699 324.552 228.591 324.492 cv
228.471 324.432 228.399 324.384 228.375 324.36 cv
228.315 324.276 li
228.267 324.168 li
228.243 324.024 li
228.231 323.82 li
228.231 323.676 228.243 323.58 228.267 323.532 cv
228.387 323.448 li
228.423 323.448 228.495 323.484 228.603 323.544 cv
228.699 323.604 228.831 323.664 228.999 323.736 cv
229.155 323.808 229.347 323.88 229.563 323.94 cv
229.779 324.012 230.019 324.036 230.295 324.036 cv
230.547 324.036 230.775 324.012 230.967 323.94 cv
231.159 323.868 231.327 323.772 231.459 323.652 cv
231.591 323.532 231.687 323.4 231.759 323.232 cv
231.831 323.064 231.867 322.884 231.867 322.68 cv
231.867 322.464 231.819 322.272 231.735 322.104 cv
231.651 321.936 231.531 321.78 231.363 321.66 cv
231.195 321.54 231.003 321.444 230.763 321.372 cv
230.523 321.3 230.259 321.264 229.959 321.264 cv
229.239 321.264 li
229.143 321.252 li
229.071 321.18 li
229.023 321.06 li
228.999 321.012 228.999 320.952 228.999 320.856 cv
229.011 320.676 li
229.071 320.556 li
229.143 320.496 li
229.239 320.472 li
229.899 320.472 li
230.151 320.472 230.379 320.448 230.583 320.376 cv
230.787 320.304 230.967 320.208 231.111 320.088 cv
231.255 319.968 231.363 319.812 231.435 319.644 cv
231.507 319.476 231.555 319.272 231.555 319.056 cv
231.555 318.9 231.519 318.756 231.471 318.612 cv
231.423 318.468 231.339 318.348 231.243 318.24 cv
231.147 318.132 231.015 318.048 230.859 317.988 cv
230.703 317.928 230.523 317.892 230.319 317.892 cv
230.079 317.892 229.875 317.928 229.683 318 cv
229.491 318.072 229.323 318.144 229.179 318.216 cv
229.035 318.3 228.903 318.372 228.807 318.444 cv
228.711 318.516 228.639 318.54 228.615 318.54 cv
228.531 318.528 li
228.483 318.468 li
228.447 318.348 li
228.447 318.3 228.447 318.228 228.447 318.132 cv
228.447 317.988 li
228.471 317.868 li
228.519 317.772 li
228.591 317.676 li
228.627 317.64 228.699 317.592 228.819 317.52 cv
228.927 317.448 229.071 317.388 229.239 317.316 cv
229.407 317.244 229.599 317.184 229.815 317.136 cv
230.031 317.088 230.259 317.064 230.511 317.064 cv
230.859 317.064 231.171 317.112 231.435 317.196 cv
231.699 317.292 231.927 317.412 232.107 317.58 cv
232.275 317.748 232.407 317.94 232.503 318.168 cv
232.587 318.396 232.635 318.648 232.635 318.924 cv
232.635 319.164 232.599 319.392 232.539 319.596 cv
232.467 319.8 232.383 319.98 232.263 320.136 cv
232.143 320.304 231.987 320.436 231.819 320.544 cv
231.639 320.664 231.435 320.736 231.207 320.772 cv
231.207 320.784 li
231.471 320.808 231.711 320.88 231.927 320.976 cv
232.143 321.084 232.323 321.216 232.479 321.372 cv
232.635 321.528 232.755 321.708 232.851 321.924 cv
232.935 322.14 232.983 322.356 232.983 322.584 cv
cp
f
239.379 320.952 mo
239.379 321.528 239.331 322.056 239.235 322.536 cv
239.139 323.016 238.995 323.436 238.779 323.784 cv
238.563 324.132 238.287 324.396 237.951 324.576 cv
237.603 324.756 237.183 324.852 236.679 324.852 cv
236.199 324.852 235.803 324.768 235.479 324.612 cv
235.143 324.444 234.879 324.204 234.687 323.868 cv
234.483 323.532 234.339 323.124 234.255 322.644 cv
234.171 322.164 234.135 321.612 234.135 320.988 cv
234.135 320.412 234.183 319.872 234.279 319.392 cv
234.375 318.912 234.519 318.504 234.735 318.156 cv
234.939 317.808 235.215 317.544 235.563 317.352 cv
235.899 317.16 236.331 317.064 236.835 317.064 cv
237.315 317.064 237.711 317.148 238.035 317.316 cv
238.359 317.484 238.623 317.736 238.827 318.072 cv
239.019 318.408 239.163 318.804 239.247 319.284 cv
239.331 319.764 239.379 320.328 239.379 320.952 cv
cp
238.347 321.012 mo
238.347 320.64 238.323 320.304 238.299 320.004 cv
238.275 319.704 238.227 319.44 238.179 319.2 cv
238.131 318.972 238.059 318.78 237.975 318.612 cv
237.891 318.444 237.795 318.312 237.675 318.204 cv
237.555 318.096 237.423 318.012 237.279 317.964 cv
237.123 317.916 236.955 317.892 236.775 317.892 cv
236.439 317.892 236.163 317.976 235.959 318.132 cv
235.755 318.288 235.599 318.504 235.479 318.768 cv
235.359 319.044 235.275 319.368 235.227 319.728 cv
235.179 320.1 235.167 320.496 235.167 320.916 cv
235.167 321.48 235.191 321.96 235.251 322.356 cv
235.311 322.764 235.407 323.088 235.527 323.328 cv
235.647 323.58 235.815 323.76 236.019 323.868 cv
236.211 323.988 236.451 324.036 236.739 324.036 cv
236.955 324.036 237.147 324.012 237.315 323.94 cv
237.483 323.868 237.627 323.772 237.747 323.64 cv
237.867 323.508 237.963 323.352 238.035 323.16 cv
238.107 322.98 238.179 322.776 238.227 322.56 cv
238.275 322.344 238.299 322.104 238.323 321.84 cv
238.335 321.576 238.347 321.3 238.347 321.012 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
288.528 309.6 mo
288.528 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
288.528 309.6 mo
288.528 313.1 li
f
288.528 309.6 mo
288.528 313.1 li
@
288.185 322.596 mo
288.185 322.728 288.161 322.836 288.125 322.908 cv
287.957 323.016 li
287.105 323.016 li
287.105 324.612 li
287.081 324.696 li
286.997 324.744 li
286.853 324.768 li
286.781 324.768 286.709 324.78 286.613 324.78 cv
286.517 324.78 286.433 324.768 286.373 324.768 cv
286.217 324.744 li
286.145 324.696 li
286.133 324.612 li
286.133 323.016 li
283.001 323.016 li
282.881 323.004 li
282.797 322.932 li
282.737 322.8 li
282.725 322.752 282.725 322.668 282.725 322.572 cv
282.725 322.38 li
282.749 322.212 li
282.797 322.08 li
282.881 321.924 li
285.605 317.316 li
285.689 317.244 li
285.833 317.184 li
286.049 317.148 li
286.133 317.148 286.241 317.136 286.361 317.136 cv
286.481 317.136 286.601 317.148 286.697 317.16 cv
286.793 317.172 286.865 317.184 286.925 317.196 cv
287.057 317.256 li
287.105 317.34 li
287.105 322.188 li
287.957 322.188 li
288.125 322.296 li
288.161 322.368 288.185 322.464 288.185 322.596 cv
cp
286.133 318.024 mo
286.121 318.024 li
283.649 322.188 li
286.133 322.188 li
286.133 318.024 li
cp
f
294.197 320.952 mo
294.197 321.528 294.149 322.056 294.053 322.536 cv
293.957 323.016 293.813 323.436 293.597 323.784 cv
293.381 324.132 293.105 324.396 292.769 324.576 cv
292.421 324.756 292.001 324.852 291.497 324.852 cv
291.017 324.852 290.621 324.768 290.297 324.612 cv
289.961 324.444 289.697 324.204 289.505 323.868 cv
289.301 323.532 289.157 323.124 289.073 322.644 cv
288.989 322.164 288.953 321.612 288.953 320.988 cv
288.953 320.412 289.001 319.872 289.097 319.392 cv
289.193 318.912 289.337 318.504 289.553 318.156 cv
289.757 317.808 290.033 317.544 290.381 317.352 cv
290.717 317.16 291.149 317.064 291.653 317.064 cv
292.133 317.064 292.529 317.148 292.853 317.316 cv
293.177 317.484 293.441 317.736 293.645 318.072 cv
293.837 318.408 293.981 318.804 294.065 319.284 cv
294.149 319.764 294.197 320.328 294.197 320.952 cv
cp
293.165 321.012 mo
293.165 320.64 293.141 320.304 293.117 320.004 cv
293.093 319.704 293.045 319.44 292.997 319.2 cv
292.949 318.972 292.877 318.78 292.793 318.612 cv
292.709 318.444 292.613 318.312 292.493 318.204 cv
292.373 318.096 292.241 318.012 292.097 317.964 cv
291.941 317.916 291.773 317.892 291.593 317.892 cv
291.257 317.892 290.981 317.976 290.777 318.132 cv
290.573 318.288 290.417 318.504 290.297 318.768 cv
290.177 319.044 290.093 319.368 290.045 319.728 cv
289.997 320.1 289.985 320.496 289.985 320.916 cv
289.985 321.48 290.009 321.96 290.069 322.356 cv
290.129 322.764 290.225 323.088 290.345 323.328 cv
290.465 323.58 290.633 323.76 290.837 323.868 cv
291.029 323.988 291.269 324.036 291.557 324.036 cv
291.773 324.036 291.965 324.012 292.133 323.94 cv
292.301 323.868 292.445 323.772 292.565 323.64 cv
292.685 323.508 292.781 323.352 292.853 323.16 cv
292.925 322.98 292.997 322.776 293.045 322.56 cv
293.093 322.344 293.117 322.104 293.141 321.84 cv
293.153 321.576 293.165 321.3 293.165 321.012 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
343.346 309.6 mo
343.346 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
343.346 309.6 mo
343.346 313.1 li
f
343.346 309.6 mo
343.346 313.1 li
@
342.644 322.32 mo
342.644 322.728 342.572 323.1 342.44 323.412 cv
342.296 323.724 342.104 323.988 341.864 324.204 cv
341.612 324.42 341.312 324.588 340.964 324.696 cv
340.616 324.792 340.232 324.852 339.812 324.852 cv
339.572 324.852 339.356 324.828 339.14 324.804 cv
338.924 324.768 338.744 324.744 338.576 324.696 cv
338.408 324.648 338.276 324.6 338.18 324.552 cv
338.072 324.504 338 324.468 337.976 324.444 cv
337.916 324.36 li
337.88 324.276 li
337.856 324.156 li
337.856 323.976 li
337.868 323.796 li
337.904 323.664 li
337.952 323.592 li
338.024 323.568 li
338.204 323.64 li
338.288 323.688 338.396 323.748 338.54 323.796 cv
338.684 323.856 338.852 323.916 339.056 323.964 cv
339.26 324.012 339.5 324.036 339.788 324.036 cv
340.052 324.036 340.292 324.012 340.508 323.94 cv
340.724 323.88 340.904 323.784 341.072 323.652 cv
341.228 323.52 341.348 323.352 341.444 323.148 cv
341.528 322.956 341.576 322.704 341.576 322.416 cv
341.576 322.176 341.528 321.96 341.456 321.768 cv
341.384 321.588 341.264 321.432 341.108 321.312 cv
340.952 321.192 340.748 321.096 340.508 321.036 cv
340.268 320.976 339.98 320.94 339.644 320.94 cv
339.404 320.94 339.188 320.952 339.02 320.976 cv
338.852 321 338.696 321.012 338.552 321.012 cv
338.432 321.012 338.36 320.988 338.312 320.94 cv
338.264 320.892 338.252 320.784 338.252 320.64 cv
338.252 317.556 li
338.252 317.436 338.276 317.34 338.336 317.268 cv
338.396 317.208 338.48 317.172 338.6 317.172 cv
341.96 317.172 li
342.044 317.208 li
342.116 317.28 li
342.164 317.412 li
342.176 317.604 li
342.176 317.748 342.152 317.868 342.116 317.94 cv
341.96 318.048 li
339.128 318.048 li
339.128 320.184 li
339.26 320.16 339.404 320.148 339.548 320.148 cv
339.692 320.148 339.848 320.136 340.04 320.136 cv
340.472 320.136 340.844 320.196 341.168 320.292 cv
341.492 320.4 341.768 320.544 341.984 320.736 cv
342.2 320.928 342.356 321.156 342.476 321.42 cv
342.584 321.696 342.644 321.996 342.644 322.32 cv
cp
f
349.016 320.952 mo
349.016 321.528 348.968 322.056 348.872 322.536 cv
348.776 323.016 348.632 323.436 348.416 323.784 cv
348.2 324.132 347.924 324.396 347.588 324.576 cv
347.24 324.756 346.82 324.852 346.316 324.852 cv
345.836 324.852 345.44 324.768 345.116 324.612 cv
344.78 324.444 344.516 324.204 344.324 323.868 cv
344.12 323.532 343.976 323.124 343.892 322.644 cv
343.808 322.164 343.772 321.612 343.772 320.988 cv
343.772 320.412 343.82 319.872 343.916 319.392 cv
344.012 318.912 344.156 318.504 344.372 318.156 cv
344.576 317.808 344.852 317.544 345.2 317.352 cv
345.536 317.16 345.968 317.064 346.472 317.064 cv
346.952 317.064 347.348 317.148 347.672 317.316 cv
347.996 317.484 348.26 317.736 348.464 318.072 cv
348.656 318.408 348.8 318.804 348.884 319.284 cv
348.968 319.764 349.016 320.328 349.016 320.952 cv
cp
347.984 321.012 mo
347.984 320.64 347.96 320.304 347.936 320.004 cv
347.912 319.704 347.864 319.44 347.816 319.2 cv
347.768 318.972 347.696 318.78 347.612 318.612 cv
347.528 318.444 347.432 318.312 347.312 318.204 cv
347.192 318.096 347.06 318.012 346.916 317.964 cv
346.76 317.916 346.592 317.892 346.412 317.892 cv
346.076 317.892 345.8 317.976 345.596 318.132 cv
345.392 318.288 345.236 318.504 345.116 318.768 cv
344.996 319.044 344.912 319.368 344.864 319.728 cv
344.816 320.1 344.804 320.496 344.804 320.916 cv
344.804 321.48 344.828 321.96 344.888 322.356 cv
344.948 322.764 345.044 323.088 345.164 323.328 cv
345.284 323.58 345.452 323.76 345.656 323.868 cv
345.848 323.988 346.088 324.036 346.376 324.036 cv
346.592 324.036 346.784 324.012 346.952 323.94 cv
347.12 323.868 347.264 323.772 347.384 323.64 cv
347.504 323.508 347.6 323.352 347.672 323.16 cv
347.744 322.98 347.816 322.776 347.864 322.56 cv
347.912 322.344 347.936 322.104 347.96 321.84 cv
347.972 321.576 347.984 321.3 347.984 321.012 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
398.164 309.6 mo
398.164 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
398.164 309.6 mo
398.164 313.1 li
f
398.164 309.6 mo
398.164 313.1 li
@
397.69 322.296 mo
397.69 322.632 397.63 322.956 397.534 323.268 cv
397.438 323.58 397.282 323.856 397.066 324.096 cv
396.85 324.336 396.586 324.516 396.262 324.648 cv
395.938 324.78 395.554 324.852 395.122 324.852 cv
394.798 324.852 394.522 324.816 394.282 324.744 cv
394.042 324.672 393.826 324.564 393.646 324.42 cv
393.466 324.276 393.322 324.108 393.202 323.892 cv
393.082 323.676 392.986 323.436 392.914 323.16 cv
392.842 322.896 392.782 322.596 392.758 322.272 cv
392.722 321.96 392.71 321.612 392.71 321.252 cv
392.71 320.928 392.722 320.604 392.758 320.268 cv
392.794 319.932 392.854 319.62 392.95 319.308 cv
393.034 318.996 393.154 318.708 393.31 318.432 cv
393.466 318.168 393.658 317.928 393.898 317.724 cv
394.126 317.532 394.402 317.364 394.726 317.244 cv
395.05 317.124 395.434 317.064 395.866 317.064 cv
396.01 317.064 396.154 317.076 396.298 317.1 cv
396.442 317.124 396.586 317.148 396.706 317.172 cv
396.826 317.196 396.934 317.232 397.03 317.268 cv
397.198 317.352 li
397.258 317.424 li
397.294 317.508 li
397.306 317.604 li
397.318 317.736 li
397.318 317.928 li
397.294 318.048 li
397.234 318.108 li
397.15 318.132 li
396.97 318.096 li
396.898 318.072 396.802 318.036 396.706 318 cv
396.598 317.976 396.466 317.94 396.322 317.916 cv
396.166 317.892 395.998 317.868 395.806 317.868 cv
395.434 317.868 395.122 317.952 394.858 318.096 cv
394.594 318.24 394.39 318.444 394.222 318.696 cv
394.054 318.948 393.922 319.236 393.85 319.56 cv
393.766 319.896 393.718 320.232 393.718 320.592 cv
393.814 320.544 393.922 320.484 394.054 320.424 cv
394.174 320.364 394.318 320.316 394.474 320.268 cv
394.618 320.22 394.786 320.184 394.954 320.148 cv
395.122 320.124 395.302 320.1 395.494 320.1 cv
395.902 320.1 396.238 320.16 396.526 320.268 cv
396.802 320.388 397.03 320.544 397.21 320.736 cv
397.378 320.928 397.51 321.168 397.582 321.432 cv
397.654 321.696 397.69 321.984 397.69 322.296 cv
cp
396.67 322.392 mo
396.67 322.176 396.646 321.972 396.598 321.78 cv
396.55 321.6 396.478 321.444 396.382 321.312 cv
396.274 321.18 396.13 321.084 395.962 321.012 cv
395.782 320.94 395.566 320.904 395.314 320.904 cv
395.158 320.904 395.014 320.916 394.87 320.94 cv
394.726 320.964 394.582 321 394.45 321.048 cv
394.318 321.096 394.186 321.144 394.066 321.204 cv
393.946 321.264 393.826 321.324 393.73 321.396 cv
393.73 321.9 393.754 322.332 393.826 322.668 cv
393.886 323.004 393.982 323.28 394.102 323.484 cv
394.222 323.688 394.378 323.832 394.57 323.916 cv
394.75 324.012 394.966 324.048 395.218 324.048 cv
395.458 324.048 395.674 324.012 395.866 323.916 cv
396.046 323.82 396.202 323.7 396.322 323.532 cv
396.442 323.376 396.526 323.196 396.586 323.004 cv
396.634 322.812 396.67 322.608 396.67 322.392 cv
cp
f
403.834 320.952 mo
403.834 321.528 403.786 322.056 403.69 322.536 cv
403.594 323.016 403.45 323.436 403.234 323.784 cv
403.018 324.132 402.742 324.396 402.406 324.576 cv
402.058 324.756 401.638 324.852 401.134 324.852 cv
400.654 324.852 400.258 324.768 399.934 324.612 cv
399.598 324.444 399.334 324.204 399.142 323.868 cv
398.938 323.532 398.794 323.124 398.71 322.644 cv
398.626 322.164 398.59 321.612 398.59 320.988 cv
398.59 320.412 398.638 319.872 398.734 319.392 cv
398.83 318.912 398.974 318.504 399.19 318.156 cv
399.394 317.808 399.67 317.544 400.018 317.352 cv
400.354 317.16 400.786 317.064 401.29 317.064 cv
401.77 317.064 402.166 317.148 402.49 317.316 cv
402.814 317.484 403.078 317.736 403.282 318.072 cv
403.474 318.408 403.618 318.804 403.702 319.284 cv
403.786 319.764 403.834 320.328 403.834 320.952 cv
cp
402.802 321.012 mo
402.802 320.64 402.778 320.304 402.754 320.004 cv
402.73 319.704 402.682 319.44 402.634 319.2 cv
402.586 318.972 402.514 318.78 402.43 318.612 cv
402.346 318.444 402.25 318.312 402.13 318.204 cv
402.01 318.096 401.878 318.012 401.734 317.964 cv
401.578 317.916 401.41 317.892 401.23 317.892 cv
400.894 317.892 400.618 317.976 400.414 318.132 cv
400.21 318.288 400.054 318.504 399.934 318.768 cv
399.814 319.044 399.73 319.368 399.682 319.728 cv
399.634 320.1 399.622 320.496 399.622 320.916 cv
399.622 321.48 399.646 321.96 399.706 322.356 cv
399.766 322.764 399.862 323.088 399.982 323.328 cv
400.102 323.58 400.27 323.76 400.474 323.868 cv
400.666 323.988 400.906 324.036 401.194 324.036 cv
401.41 324.036 401.602 324.012 401.77 323.94 cv
401.938 323.868 402.082 323.772 402.202 323.64 cv
402.322 323.508 402.418 323.352 402.49 323.16 cv
402.562 322.98 402.634 322.776 402.682 322.56 cv
402.73 322.344 402.754 322.104 402.778 321.84 cv
402.79 321.576 402.802 321.3 402.802 321.012 cv
cp
f
219.832 338.633 mo
219.82 338.825 li
219.772 338.957 li
219.7 339.029 li
219.616 339.053 li
215.98 339.053 li
215.884 339.053 215.8 339.029 215.728 338.969 cv
215.644 338.909 215.608 338.801 215.608 338.645 cv
215.608 331.877 li
215.608 331.733 215.644 331.625 215.728 331.565 cv
215.8 331.505 215.884 331.469 215.98 331.469 cv
219.58 331.469 li
219.664 331.493 li
219.724 331.577 li
219.76 331.709 li
219.784 331.901 li
219.76 332.093 li
219.724 332.213 li
219.664 332.285 li
219.58 332.309 li
216.616 332.309 li
216.616 334.685 li
219.16 334.685 li
219.244 334.721 li
219.304 334.793 li
219.34 334.913 li
219.352 335.105 li
219.34 335.297 li
219.304 335.417 li
219.244 335.489 li
219.16 335.501 li
216.616 335.501 li
216.616 338.213 li
219.616 338.213 li
219.7 338.237 li
219.772 338.309 li
219.82 338.441 li
219.832 338.633 li
cp
f
226.204 336.185 mo
226.204 336.653 226.144 337.073 226.048 337.433 cv
225.952 337.805 225.808 338.117 225.616 338.369 cv
225.424 338.633 225.184 338.825 224.896 338.957 cv
224.608 339.077 224.284 339.149 223.924 339.149 cv
223.756 339.149 223.612 339.125 223.48 339.101 cv
223.348 339.065 223.216 339.029 223.096 338.969 cv
222.964 338.909 222.832 338.825 222.712 338.717 cv
222.592 338.621 222.46 338.501 222.316 338.357 cv
222.316 340.985 li
222.292 341.069 li
222.22 341.129 li
222.076 341.165 li
222.004 341.165 221.932 341.177 221.836 341.177 cv
221.74 341.177 221.656 341.165 221.596 341.165 cv
221.44 341.129 li
221.368 341.069 li
221.356 340.985 li
221.356 333.629 li
221.368 333.557 li
221.44 333.497 li
221.572 333.461 li
221.776 333.449 li
221.968 333.461 li
222.1 333.497 li
222.184 333.557 li
222.208 333.629 li
222.208 334.337 li
222.364 334.181 222.52 334.037 222.664 333.917 cv
222.808 333.797 222.964 333.701 223.108 333.617 cv
223.252 333.545 223.408 333.485 223.576 333.437 cv
223.732 333.389 223.9 333.365 224.08 333.365 cv
224.464 333.365 224.788 333.449 225.052 333.593 cv
225.316 333.737 225.544 333.941 225.712 334.205 cv
225.88 334.469 226 334.769 226.084 335.105 cv
226.156 335.441 226.204 335.801 226.204 336.185 cv
cp
225.184 336.305 mo
225.184 336.041 225.16 335.777 225.124 335.525 cv
225.076 335.273 225.004 335.045 224.908 334.853 cv
224.812 334.661 224.68 334.505 224.512 334.385 cv
224.344 334.265 224.128 334.205 223.888 334.205 cv
223.756 334.205 223.636 334.229 223.516 334.265 cv
223.396 334.301 223.264 334.361 223.144 334.433 cv
223.012 334.517 222.88 334.625 222.748 334.757 cv
222.604 334.889 222.46 335.045 222.316 335.237 cv
222.316 337.325 li
222.58 337.661 222.832 337.913 223.072 338.081 cv
223.312 338.249 223.564 338.333 223.828 338.333 cv
224.068 338.333 224.272 338.285 224.44 338.165 cv
224.608 338.045 224.752 337.889 224.86 337.697 cv
224.968 337.505 225.052 337.277 225.1 337.037 cv
225.148 336.797 225.184 336.545 225.184 336.305 cv
cp
f
228.616 338.909 mo
228.592 338.993 li
228.52 339.041 li
228.376 339.065 li
228.304 339.065 228.232 339.077 228.136 339.077 cv
228.04 339.077 227.956 339.065 227.896 339.065 cv
227.74 339.041 li
227.668 338.993 li
227.656 338.909 li
227.656 333.629 li
227.668 333.557 li
227.74 333.497 li
227.896 333.461 li
227.956 333.461 228.04 333.449 228.136 333.449 cv
228.232 333.449 228.304 333.461 228.376 333.461 cv
228.52 333.497 li
228.592 333.557 li
228.616 333.629 li
228.616 338.909 li
cp
228.736 331.853 mo
228.736 332.081 228.688 332.237 228.604 332.321 cv
228.508 332.405 228.352 332.441 228.124 332.441 cv
227.896 332.441 227.74 332.405 227.656 332.321 cv
227.572 332.249 227.536 332.093 227.536 331.865 cv
227.536 331.649 227.572 331.493 227.656 331.409 cv
227.74 331.325 227.896 331.277 228.136 331.277 cv
228.364 331.277 228.52 331.325 228.604 331.397 cv
228.688 331.481 228.736 331.637 228.736 331.853 cv
cp
f
233.716 337.469 mo
233.716 337.745 233.656 337.985 233.56 338.201 cv
233.464 338.417 233.32 338.585 233.14 338.729 cv
232.948 338.873 232.732 338.981 232.48 339.053 cv
232.216 339.113 231.94 339.149 231.64 339.149 cv
231.448 339.149 231.268 339.125 231.1 339.101 cv
230.932 339.077 230.776 339.053 230.644 339.005 cv
230.512 338.969 230.404 338.921 230.308 338.873 cv
230.212 338.825 230.14 338.789 230.092 338.741 cv
230.008 338.573 li
229.984 338.501 229.984 338.405 229.984 338.285 cv
229.996 338.105 li
230.02 337.973 li
230.068 337.913 li
230.14 337.889 li
230.332 337.973 li
230.416 338.021 230.524 338.081 230.644 338.141 cv
230.764 338.213 230.908 338.273 231.076 338.321 cv
231.244 338.369 231.436 338.393 231.664 338.393 cv
231.82 338.393 231.964 338.381 232.096 338.345 cv
232.228 338.309 232.348 338.261 232.444 338.189 cv
232.54 338.117 232.624 338.033 232.672 337.925 cv
232.72 337.829 232.756 337.697 232.756 337.553 cv
232.756 337.409 232.708 337.277 232.636 337.181 cv
232.564 337.085 232.456 336.989 232.336 336.905 cv
232.216 336.833 232.072 336.761 231.916 336.701 cv
231.76 336.641 231.604 336.581 231.436 336.509 cv
231.268 336.437 231.1 336.365 230.944 336.281 cv
230.788 336.197 230.644 336.089 230.524 335.969 cv
230.392 335.849 230.284 335.705 230.212 335.537 cv
230.14 335.369 230.104 335.177 230.104 334.937 cv
230.104 334.733 230.14 334.529 230.224 334.337 cv
230.296 334.145 230.416 333.989 230.584 333.845 cv
230.74 333.701 230.944 333.593 231.184 333.497 cv
231.424 333.413 231.7 333.365 232.024 333.365 cv
232.168 333.365 232.3 333.377 232.444 333.401 cv
232.588 333.425 232.708 333.461 232.828 333.497 cv
232.948 333.533 233.044 333.569 233.128 333.605 cv
233.308 333.713 li
233.38 333.797 li
233.416 333.881 li
233.428 333.989 li
233.44 334.145 li
233.428 334.313 li
233.404 334.433 li
233.344 334.505 li
233.284 334.529 li
233.128 334.469 li
233.056 334.421 232.972 334.373 232.876 334.325 cv
232.768 334.277 232.648 334.241 232.504 334.193 cv
232.36 334.145 232.192 334.121 232.012 334.121 cv
231.844 334.121 231.7 334.145 231.58 334.181 cv
231.46 334.217 231.352 334.265 231.28 334.337 cv
231.196 334.409 231.136 334.481 231.088 334.577 cv
231.04 334.673 231.028 334.781 231.028 334.877 cv
231.028 335.033 231.064 335.165 231.148 335.261 cv
231.22 335.369 231.328 335.465 231.448 335.537 cv
231.568 335.621 231.712 335.693 231.88 335.753 cv
232.036 335.813 232.204 335.873 232.372 335.945 cv
232.54 336.017 232.696 336.089 232.864 336.173 cv
233.02 336.257 233.164 336.353 233.296 336.473 cv
233.416 336.593 233.524 336.725 233.596 336.893 cv
233.668 337.061 233.716 337.253 233.716 337.469 cv
cp
f
239.992 336.209 mo
239.992 336.641 239.932 337.037 239.824 337.397 cv
239.704 337.757 239.536 338.069 239.32 338.333 cv
239.092 338.597 238.804 338.801 238.468 338.945 cv
238.132 339.077 237.736 339.149 237.304 339.149 cv
236.872 339.149 236.488 339.089 236.164 338.969 cv
235.84 338.849 235.576 338.657 235.36 338.417 cv
235.144 338.177 234.976 337.877 234.88 337.517 cv
234.772 337.169 234.724 336.773 234.724 336.317 cv
234.724 335.885 234.772 335.489 234.892 335.129 cv
235 334.769 235.168 334.457 235.396 334.193 cv
235.612 333.929 235.9 333.725 236.236 333.581 cv
236.572 333.437 236.956 333.365 237.412 333.365 cv
237.844 333.365 238.216 333.437 238.54 333.569 cv
238.864 333.701 239.14 333.893 239.356 334.133 cv
239.572 334.373 239.728 334.673 239.836 335.021 cv
239.932 335.381 239.992 335.777 239.992 336.209 cv
cp
238.972 336.281 mo
238.972 335.993 238.936 335.729 238.888 335.465 cv
238.84 335.213 238.756 334.997 238.636 334.805 cv
238.516 334.613 238.348 334.469 238.144 334.349 cv
237.928 334.241 237.676 334.181 237.376 334.181 cv
237.088 334.181 236.836 334.241 236.632 334.337 cv
236.428 334.433 236.26 334.577 236.128 334.769 cv
235.996 334.961 235.9 335.177 235.828 335.429 cv
235.756 335.681 235.732 335.957 235.732 336.257 cv
235.732 336.545 235.756 336.821 235.816 337.073 cv
235.864 337.325 235.96 337.541 236.08 337.733 cv
236.2 337.925 236.356 338.081 236.572 338.189 cv
236.776 338.297 237.04 338.345 237.352 338.345 cv
237.628 338.345 237.868 338.297 238.084 338.201 cv
238.288 338.105 238.456 337.961 238.588 337.769 cv
238.72 337.589 238.816 337.373 238.876 337.121 cv
238.936 336.869 238.972 336.593 238.972 336.281 cv
cp
f
245.932 338.909 mo
245.908 338.993 li
245.836 339.041 li
245.704 339.065 li
245.512 339.077 li
245.308 339.065 li
245.164 339.041 li
245.092 338.993 li
245.068 338.909 li
245.068 338.213 li
244.792 338.513 244.504 338.741 244.204 338.909 cv
243.904 339.065 243.58 339.149 243.232 339.149 cv
242.836 339.149 242.5 339.077 242.236 338.933 cv
241.96 338.789 241.732 338.597 241.564 338.333 cv
241.396 338.081 241.264 337.781 241.192 337.433 cv
241.12 337.085 241.084 336.713 241.084 336.329 cv
241.084 335.885 241.132 335.477 241.228 335.105 cv
241.324 334.745 241.468 334.433 241.66 334.169 cv
241.852 333.917 242.08 333.725 242.368 333.581 cv
242.656 333.437 242.98 333.365 243.352 333.365 cv
243.664 333.365 243.94 333.437 244.204 333.569 cv
244.456 333.713 244.708 333.905 244.96 334.169 cv
244.96 331.097 li
244.984 331.025 li
245.056 330.965 li
245.2 330.929 li
245.26 330.929 245.344 330.917 245.44 330.917 cv
245.536 330.917 245.608 330.929 245.68 330.929 cv
245.824 330.965 li
245.908 331.025 li
245.932 331.097 li
245.932 338.909 li
cp
244.96 335.201 mo
244.696 334.877 244.432 334.625 244.192 334.457 cv
243.952 334.289 243.7 334.205 243.436 334.205 cv
243.184 334.205 242.968 334.265 242.8 334.385 cv
242.632 334.505 242.488 334.649 242.392 334.841 cv
242.284 335.033 242.2 335.249 242.152 335.489 cv
242.104 335.729 242.08 335.981 242.08 336.233 cv
242.08 336.497 242.092 336.761 242.14 337.013 cv
242.188 337.265 242.26 337.493 242.356 337.685 cv
242.452 337.889 242.596 338.045 242.764 338.165 cv
242.932 338.285 243.136 338.333 243.4 338.333 cv
243.52 338.333 243.652 338.321 243.772 338.285 cv
243.892 338.261 244.012 338.201 244.132 338.117 cv
244.252 338.033 244.384 337.925 244.528 337.793 cv
244.66 337.661 244.804 337.493 244.96 337.301 cv
244.96 335.201 li
cp
f
252.22 336.041 mo
252.22 336.197 252.172 336.305 252.1 336.365 cv
252.028 336.437 251.932 336.461 251.836 336.461 cv
248.38 336.461 li
248.38 336.761 248.404 337.025 248.464 337.253 cv
248.524 337.493 248.62 337.685 248.764 337.853 cv
248.896 338.021 249.076 338.153 249.292 338.249 cv
249.508 338.345 249.784 338.381 250.096 338.381 cv
250.348 338.381 250.576 338.369 250.768 338.321 cv
250.96 338.285 251.128 338.237 251.272 338.189 cv
251.416 338.141 251.524 338.093 251.62 338.045 cv
251.716 338.009 251.788 337.985 251.836 337.985 cv
251.908 338.009 li
251.956 338.069 li
251.98 338.177 li
251.992 338.357 li
251.98 338.489 li
251.968 338.597 li
251.944 338.669 li
251.884 338.741 li
251.86 338.765 251.8 338.789 251.704 338.837 cv
251.596 338.885 251.464 338.933 251.296 338.981 cv
251.128 339.029 250.924 339.065 250.708 339.101 cv
250.48 339.125 250.24 339.149 250 339.149 cv
249.568 339.149 249.184 339.089 248.86 338.981 cv
248.524 338.861 248.248 338.681 248.032 338.441 cv
247.816 338.201 247.648 337.913 247.528 337.553 cv
247.408 337.193 247.36 336.773 247.36 336.293 cv
247.36 335.837 247.42 335.429 247.54 335.069 cv
247.66 334.709 247.828 334.409 248.044 334.157 cv
248.26 333.905 248.536 333.713 248.848 333.569 cv
249.16 333.437 249.508 333.365 249.892 333.365 cv
250.3 333.365 250.66 333.437 250.948 333.569 cv
251.236 333.713 251.476 333.893 251.668 334.109 cv
251.86 334.337 251.992 334.601 252.088 334.901 cv
252.172 335.201 252.22 335.525 252.22 335.861 cv
252.22 336.041 li
cp
251.248 335.753 mo
251.248 335.249 251.14 334.853 250.9 334.565 cv
250.66 334.277 250.312 334.121 249.856 334.121 cv
249.616 334.121 249.4 334.169 249.22 334.265 cv
249.04 334.361 248.896 334.481 248.776 334.625 cv
248.656 334.769 248.56 334.949 248.488 335.141 cv
248.416 335.333 248.38 335.537 248.38 335.753 cv
251.248 335.753 li
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
52.8094 272.557 mo
414.609 272.557 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 272.557 mo
49.3094 272.557 li
f
52.8094 272.557 mo
49.3094 272.557 li
@
32.951 274.199 mo
32.951 274.607 32.879 274.979 32.747 275.291 cv
32.603 275.603 32.411 275.867 32.171 276.083 cv
31.919 276.299 31.619 276.467 31.271 276.575 cv
30.923 276.671 30.539 276.731 30.119 276.731 cv
29.879 276.731 29.663 276.707 29.447 276.683 cv
29.231 276.647 29.051 276.623 28.883 276.575 cv
28.715 276.527 28.583 276.479 28.487 276.431 cv
28.379 276.383 28.307 276.347 28.283 276.323 cv
28.223 276.239 li
28.187 276.155 li
28.163 276.035 li
28.163 275.855 li
28.175 275.675 li
28.211 275.543 li
28.259 275.471 li
28.331 275.447 li
28.511 275.519 li
28.595 275.567 28.703 275.627 28.847 275.675 cv
28.991 275.735 29.159 275.795 29.363 275.843 cv
29.567 275.891 29.807 275.915 30.095 275.915 cv
30.359 275.915 30.599 275.891 30.815 275.819 cv
31.031 275.759 31.211 275.663 31.379 275.531 cv
31.535 275.399 31.655 275.231 31.751 275.027 cv
31.835 274.835 31.883 274.583 31.883 274.295 cv
31.883 274.055 31.835 273.839 31.763 273.647 cv
31.691 273.467 31.571 273.311 31.415 273.191 cv
31.259 273.071 31.055 272.975 30.815 272.915 cv
30.575 272.855 30.287 272.819 29.951 272.819 cv
29.711 272.819 29.495 272.831 29.327 272.855 cv
29.159 272.879 29.003 272.891 28.859 272.891 cv
28.739 272.891 28.667 272.867 28.619 272.819 cv
28.571 272.771 28.559 272.663 28.559 272.519 cv
28.559 269.435 li
28.559 269.315 28.583 269.219 28.643 269.147 cv
28.703 269.087 28.787 269.051 28.907 269.051 cv
32.267 269.051 li
32.351 269.087 li
32.423 269.159 li
32.471 269.291 li
32.483 269.483 li
32.483 269.627 32.459 269.747 32.423 269.819 cv
32.267 269.927 li
29.435 269.927 li
29.435 272.063 li
29.567 272.039 29.711 272.027 29.855 272.027 cv
29.999 272.027 30.155 272.015 30.347 272.015 cv
30.779 272.015 31.151 272.075 31.475 272.171 cv
31.799 272.279 32.075 272.423 32.291 272.615 cv
32.507 272.807 32.663 273.035 32.783 273.299 cv
32.891 273.575 32.951 273.875 32.951 274.199 cv
cp
f
39.323 272.831 mo
39.323 273.407 39.275 273.935 39.179 274.415 cv
39.083 274.895 38.939 275.315 38.723 275.663 cv
38.507 276.011 38.231 276.275 37.895 276.455 cv
37.547 276.635 37.127 276.731 36.623 276.731 cv
36.143 276.731 35.747 276.647 35.423 276.491 cv
35.087 276.323 34.823 276.083 34.631 275.747 cv
34.427 275.411 34.283 275.003 34.199 274.523 cv
34.115 274.043 34.079 273.491 34.079 272.867 cv
34.079 272.291 34.127 271.751 34.223 271.271 cv
34.319 270.791 34.463 270.383 34.679 270.035 cv
34.883 269.687 35.159 269.423 35.507 269.231 cv
35.843 269.039 36.275 268.943 36.779 268.943 cv
37.259 268.943 37.655 269.027 37.979 269.195 cv
38.303 269.363 38.567 269.615 38.771 269.951 cv
38.963 270.287 39.107 270.683 39.191 271.163 cv
39.275 271.643 39.323 272.207 39.323 272.831 cv
cp
38.291 272.891 mo
38.291 272.519 38.267 272.183 38.243 271.883 cv
38.219 271.583 38.171 271.319 38.123 271.079 cv
38.075 270.851 38.003 270.659 37.919 270.491 cv
37.835 270.323 37.739 270.191 37.619 270.083 cv
37.499 269.975 37.367 269.891 37.223 269.843 cv
37.067 269.795 36.899 269.771 36.719 269.771 cv
36.383 269.771 36.107 269.855 35.903 270.011 cv
35.699 270.167 35.543 270.383 35.423 270.647 cv
35.303 270.923 35.219 271.247 35.171 271.607 cv
35.123 271.979 35.111 272.375 35.111 272.795 cv
35.111 273.359 35.135 273.839 35.195 274.235 cv
35.255 274.643 35.351 274.967 35.471 275.207 cv
35.591 275.459 35.759 275.639 35.963 275.747 cv
36.155 275.867 36.395 275.915 36.683 275.915 cv
36.899 275.915 37.091 275.891 37.259 275.819 cv
37.427 275.747 37.571 275.651 37.691 275.519 cv
37.811 275.387 37.907 275.231 37.979 275.039 cv
38.051 274.859 38.123 274.655 38.171 274.439 cv
38.219 274.223 38.243 273.983 38.267 273.719 cv
38.279 273.455 38.291 273.179 38.291 272.891 cv
cp
f
45.4071 272.831 mo
45.4071 273.407 45.3591 273.935 45.2631 274.415 cv
45.1671 274.895 45.0231 275.315 44.8071 275.663 cv
44.5911 276.011 44.3151 276.275 43.9791 276.455 cv
43.6311 276.635 43.2111 276.731 42.7071 276.731 cv
42.2271 276.731 41.8311 276.647 41.5071 276.491 cv
41.1711 276.323 40.9071 276.083 40.7151 275.747 cv
40.5111 275.411 40.3671 275.003 40.2831 274.523 cv
40.1991 274.043 40.1631 273.491 40.1631 272.867 cv
40.1631 272.291 40.2111 271.751 40.3071 271.271 cv
40.4031 270.791 40.5471 270.383 40.7631 270.035 cv
40.9671 269.687 41.2431 269.423 41.5911 269.231 cv
41.9271 269.039 42.3591 268.943 42.8631 268.943 cv
43.3431 268.943 43.7391 269.027 44.0631 269.195 cv
44.3871 269.363 44.6511 269.615 44.8551 269.951 cv
45.0471 270.287 45.1911 270.683 45.2751 271.163 cv
45.3591 271.643 45.4071 272.207 45.4071 272.831 cv
cp
44.3751 272.891 mo
44.3751 272.519 44.3511 272.183 44.3271 271.883 cv
44.3031 271.583 44.2551 271.319 44.2071 271.079 cv
44.1591 270.851 44.0871 270.659 44.0031 270.491 cv
43.9191 270.323 43.8231 270.191 43.7031 270.083 cv
43.5831 269.975 43.4511 269.891 43.3071 269.843 cv
43.1511 269.795 42.9831 269.771 42.8031 269.771 cv
42.4671 269.771 42.1911 269.855 41.9871 270.011 cv
41.7831 270.167 41.6271 270.383 41.5071 270.647 cv
41.3871 270.923 41.3031 271.247 41.2551 271.607 cv
41.2071 271.979 41.1951 272.375 41.1951 272.795 cv
41.1951 273.359 41.2191 273.839 41.2791 274.235 cv
41.3391 274.643 41.4351 274.967 41.5551 275.207 cv
41.6751 275.459 41.8431 275.639 42.0471 275.747 cv
42.2391 275.867 42.4791 275.915 42.7671 275.915 cv
42.9831 275.915 43.1751 275.891 43.3431 275.819 cv
43.5111 275.747 43.6551 275.651 43.7751 275.519 cv
43.8951 275.387 43.9911 275.231 44.0631 275.039 cv
44.1351 274.859 44.2071 274.655 44.2551 274.439 cv
44.3031 274.223 44.3271 273.983 44.3511 273.719 cv
44.3631 273.455 44.3751 273.179 44.3751 272.891 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
52.8094 218.377 mo
414.609 218.377 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 218.377 mo
49.3094 218.377 li
f
52.8094 218.377 mo
49.3094 218.377 li
@
26.9329 222.059 mo
26.9089 222.251 li
26.8609 222.371 li
26.7889 222.443 li
26.7169 222.455 li
22.7569 222.455 li
22.6849 222.443 li
22.6129 222.371 li
22.5529 222.251 li
22.5409 222.059 li
22.5529 221.879 li
22.6009 221.747 li
22.6729 221.675 li
22.7569 221.651 li
24.3409 221.651 li
24.3409 215.879 li
22.8769 216.755 li
22.6849 216.827 li
22.5769 216.803 li
22.5289 216.671 li
22.5169 216.623 22.5169 216.551 22.5169 216.455 cv
22.5169 216.275 li
22.5409 216.167 li
22.6009 216.083 li
22.6849 216.011 li
24.4369 214.895 li
24.4849 214.859 li
24.5689 214.835 li
24.7009 214.823 li
24.8809 214.823 li
25.1089 214.835 li
25.2529 214.871 li
25.3249 214.919 li
25.3489 214.979 li
25.3489 221.651 li
26.7169 221.651 li
26.8009 221.675 li
26.8729 221.747 li
26.9089 221.879 li
26.9329 222.059 li
cp
f
33.2449 218.651 mo
33.2449 219.227 33.1969 219.755 33.1009 220.235 cv
33.0049 220.715 32.8609 221.135 32.6449 221.483 cv
32.4289 221.831 32.1529 222.095 31.8169 222.275 cv
31.4689 222.455 31.0489 222.551 30.5449 222.551 cv
30.0649 222.551 29.6689 222.467 29.3449 222.311 cv
29.0089 222.143 28.7449 221.903 28.5529 221.567 cv
28.3489 221.231 28.2049 220.823 28.1209 220.343 cv
28.0369 219.863 28.0009 219.311 28.0009 218.687 cv
28.0009 218.111 28.0489 217.571 28.1449 217.091 cv
28.2409 216.611 28.3849 216.203 28.6009 215.855 cv
28.8049 215.507 29.0809 215.243 29.4289 215.051 cv
29.7649 214.859 30.1969 214.763 30.7009 214.763 cv
31.1809 214.763 31.5769 214.847 31.9009 215.015 cv
32.2249 215.183 32.4889 215.435 32.6929 215.771 cv
32.8849 216.107 33.0289 216.503 33.1129 216.983 cv
33.1969 217.463 33.2449 218.027 33.2449 218.651 cv
cp
32.2129 218.711 mo
32.2129 218.339 32.1889 218.003 32.1649 217.703 cv
32.1409 217.403 32.0929 217.139 32.0449 216.899 cv
31.9969 216.671 31.9249 216.479 31.8409 216.311 cv
31.7569 216.143 31.6609 216.011 31.5409 215.903 cv
31.4209 215.795 31.2889 215.711 31.1449 215.663 cv
30.9889 215.615 30.8209 215.591 30.6409 215.591 cv
30.3049 215.591 30.0289 215.675 29.8249 215.831 cv
29.6209 215.987 29.4649 216.203 29.3449 216.467 cv
29.2249 216.743 29.1409 217.067 29.0929 217.427 cv
29.0449 217.799 29.0329 218.195 29.0329 218.615 cv
29.0329 219.179 29.0569 219.659 29.1169 220.055 cv
29.1769 220.463 29.2729 220.787 29.3929 221.027 cv
29.5129 221.279 29.6809 221.459 29.8849 221.567 cv
30.0769 221.687 30.3169 221.735 30.6049 221.735 cv
30.8209 221.735 31.0129 221.711 31.1809 221.639 cv
31.3489 221.567 31.4929 221.471 31.6129 221.339 cv
31.7329 221.207 31.8289 221.051 31.9009 220.859 cv
31.9729 220.679 32.0449 220.475 32.0929 220.259 cv
32.1409 220.043 32.1649 219.803 32.1889 219.539 cv
32.2009 219.275 32.2129 218.999 32.2129 218.711 cv
cp
f
39.329 218.651 mo
39.329 219.227 39.281 219.755 39.185 220.235 cv
39.089 220.715 38.945 221.135 38.729 221.483 cv
38.513 221.831 38.237 222.095 37.901 222.275 cv
37.553 222.455 37.133 222.551 36.629 222.551 cv
36.149 222.551 35.753 222.467 35.429 222.311 cv
35.093 222.143 34.829 221.903 34.637 221.567 cv
34.433 221.231 34.289 220.823 34.205 220.343 cv
34.121 219.863 34.085 219.311 34.085 218.687 cv
34.085 218.111 34.133 217.571 34.229 217.091 cv
34.325 216.611 34.469 216.203 34.685 215.855 cv
34.889 215.507 35.165 215.243 35.513 215.051 cv
35.849 214.859 36.281 214.763 36.785 214.763 cv
37.265 214.763 37.661 214.847 37.985 215.015 cv
38.309 215.183 38.573 215.435 38.777 215.771 cv
38.969 216.107 39.113 216.503 39.197 216.983 cv
39.281 217.463 39.329 218.027 39.329 218.651 cv
cp
38.297 218.711 mo
38.297 218.339 38.273 218.003 38.249 217.703 cv
38.225 217.403 38.177 217.139 38.129 216.899 cv
38.081 216.671 38.009 216.479 37.925 216.311 cv
37.841 216.143 37.745 216.011 37.625 215.903 cv
37.505 215.795 37.373 215.711 37.229 215.663 cv
37.073 215.615 36.905 215.591 36.725 215.591 cv
36.389 215.591 36.113 215.675 35.909 215.831 cv
35.705 215.987 35.549 216.203 35.429 216.467 cv
35.309 216.743 35.225 217.067 35.177 217.427 cv
35.129 217.799 35.117 218.195 35.117 218.615 cv
35.117 219.179 35.141 219.659 35.201 220.055 cv
35.261 220.463 35.357 220.787 35.477 221.027 cv
35.597 221.279 35.765 221.459 35.969 221.567 cv
36.161 221.687 36.401 221.735 36.689 221.735 cv
36.905 221.735 37.097 221.711 37.265 221.639 cv
37.433 221.567 37.577 221.471 37.697 221.339 cv
37.817 221.207 37.913 221.051 37.985 220.859 cv
38.057 220.679 38.129 220.475 38.177 220.259 cv
38.225 220.043 38.249 219.803 38.273 219.539 cv
38.285 219.275 38.297 218.999 38.297 218.711 cv
cp
f
45.413 218.651 mo
45.413 219.227 45.365 219.755 45.269 220.235 cv
45.173 220.715 45.029 221.135 44.813 221.483 cv
44.597 221.831 44.321 222.095 43.985 222.275 cv
43.637 222.455 43.217 222.551 42.713 222.551 cv
42.233 222.551 41.837 222.467 41.513 222.311 cv
41.177 222.143 40.913 221.903 40.721 221.567 cv
40.517 221.231 40.373 220.823 40.289 220.343 cv
40.205 219.863 40.169 219.311 40.169 218.687 cv
40.169 218.111 40.217 217.571 40.313 217.091 cv
40.409 216.611 40.553 216.203 40.769 215.855 cv
40.973 215.507 41.249 215.243 41.597 215.051 cv
41.933 214.859 42.365 214.763 42.869 214.763 cv
43.349 214.763 43.745 214.847 44.069 215.015 cv
44.393 215.183 44.657 215.435 44.861 215.771 cv
45.053 216.107 45.197 216.503 45.281 216.983 cv
45.365 217.463 45.413 218.027 45.413 218.651 cv
cp
44.381 218.711 mo
44.381 218.339 44.357 218.003 44.333 217.703 cv
44.309 217.403 44.261 217.139 44.213 216.899 cv
44.165 216.671 44.093 216.479 44.009 216.311 cv
43.925 216.143 43.829 216.011 43.709 215.903 cv
43.589 215.795 43.457 215.711 43.313 215.663 cv
43.157 215.615 42.989 215.591 42.809 215.591 cv
42.473 215.591 42.197 215.675 41.993 215.831 cv
41.789 215.987 41.633 216.203 41.513 216.467 cv
41.393 216.743 41.309 217.067 41.261 217.427 cv
41.213 217.799 41.201 218.195 41.201 218.615 cv
41.201 219.179 41.225 219.659 41.285 220.055 cv
41.345 220.463 41.441 220.787 41.561 221.027 cv
41.681 221.279 41.849 221.459 42.053 221.567 cv
42.245 221.687 42.485 221.735 42.773 221.735 cv
42.989 221.735 43.181 221.711 43.349 221.639 cv
43.517 221.567 43.661 221.471 43.781 221.339 cv
43.901 221.207 43.997 221.051 44.069 220.859 cv
44.141 220.679 44.213 220.475 44.261 220.259 cv
44.309 220.043 44.333 219.803 44.357 219.539 cv
44.369 219.275 44.381 218.999 44.381 218.711 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
52.8094 164.197 mo
414.609 164.197 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 164.197 mo
49.3094 164.197 li
f
52.8094 164.197 mo
49.3094 164.197 li
@
26.9329 167.879 mo
26.9089 168.071 li
26.8609 168.191 li
26.7889 168.263 li
26.7169 168.275 li
22.7569 168.275 li
22.6849 168.263 li
22.6129 168.191 li
22.5529 168.071 li
22.5409 167.879 li
22.5529 167.699 li
22.6009 167.567 li
22.6729 167.495 li
22.7569 167.471 li
24.3409 167.471 li
24.3409 161.699 li
22.8769 162.575 li
22.6849 162.647 li
22.5769 162.623 li
22.5289 162.491 li
22.5169 162.443 22.5169 162.371 22.5169 162.275 cv
22.5169 162.095 li
22.5409 161.987 li
22.6009 161.903 li
22.6849 161.831 li
24.4369 160.715 li
24.4849 160.679 li
24.5689 160.655 li
24.7009 160.643 li
24.8809 160.643 li
25.1089 160.655 li
25.2529 160.691 li
25.3249 160.739 li
25.3489 160.799 li
25.3489 167.471 li
26.7169 167.471 li
26.8009 167.495 li
26.8729 167.567 li
26.9089 167.699 li
26.9329 167.879 li
cp
f
32.9569 165.839 mo
32.9569 166.247 32.8849 166.619 32.7529 166.931 cv
32.6089 167.243 32.4169 167.507 32.1769 167.723 cv
31.9249 167.939 31.6249 168.107 31.2769 168.215 cv
30.9289 168.311 30.5449 168.371 30.1249 168.371 cv
29.8849 168.371 29.6689 168.347 29.4529 168.323 cv
29.2369 168.287 29.0569 168.263 28.8889 168.215 cv
28.7209 168.167 28.5889 168.119 28.4929 168.071 cv
28.3849 168.023 28.3129 167.987 28.2889 167.963 cv
28.2289 167.879 li
28.1929 167.795 li
28.1689 167.675 li
28.1689 167.495 li
28.1809 167.315 li
28.2169 167.183 li
28.2649 167.111 li
28.3369 167.087 li
28.5169 167.159 li
28.6009 167.207 28.7089 167.267 28.8529 167.315 cv
28.9969 167.375 29.1649 167.435 29.3689 167.483 cv
29.5729 167.531 29.8129 167.555 30.1009 167.555 cv
30.3649 167.555 30.6049 167.531 30.8209 167.459 cv
31.0369 167.399 31.2169 167.303 31.3849 167.171 cv
31.5409 167.039 31.6609 166.871 31.7569 166.667 cv
31.8409 166.475 31.8889 166.223 31.8889 165.935 cv
31.8889 165.695 31.8409 165.479 31.7689 165.287 cv
31.6969 165.107 31.5769 164.951 31.4209 164.831 cv
31.2649 164.711 31.0609 164.615 30.8209 164.555 cv
30.5809 164.495 30.2929 164.459 29.9569 164.459 cv
29.7169 164.459 29.5009 164.471 29.3329 164.495 cv
29.1649 164.519 29.0089 164.531 28.8649 164.531 cv
28.7449 164.531 28.6729 164.507 28.6249 164.459 cv
28.5769 164.411 28.5649 164.303 28.5649 164.159 cv
28.5649 161.075 li
28.5649 160.955 28.5889 160.859 28.6489 160.787 cv
28.7089 160.727 28.7929 160.691 28.9129 160.691 cv
32.2729 160.691 li
32.3569 160.727 li
32.4289 160.799 li
32.4769 160.931 li
32.4889 161.123 li
32.4889 161.267 32.4649 161.387 32.4289 161.459 cv
32.2729 161.567 li
29.4409 161.567 li
29.4409 163.703 li
29.5729 163.679 29.7169 163.667 29.8609 163.667 cv
30.0049 163.667 30.1609 163.655 30.3529 163.655 cv
30.7849 163.655 31.1569 163.715 31.4809 163.811 cv
31.8049 163.919 32.0809 164.063 32.2969 164.255 cv
32.5129 164.447 32.6689 164.675 32.7889 164.939 cv
32.8969 165.215 32.9569 165.515 32.9569 165.839 cv
cp
f
39.329 164.471 mo
39.329 165.047 39.281 165.575 39.185 166.055 cv
39.089 166.535 38.945 166.955 38.729 167.303 cv
38.513 167.651 38.237 167.915 37.901 168.095 cv
37.553 168.275 37.133 168.371 36.629 168.371 cv
36.149 168.371 35.753 168.287 35.429 168.131 cv
35.093 167.963 34.829 167.723 34.637 167.387 cv
34.433 167.051 34.289 166.643 34.205 166.163 cv
34.121 165.683 34.085 165.131 34.085 164.507 cv
34.085 163.931 34.133 163.391 34.229 162.911 cv
34.325 162.431 34.469 162.023 34.685 161.675 cv
34.889 161.327 35.165 161.063 35.513 160.871 cv
35.849 160.679 36.281 160.583 36.785 160.583 cv
37.265 160.583 37.661 160.667 37.985 160.835 cv
38.309 161.003 38.573 161.255 38.777 161.591 cv
38.969 161.927 39.113 162.323 39.197 162.803 cv
39.281 163.283 39.329 163.847 39.329 164.471 cv
cp
38.297 164.531 mo
38.297 164.159 38.273 163.823 38.249 163.523 cv
38.225 163.223 38.177 162.959 38.129 162.719 cv
38.081 162.491 38.009 162.299 37.925 162.131 cv
37.841 161.963 37.745 161.831 37.625 161.723 cv
37.505 161.615 37.373 161.531 37.229 161.483 cv
37.073 161.435 36.905 161.411 36.725 161.411 cv
36.389 161.411 36.113 161.495 35.909 161.651 cv
35.705 161.807 35.549 162.023 35.429 162.287 cv
35.309 162.563 35.225 162.887 35.177 163.247 cv
35.129 163.619 35.117 164.015 35.117 164.435 cv
35.117 164.999 35.141 165.479 35.201 165.875 cv
35.261 166.283 35.357 166.607 35.477 166.847 cv
35.597 167.099 35.765 167.279 35.969 167.387 cv
36.161 167.507 36.401 167.555 36.689 167.555 cv
36.905 167.555 37.097 167.531 37.265 167.459 cv
37.433 167.387 37.577 167.291 37.697 167.159 cv
37.817 167.027 37.913 166.871 37.985 166.679 cv
38.057 166.499 38.129 166.295 38.177 166.079 cv
38.225 165.863 38.249 165.623 38.273 165.359 cv
38.285 165.095 38.297 164.819 38.297 164.531 cv
cp
f
45.413 164.471 mo
45.413 165.047 45.365 165.575 45.269 166.055 cv
45.173 166.535 45.029 166.955 44.813 167.303 cv
44.597 167.651 44.321 167.915 43.985 168.095 cv
43.637 168.275 43.217 168.371 42.713 168.371 cv
42.233 168.371 41.837 168.287 41.513 168.131 cv
41.177 167.963 40.913 167.723 40.721 167.387 cv
40.517 167.051 40.373 166.643 40.289 166.163 cv
40.205 165.683 40.169 165.131 40.169 164.507 cv
40.169 163.931 40.217 163.391 40.313 162.911 cv
40.409 162.431 40.553 162.023 40.769 161.675 cv
40.973 161.327 41.249 161.063 41.597 160.871 cv
41.933 160.679 42.365 160.583 42.869 160.583 cv
43.349 160.583 43.745 160.667 44.069 160.835 cv
44.393 161.003 44.657 161.255 44.861 161.591 cv
45.053 161.927 45.197 162.323 45.281 162.803 cv
45.365 163.283 45.413 163.847 45.413 164.471 cv
cp
44.381 164.531 mo
44.381 164.159 44.357 163.823 44.333 163.523 cv
44.309 163.223 44.261 162.959 44.213 162.719 cv
44.165 162.491 44.093 162.299 44.009 162.131 cv
43.925 161.963 43.829 161.831 43.709 161.723 cv
43.589 161.615 43.457 161.531 43.313 161.483 cv
43.157 161.435 42.989 161.411 42.809 161.411 cv
42.473 161.411 42.197 161.495 41.993 161.651 cv
41.789 161.807 41.633 162.023 41.513 162.287 cv
41.393 162.563 41.309 162.887 41.261 163.247 cv
41.213 163.619 41.201 164.015 41.201 164.435 cv
41.201 164.999 41.225 165.479 41.285 165.875 cv
41.345 166.283 41.441 166.607 41.561 166.847 cv
41.681 167.099 41.849 167.279 42.053 167.387 cv
42.245 167.507 42.485 167.555 42.773 167.555 cv
42.989 167.555 43.181 167.531 43.349 167.459 cv
43.517 167.387 43.661 167.291 43.781 167.159 cv
43.901 167.027 43.997 166.871 44.069 166.679 cv
44.141 166.499 44.213 166.295 44.261 166.079 cv
44.309 165.863 44.333 165.623 44.357 165.359 cv
44.369 165.095 44.381 164.819 44.381 164.531 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
52.8094 110.017 mo
414.609 110.017 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 110.017 mo
49.3094 110.017 li
f
52.8094 110.017 mo
49.3094 110.017 li
@
26.9089 113.663 mo
26.8969 113.855 li
26.8489 113.987 li
26.7769 114.071 li
26.6929 114.095 li
22.4929 114.095 li
22.3489 114.083 li
22.2409 114.011 li
22.1809 113.879 li
22.1689 113.819 22.1689 113.747 22.1689 113.651 cv
22.1689 113.459 li
22.2049 113.303 li
22.2769 113.171 li
22.3969 113.015 li
23.8729 111.455 li
24.2089 111.095 24.4729 110.783 24.6889 110.495 cv
24.8929 110.207 25.0489 109.955 25.1569 109.715 cv
25.2649 109.475 25.3369 109.271 25.3729 109.079 cv
25.4089 108.887 25.4329 108.707 25.4329 108.539 cv
25.4329 108.371 25.3969 108.215 25.3489 108.059 cv
25.2889 107.915 25.2049 107.783 25.1089 107.663 cv
25.0129 107.555 24.8809 107.471 24.7249 107.399 cv
24.5689 107.327 24.3889 107.291 24.1849 107.291 cv
23.9449 107.291 23.7289 107.327 23.5369 107.399 cv
23.3449 107.471 23.1889 107.543 23.0449 107.615 cv
22.9009 107.687 22.7809 107.759 22.6849 107.831 cv
22.5889 107.903 22.5169 107.927 22.4809 107.927 cv
22.3969 107.903 li
22.3489 107.831 li
22.3129 107.687 li
22.3009 107.471 li
22.3009 107.327 li
22.3249 107.207 li
22.3729 107.123 li
22.4569 107.027 li
22.5049 106.979 22.5769 106.931 22.6969 106.859 cv
22.8169 106.787 22.9609 106.727 23.1409 106.655 cv
23.3089 106.583 23.5009 106.523 23.7169 106.475 cv
23.9209 106.427 24.1369 106.403 24.3769 106.403 cv
24.7369 106.403 25.0609 106.463 25.3369 106.559 cv
25.6009 106.667 25.8289 106.811 26.0209 106.991 cv
26.2009 107.171 26.3329 107.375 26.4289 107.615 cv
26.5129 107.855 26.5609 108.107 26.5609 108.371 cv
26.5609 108.611 26.5369 108.851 26.5009 109.091 cv
26.4529 109.331 26.3689 109.595 26.2249 109.871 cv
26.0809 110.159 25.8889 110.471 25.6249 110.807 cv
25.3609 111.155 25.0129 111.551 24.5809 111.983 cv
23.3809 113.243 li
26.6809 113.243 li
26.7649 113.267 li
26.8489 113.351 li
26.8969 113.483 li
26.9089 113.663 li
cp
f
33.2449 110.291 mo
33.2449 110.867 33.1969 111.395 33.1009 111.875 cv
33.0049 112.355 32.8609 112.775 32.6449 113.123 cv
32.4289 113.471 32.1529 113.735 31.8169 113.915 cv
31.4689 114.095 31.0489 114.191 30.5449 114.191 cv
30.0649 114.191 29.6689 114.107 29.3449 113.951 cv
29.0089 113.783 28.7449 113.543 28.5529 113.207 cv
28.3489 112.871 28.2049 112.463 28.1209 111.983 cv
28.0369 111.503 28.0009 110.951 28.0009 110.327 cv
28.0009 109.751 28.0489 109.211 28.1449 108.731 cv
28.2409 108.251 28.3849 107.843 28.6009 107.495 cv
28.8049 107.147 29.0809 106.883 29.4289 106.691 cv
29.7649 106.499 30.1969 106.403 30.7009 106.403 cv
31.1809 106.403 31.5769 106.487 31.9009 106.655 cv
32.2249 106.823 32.4889 107.075 32.6929 107.411 cv
32.8849 107.747 33.0289 108.143 33.1129 108.623 cv
33.1969 109.103 33.2449 109.667 33.2449 110.291 cv
cp
32.2129 110.351 mo
32.2129 109.979 32.1889 109.643 32.1649 109.343 cv
32.1409 109.043 32.0929 108.779 32.0449 108.539 cv
31.9969 108.311 31.9249 108.119 31.8409 107.951 cv
31.7569 107.783 31.6609 107.651 31.5409 107.543 cv
31.4209 107.435 31.2889 107.351 31.1449 107.303 cv
30.9889 107.255 30.8209 107.231 30.6409 107.231 cv
30.3049 107.231 30.0289 107.315 29.8249 107.471 cv
29.6209 107.627 29.4649 107.843 29.3449 108.107 cv
29.2249 108.383 29.1409 108.707 29.0929 109.067 cv
29.0449 109.439 29.0329 109.835 29.0329 110.255 cv
29.0329 110.819 29.0569 111.299 29.1169 111.695 cv
29.1769 112.103 29.2729 112.427 29.3929 112.667 cv
29.5129 112.919 29.6809 113.099 29.8849 113.207 cv
30.0769 113.327 30.3169 113.375 30.6049 113.375 cv
30.8209 113.375 31.0129 113.351 31.1809 113.279 cv
31.3489 113.207 31.4929 113.111 31.6129 112.979 cv
31.7329 112.847 31.8289 112.691 31.9009 112.499 cv
31.9729 112.319 32.0449 112.115 32.0929 111.899 cv
32.1409 111.683 32.1649 111.443 32.1889 111.179 cv
32.2009 110.915 32.2129 110.639 32.2129 110.351 cv
cp
f
39.329 110.291 mo
39.329 110.867 39.281 111.395 39.185 111.875 cv
39.089 112.355 38.945 112.775 38.729 113.123 cv
38.513 113.471 38.237 113.735 37.901 113.915 cv
37.553 114.095 37.133 114.191 36.629 114.191 cv
36.149 114.191 35.753 114.107 35.429 113.951 cv
35.093 113.783 34.829 113.543 34.637 113.207 cv
34.433 112.871 34.289 112.463 34.205 111.983 cv
34.121 111.503 34.085 110.951 34.085 110.327 cv
34.085 109.751 34.133 109.211 34.229 108.731 cv
34.325 108.251 34.469 107.843 34.685 107.495 cv
34.889 107.147 35.165 106.883 35.513 106.691 cv
35.849 106.499 36.281 106.403 36.785 106.403 cv
37.265 106.403 37.661 106.487 37.985 106.655 cv
38.309 106.823 38.573 107.075 38.777 107.411 cv
38.969 107.747 39.113 108.143 39.197 108.623 cv
39.281 109.103 39.329 109.667 39.329 110.291 cv
cp
38.297 110.351 mo
38.297 109.979 38.273 109.643 38.249 109.343 cv
38.225 109.043 38.177 108.779 38.129 108.539 cv
38.081 108.311 38.009 108.119 37.925 107.951 cv
37.841 107.783 37.745 107.651 37.625 107.543 cv
37.505 107.435 37.373 107.351 37.229 107.303 cv
37.073 107.255 36.905 107.231 36.725 107.231 cv
36.389 107.231 36.113 107.315 35.909 107.471 cv
35.705 107.627 35.549 107.843 35.429 108.107 cv
35.309 108.383 35.225 108.707 35.177 109.067 cv
35.129 109.439 35.117 109.835 35.117 110.255 cv
35.117 110.819 35.141 111.299 35.201 111.695 cv
35.261 112.103 35.357 112.427 35.477 112.667 cv
35.597 112.919 35.765 113.099 35.969 113.207 cv
36.161 113.327 36.401 113.375 36.689 113.375 cv
36.905 113.375 37.097 113.351 37.265 113.279 cv
37.433 113.207 37.577 113.111 37.697 112.979 cv
37.817 112.847 37.913 112.691 37.985 112.499 cv
38.057 112.319 38.129 112.115 38.177 111.899 cv
38.225 111.683 38.249 111.443 38.273 111.179 cv
38.285 110.915 38.297 110.639 38.297 110.351 cv
cp
f
45.413 110.291 mo
45.413 110.867 45.365 111.395 45.269 111.875 cv
45.173 112.355 45.029 112.775 44.813 113.123 cv
44.597 113.471 44.321 113.735 43.985 113.915 cv
43.637 114.095 43.217 114.191 42.713 114.191 cv
42.233 114.191 41.837 114.107 41.513 113.951 cv
41.177 113.783 40.913 113.543 40.721 113.207 cv
40.517 112.871 40.373 112.463 40.289 111.983 cv
40.205 111.503 40.169 110.951 40.169 110.327 cv
40.169 109.751 40.217 109.211 40.313 108.731 cv
40.409 108.251 40.553 107.843 40.769 107.495 cv
40.973 107.147 41.249 106.883 41.597 106.691 cv
41.933 106.499 42.365 106.403 42.869 106.403 cv
43.349 106.403 43.745 106.487 44.069 106.655 cv
44.393 106.823 44.657 107.075 44.861 107.411 cv
45.053 107.747 45.197 108.143 45.281 108.623 cv
45.365 109.103 45.413 109.667 45.413 110.291 cv
cp
44.381 110.351 mo
44.381 109.979 44.357 109.643 44.333 109.343 cv
44.309 109.043 44.261 108.779 44.213 108.539 cv
44.165 108.311 44.093 108.119 44.009 107.951 cv
43.925 107.783 43.829 107.651 43.709 107.543 cv
43.589 107.435 43.457 107.351 43.313 107.303 cv
43.157 107.255 42.989 107.231 42.809 107.231 cv
42.473 107.231 42.197 107.315 41.993 107.471 cv
41.789 107.627 41.633 107.843 41.513 108.107 cv
41.393 108.383 41.309 108.707 41.261 109.067 cv
41.213 109.439 41.201 109.835 41.201 110.255 cv
41.201 110.819 41.225 111.299 41.285 111.695 cv
41.345 112.103 41.441 112.427 41.561 112.667 cv
41.681 112.919 41.849 113.099 42.053 113.207 cv
42.245 113.327 42.485 113.375 42.773 113.375 cv
42.989 113.375 43.181 113.351 43.349 113.279 cv
43.517 113.207 43.661 113.111 43.781 112.979 cv
43.901 112.847 43.997 112.691 44.069 112.499 cv
44.141 112.319 44.213 112.115 44.261 111.899 cv
44.309 111.683 44.333 111.443 44.357 111.179 cv
44.369 110.915 44.381 110.639 44.381 110.351 cv
cp
f
gsave
52.8093 309.6 mo
414.609 309.6 li
414.609 7.19994 li
52.8093 7.19994 li
52.8093 309.6 li
clp
2 lc
52.8094 55.8373 mo
414.609 55.8373 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 55.8373 mo
49.3094 55.8373 li
f
52.8094 55.8373 mo
49.3094 55.8373 li
@
26.9089 59.4835 mo
26.8969 59.6755 li
26.8489 59.8075 li
26.7769 59.8915 li
26.6929 59.9155 li
22.4929 59.9155 li
22.3489 59.9035 li
22.2409 59.8315 li
22.1809 59.6995 li
22.1689 59.6395 22.1689 59.5675 22.1689 59.4715 cv
22.1689 59.2795 li
22.2049 59.1235 li
22.2769 58.9915 li
22.3969 58.8355 li
23.8729 57.2755 li
24.2089 56.9155 24.4729 56.6035 24.6889 56.3155 cv
24.8929 56.0275 25.0489 55.7755 25.1569 55.5355 cv
25.2649 55.2955 25.3369 55.0915 25.3729 54.8995 cv
25.4089 54.7075 25.4329 54.5275 25.4329 54.3595 cv
25.4329 54.1915 25.3969 54.0355 25.3489 53.8795 cv
25.2889 53.7355 25.2049 53.6035 25.1089 53.4835 cv
25.0129 53.3755 24.8809 53.2915 24.7249 53.2195 cv
24.5689 53.1475 24.3889 53.1115 24.1849 53.1115 cv
23.9449 53.1115 23.7289 53.1475 23.5369 53.2195 cv
23.3449 53.2915 23.1889 53.3635 23.0449 53.4355 cv
22.9009 53.5075 22.7809 53.5795 22.6849 53.6515 cv
22.5889 53.7235 22.5169 53.7475 22.4809 53.7475 cv
22.3969 53.7235 li
22.3489 53.6515 li
22.3129 53.5075 li
22.3009 53.2915 li
22.3009 53.1475 li
22.3249 53.0275 li
22.3729 52.9435 li
22.4569 52.8475 li
22.5049 52.7995 22.5769 52.7515 22.6969 52.6795 cv
22.8169 52.6075 22.9609 52.5475 23.1409 52.4755 cv
23.3089 52.4035 23.5009 52.3435 23.7169 52.2955 cv
23.9209 52.2475 24.1369 52.2235 24.3769 52.2235 cv
24.7369 52.2235 25.0609 52.2835 25.3369 52.3795 cv
25.6009 52.4875 25.8289 52.6315 26.0209 52.8115 cv
26.2009 52.9915 26.3329 53.1955 26.4289 53.4355 cv
26.5129 53.6755 26.5609 53.9275 26.5609 54.1915 cv
26.5609 54.4315 26.5369 54.6715 26.5009 54.9115 cv
26.4529 55.1515 26.3689 55.4155 26.2249 55.6915 cv
26.0809 55.9795 25.8889 56.2915 25.6249 56.6275 cv
25.3609 56.9755 25.0129 57.3715 24.5809 57.8035 cv
23.3809 59.0635 li
26.6809 59.0635 li
26.7649 59.0875 li
26.8489 59.1715 li
26.8969 59.3035 li
26.9089 59.4835 li
cp
f
32.9569 57.4795 mo
32.9569 57.8875 32.8849 58.2595 32.7529 58.5715 cv
32.6089 58.8835 32.4169 59.1475 32.1769 59.3635 cv
31.9249 59.5795 31.6249 59.7475 31.2769 59.8555 cv
30.9289 59.9515 30.5449 60.0115 30.1249 60.0115 cv
29.8849 60.0115 29.6689 59.9875 29.4529 59.9635 cv
29.2369 59.9275 29.0569 59.9035 28.8889 59.8555 cv
28.7209 59.8075 28.5889 59.7595 28.4929 59.7115 cv
28.3849 59.6635 28.3129 59.6275 28.2889 59.6035 cv
28.2289 59.5195 li
28.1929 59.4355 li
28.1689 59.3155 li
28.1689 59.1355 li
28.1809 58.9555 li
28.2169 58.8235 li
28.2649 58.7515 li
28.3369 58.7275 li
28.5169 58.7995 li
28.6009 58.8475 28.7089 58.9075 28.8529 58.9555 cv
28.9969 59.0155 29.1649 59.0755 29.3689 59.1235 cv
29.5729 59.1715 29.8129 59.1955 30.1009 59.1955 cv
30.3649 59.1955 30.6049 59.1715 30.8209 59.0995 cv
31.0369 59.0395 31.2169 58.9435 31.3849 58.8115 cv
31.5409 58.6795 31.6609 58.5115 31.7569 58.3075 cv
31.8409 58.1155 31.8889 57.8635 31.8889 57.5755 cv
31.8889 57.3355 31.8409 57.1195 31.7689 56.9275 cv
31.6969 56.7475 31.5769 56.5915 31.4209 56.4715 cv
31.2649 56.3515 31.0609 56.2555 30.8209 56.1955 cv
30.5809 56.1355 30.2929 56.0995 29.9569 56.0995 cv
29.7169 56.0995 29.5009 56.1115 29.3329 56.1355 cv
29.1649 56.1595 29.0089 56.1715 28.8649 56.1715 cv
28.7449 56.1715 28.6729 56.1475 28.6249 56.0995 cv
28.5769 56.0515 28.5649 55.9435 28.5649 55.7995 cv
28.5649 52.7155 li
28.5649 52.5955 28.5889 52.4995 28.6489 52.4275 cv
28.7089 52.3675 28.7929 52.3315 28.9129 52.3315 cv
32.2729 52.3315 li
32.3569 52.3675 li
32.4289 52.4395 li
32.4769 52.5715 li
32.4889 52.7635 li
32.4889 52.9075 32.4649 53.0275 32.4289 53.0995 cv
32.2729 53.2075 li
29.4409 53.2075 li
29.4409 55.3435 li
29.5729 55.3195 29.7169 55.3075 29.8609 55.3075 cv
30.0049 55.3075 30.1609 55.2955 30.3529 55.2955 cv
30.7849 55.2955 31.1569 55.3555 31.4809 55.4515 cv
31.8049 55.5595 32.0809 55.7035 32.2969 55.8955 cv
32.5129 56.0875 32.6689 56.3155 32.7889 56.5795 cv
32.8969 56.8555 32.9569 57.1555 32.9569 57.4795 cv
cp
f
39.329 56.1115 mo
39.329 56.6875 39.281 57.2155 39.185 57.6955 cv
39.089 58.1755 38.945 58.5955 38.729 58.9435 cv
38.513 59.2915 38.237 59.5555 37.901 59.7355 cv
37.553 59.9155 37.133 60.0115 36.629 60.0115 cv
36.149 60.0115 35.753 59.9275 35.429 59.7715 cv
35.093 59.6035 34.829 59.3635 34.637 59.0275 cv
34.433 58.6915 34.289 58.2835 34.205 57.8035 cv
34.121 57.3235 34.085 56.7715 34.085 56.1475 cv
34.085 55.5715 34.133 55.0315 34.229 54.5515 cv
34.325 54.0715 34.469 53.6635 34.685 53.3155 cv
34.889 52.9675 35.165 52.7035 35.513 52.5115 cv
35.849 52.3195 36.281 52.2235 36.785 52.2235 cv
37.265 52.2235 37.661 52.3075 37.985 52.4755 cv
38.309 52.6435 38.573 52.8955 38.777 53.2315 cv
38.969 53.5675 39.113 53.9635 39.197 54.4435 cv
39.281 54.9235 39.329 55.4875 39.329 56.1115 cv
cp
38.297 56.1715 mo
38.297 55.7995 38.273 55.4635 38.249 55.1635 cv
38.225 54.8635 38.177 54.5995 38.129 54.3595 cv
38.081 54.1315 38.009 53.9395 37.925 53.7715 cv
37.841 53.6035 37.745 53.4715 37.625 53.3635 cv
37.505 53.2555 37.373 53.1715 37.229 53.1235 cv
37.073 53.0755 36.905 53.0515 36.725 53.0515 cv
36.389 53.0515 36.113 53.1355 35.909 53.2915 cv
35.705 53.4475 35.549 53.6635 35.429 53.9275 cv
35.309 54.2035 35.225 54.5275 35.177 54.8875 cv
35.129 55.2595 35.117 55.6555 35.117 56.0755 cv
35.117 56.6395 35.141 57.1195 35.201 57.5155 cv
35.261 57.9235 35.357 58.2475 35.477 58.4875 cv
35.597 58.7395 35.765 58.9195 35.969 59.0275 cv
36.161 59.1475 36.401 59.1955 36.689 59.1955 cv
36.905 59.1955 37.097 59.1715 37.265 59.0995 cv
37.433 59.0275 37.577 58.9315 37.697 58.7995 cv
37.817 58.6675 37.913 58.5115 37.985 58.3195 cv
38.057 58.1395 38.129 57.9355 38.177 57.7195 cv
38.225 57.5035 38.249 57.2635 38.273 56.9995 cv
38.285 56.7355 38.297 56.4595 38.297 56.1715 cv
cp
f
45.413 56.1115 mo
45.413 56.6875 45.365 57.2155 45.269 57.6955 cv
45.173 58.1755 45.029 58.5955 44.813 58.9435 cv
44.597 59.2915 44.321 59.5555 43.985 59.7355 cv
43.637 59.9155 43.217 60.0115 42.713 60.0115 cv
42.233 60.0115 41.837 59.9275 41.513 59.7715 cv
41.177 59.6035 40.913 59.3635 40.721 59.0275 cv
40.517 58.6915 40.373 58.2835 40.289 57.8035 cv
40.205 57.3235 40.169 56.7715 40.169 56.1475 cv
40.169 55.5715 40.217 55.0315 40.313 54.5515 cv
40.409 54.0715 40.553 53.6635 40.769 53.3155 cv
40.973 52.9675 41.249 52.7035 41.597 52.5115 cv
41.933 52.3195 42.365 52.2235 42.869 52.2235 cv
43.349 52.2235 43.745 52.3075 44.069 52.4755 cv
44.393 52.6435 44.657 52.8955 44.861 53.2315 cv
45.053 53.5675 45.197 53.9635 45.281 54.4435 cv
45.365 54.9235 45.413 55.4875 45.413 56.1115 cv
cp
44.381 56.1715 mo
44.381 55.7995 44.357 55.4635 44.333 55.1635 cv
44.309 54.8635 44.261 54.5995 44.213 54.3595 cv
44.165 54.1315 44.093 53.9395 44.009 53.7715 cv
43.925 53.6035 43.829 53.4715 43.709 53.3635 cv
43.589 53.2555 43.457 53.1715 43.313 53.1235 cv
43.157 53.0755 42.989 53.0515 42.809 53.0515 cv
42.473 53.0515 42.197 53.1355 41.993 53.2915 cv
41.789 53.4475 41.633 53.6635 41.513 53.9275 cv
41.393 54.2035 41.309 54.5275 41.261 54.8875 cv
41.213 55.2595 41.201 55.6555 41.201 56.0755 cv
41.201 56.6395 41.225 57.1195 41.285 57.5155 cv
41.345 57.9235 41.441 58.2475 41.561 58.4875 cv
41.681 58.7395 41.849 58.9195 42.053 59.0275 cv
42.245 59.1475 42.485 59.1955 42.773 59.1955 cv
42.989 59.1955 43.181 59.1715 43.349 59.0995 cv
43.517 59.0275 43.661 58.9315 43.781 58.7995 cv
43.901 58.6675 43.997 58.5115 44.069 58.3195 cv
44.141 58.1395 44.213 57.9355 44.261 57.7195 cv
44.309 57.5035 44.333 57.2635 44.357 56.9995 cv
44.369 56.7355 44.381 56.4595 44.381 56.1715 cv
cp
f
14.2882 192.898 mo
14.4443 192.91 li
14.5763 192.934 li
14.6722 192.97 li
14.7682 193.042 li
14.8162 193.09 14.8762 193.174 14.9482 193.294 cv
15.0322 193.414 15.1163 193.57 15.1882 193.762 cv
15.2603 193.954 15.3202 194.158 15.3682 194.398 cv
15.4163 194.638 15.4402 194.902 15.4402 195.19 cv
15.4402 195.682 15.3562 196.126 15.2002 196.522 cv
15.0442 196.918 14.8042 197.254 14.4802 197.53 cv
14.1683 197.818 13.7723 198.034 13.2922 198.178 cv
12.8242 198.334 12.2843 198.406 11.6602 198.406 cv
11.0362 198.406 10.4842 198.334 9.99225 198.166 cv
9.50025 197.998 9.08025 197.77 8.73225 197.482 cv
8.39625 197.194 8.13225 196.834 7.95225 196.426 cv
7.77225 196.018 7.67625 195.574 7.67625 195.07 cv
7.67625 194.854 7.70025 194.638 7.74825 194.434 cv
7.79625 194.23 7.84425 194.038 7.90425 193.858 cv
7.96425 193.69 8.03625 193.534 8.12025 193.39 cv
8.20425 193.258 8.27625 193.162 8.32425 193.102 cv
8.44425 192.994 li
8.54025 192.958 li
8.67225 192.946 li
8.85225 192.934 li
9.04425 192.946 li
9.18825 192.982 li
9.27225 193.03 li
9.29625 193.114 li
9.29625 193.174 9.26025 193.246 9.18825 193.342 cv
9.11625 193.438 9.03225 193.57 8.93625 193.726 cv
8.84025 193.882 8.75625 194.074 8.68425 194.29 cv
8.61225 194.506 8.56425 194.77 8.56425 195.07 cv
8.56425 195.406 8.63625 195.718 8.76825 195.994 cv
8.90025 196.27 9.09225 196.51 9.35625 196.702 cv
9.62025 196.894 9.94425 197.05 10.3162 197.158 cv
10.7002 197.266 11.1322 197.314 11.6122 197.314 cv
12.0922 197.314 12.5243 197.266 12.8842 197.158 cv
13.2563 197.062 13.5682 196.906 13.8082 196.714 cv
14.0602 196.522 14.2522 196.294 14.3722 196.006 cv
14.5042 195.718 14.5642 195.406 14.5642 195.046 cv
14.5642 194.746 14.5282 194.482 14.4563 194.254 cv
14.3842 194.038 14.3003 193.846 14.2043 193.69 cv
14.1082 193.534 14.0243 193.402 13.9522 193.294 cv
13.8802 193.198 13.8442 193.114 13.8442 193.054 cv
13.8562 192.982 li
13.9282 192.946 li
14.0602 192.91 li
14.1202 192.91 14.1922 192.898 14.2882 192.898 cv
cp
f
12.5122 186.778 mo
12.9443 186.778 13.3403 186.838 13.7002 186.946 cv
14.0602 187.066 14.3722 187.234 14.6362 187.45 cv
14.9002 187.678 15.1042 187.966 15.2483 188.302 cv
15.3802 188.638 15.4522 189.034 15.4522 189.466 cv
15.4522 189.898 15.3923 190.282 15.2723 190.606 cv
15.1523 190.93 14.9602 191.194 14.7203 191.41 cv
14.4802 191.626 14.1803 191.794 13.8202 191.89 cv
13.4722 191.998 13.0763 192.046 12.6202 192.046 cv
12.1882 192.046 11.7922 191.998 11.4323 191.878 cv
11.0723 191.77 10.7603 191.602 10.4963 191.374 cv
10.2323 191.158 10.0282 190.87 9.88425 190.534 cv
9.74025 190.198 9.66825 189.814 9.66825 189.358 cv
9.66825 188.926 9.74025 188.554 9.87225 188.23 cv
10.0042 187.906 10.1962 187.63 10.4362 187.414 cv
10.6763 187.198 10.9762 187.042 11.3242 186.934 cv
11.6842 186.838 12.0802 186.778 12.5122 186.778 cv
cp
12.5842 187.798 mo
12.2962 187.798 12.0322 187.834 11.7682 187.882 cv
11.5162 187.93 11.3002 188.014 11.1082 188.134 cv
10.9163 188.254 10.7722 188.422 10.6523 188.626 cv
10.5442 188.842 10.4842 189.094 10.4842 189.394 cv
10.4842 189.682 10.5442 189.934 10.6402 190.138 cv
10.7362 190.342 10.8802 190.51 11.0723 190.642 cv
11.2642 190.774 11.4802 190.87 11.7323 190.942 cv
11.9843 191.014 12.2603 191.038 12.5602 191.038 cv
12.8482 191.038 13.1242 191.014 13.3762 190.954 cv
13.6283 190.906 13.8442 190.81 14.0363 190.69 cv
14.2282 190.57 14.3842 190.414 14.4922 190.198 cv
14.6003 189.994 14.6482 189.73 14.6482 189.418 cv
14.6482 189.142 14.6003 188.902 14.5042 188.686 cv
14.4082 188.482 14.2642 188.314 14.0722 188.182 cv
13.8923 188.05 13.6762 187.954 13.4242 187.894 cv
13.1722 187.834 12.8962 187.798 12.5842 187.798 cv
cp
f
15.2122 184.39 mo
15.2962 184.414 li
15.3442 184.486 li
15.3682 184.63 li
15.3682 184.702 15.3802 184.774 15.3802 184.87 cv
15.3802 184.966 15.3682 185.05 15.3682 185.11 cv
15.3442 185.266 li
15.2962 185.338 li
15.2122 185.35 li
7.37625 185.35 li
7.30425 185.338 li
7.24425 185.266 li
7.20825 185.11 li
7.20825 185.05 7.19625 184.966 7.19625 184.87 cv
7.19625 184.774 7.20825 184.702 7.20825 184.63 cv
7.24425 184.486 li
7.30425 184.414 li
7.37625 184.39 li
15.2122 184.39 li
cp
f
15.2122 181.642 mo
15.2962 181.666 li
15.3442 181.738 li
15.3682 181.882 li
15.3682 181.954 15.3802 182.026 15.3802 182.122 cv
15.3802 182.218 15.3682 182.302 15.3682 182.362 cv
15.3442 182.518 li
15.2962 182.59 li
15.2122 182.602 li
7.37625 182.602 li
7.30425 182.59 li
7.24425 182.518 li
7.20825 182.362 li
7.20825 182.302 7.19625 182.218 7.19625 182.122 cv
7.19625 182.026 7.20825 181.954 7.20825 181.882 cv
7.24425 181.738 li
7.30425 181.666 li
7.37625 181.642 li
15.2122 181.642 li
cp
f
12.3442 175.354 mo
12.5002 175.354 12.6082 175.402 12.6683 175.474 cv
12.7402 175.546 12.7642 175.642 12.7642 175.738 cv
12.7642 179.194 li
13.0642 179.194 13.3282 179.17 13.5562 179.11 cv
13.7962 179.05 13.9882 178.954 14.1563 178.81 cv
14.3242 178.678 14.4563 178.498 14.5522 178.282 cv
14.6482 178.066 14.6842 177.79 14.6842 177.478 cv
14.6842 177.226 14.6722 176.998 14.6242 176.806 cv
14.5883 176.614 14.5402 176.446 14.4922 176.302 cv
14.4443 176.158 14.3962 176.05 14.3482 175.954 cv
14.3123 175.858 14.2882 175.786 14.2882 175.738 cv
14.3123 175.666 li
14.3722 175.618 li
14.4802 175.594 li
14.6602 175.582 li
14.7922 175.594 li
14.9002 175.606 li
14.9722 175.63 li
15.0442 175.69 li
15.0682 175.714 15.0922 175.774 15.1403 175.87 cv
15.1882 175.978 15.2362 176.11 15.2843 176.278 cv
15.3322 176.446 15.3682 176.65 15.4043 176.866 cv
15.4282 177.094 15.4522 177.334 15.4522 177.574 cv
15.4522 178.006 15.3923 178.39 15.2843 178.714 cv
15.1642 179.05 14.9843 179.326 14.7442 179.542 cv
14.5042 179.758 14.2162 179.926 13.8562 180.046 cv
13.4963 180.166 13.0763 180.214 12.5962 180.214 cv
12.1402 180.214 11.7323 180.154 11.3722 180.034 cv
11.0122 179.914 10.7122 179.746 10.4602 179.53 cv
10.2083 179.314 10.0162 179.038 9.87225 178.726 cv
9.74025 178.414 9.66825 178.066 9.66825 177.682 cv
9.66825 177.274 9.74025 176.914 9.87225 176.626 cv
10.0162 176.338 10.1962 176.098 10.4122 175.906 cv
10.6402 175.714 10.9042 175.582 11.2043 175.486 cv
11.5042 175.402 11.8282 175.354 12.1642 175.354 cv
12.3442 175.354 li
cp
12.0562 176.326 mo
11.5522 176.326 11.1563 176.434 10.8682 176.674 cv
10.5802 176.914 10.4242 177.262 10.4242 177.718 cv
10.4242 177.958 10.4722 178.174 10.5682 178.354 cv
10.6642 178.534 10.7843 178.678 10.9282 178.798 cv
11.0723 178.918 11.2522 179.014 11.4443 179.086 cv
11.6362 179.158 11.8403 179.194 12.0562 179.194 cv
12.0562 176.326 li
cp
f
14.4082 170.086 mo
14.5763 170.098 li
14.7083 170.122 li
14.7922 170.158 li
14.9002 170.242 li
14.9482 170.29 15.0083 170.374 15.0802 170.494 cv
15.1523 170.614 15.2242 170.746 15.2723 170.89 cv
15.3322 171.034 15.3682 171.202 15.4043 171.37 cv
15.4282 171.538 15.4522 171.718 15.4522 171.898 cv
15.4522 172.282 15.3923 172.63 15.2723 172.918 cv
15.1523 173.206 14.9722 173.458 14.7323 173.65 cv
14.4922 173.842 14.2043 173.998 13.8562 174.094 cv
13.5082 174.202 13.1003 174.25 12.6322 174.25 cv
12.1163 174.25 11.6722 174.19 11.3002 174.058 cv
10.9282 173.938 10.6283 173.758 10.3883 173.542 cv
10.1482 173.326 9.98025 173.062 9.86025 172.762 cv
9.74025 172.462 9.68025 172.138 9.68025 171.79 cv
9.68025 171.622 9.70425 171.466 9.72825 171.298 cv
9.76425 171.142 9.80025 170.998 9.84825 170.866 cv
9.89625 170.734 9.95625 170.614 10.0282 170.506 cv
10.1003 170.41 10.1482 170.338 10.1962 170.29 cv
10.3162 170.194 li
10.4122 170.146 li
10.5322 170.122 li
10.7002 170.11 li
10.8562 170.11 10.9642 170.134 11.0243 170.17 cv
11.1082 170.29 li
11.0122 170.506 li
10.9522 170.578 10.8802 170.674 10.8083 170.794 cv
10.7362 170.914 10.6642 171.046 10.5922 171.214 cv
10.5322 171.382 10.4963 171.586 10.4963 171.802 cv
10.4963 172.27 10.6763 172.63 11.0362 172.87 cv
11.3962 173.122 11.9122 173.242 12.5842 173.242 cv
12.9323 173.242 13.2323 173.218 13.4843 173.146 cv
13.7362 173.086 13.9522 172.99 14.1202 172.87 cv
14.2882 172.75 14.4202 172.594 14.5042 172.402 cv
14.5883 172.222 14.6242 172.018 14.6242 171.778 cv
14.6242 171.562 14.6003 171.358 14.5282 171.19 cv
14.4563 171.022 14.3842 170.878 14.3003 170.758 cv
14.2162 170.638 14.1442 170.53 14.0722 170.446 cv
13.9642 170.254 li
13.9882 170.182 li
14.0722 170.134 li
14.2043 170.098 li
14.4082 170.086 li
cp
f
14.8282 166.066 mo
14.9482 166.066 15.0322 166.078 15.0922 166.09 cv
15.2362 166.162 li
15.3202 166.294 li
15.3802 166.51 li
15.3923 166.594 15.4043 166.678 15.4163 166.774 cv
15.4282 166.87 15.4402 166.954 15.4402 167.038 cv
15.4402 167.314 15.4043 167.554 15.3442 167.746 cv
15.2723 167.938 15.1642 168.106 15.0202 168.226 cv
14.8762 168.346 14.6962 168.442 14.4683 168.49 cv
14.2402 168.55 13.9762 168.574 13.6642 168.574 cv
10.5922 168.574 li
10.5922 169.318 li
10.4963 169.462 li
10.4362 169.498 10.3282 169.51 10.1842 169.51 cv
10.0042 169.498 li
9.87225 169.462 li
9.81225 169.402 li
9.78825 169.306 li
9.78825 168.574 li
8.52825 168.574 li
8.45625 168.562 li
8.39625 168.49 li
8.36025 168.334 li
8.36025 168.274 8.34825 168.19 8.34825 168.094 cv
8.34825 167.998 8.36025 167.926 8.36025 167.854 cv
8.39625 167.71 li
8.45625 167.638 li
8.52825 167.614 li
9.78825 167.614 li
9.78825 166.258 li
9.81225 166.174 li
9.87225 166.114 li
10.0042 166.078 li
10.1842 166.066 li
10.3282 166.066 10.4362 166.09 10.4963 166.126 cv
10.5922 166.258 li
10.5922 167.614 li
13.5322 167.614 li
13.8923 167.614 14.1683 167.566 14.3482 167.458 cv
14.5402 167.35 14.6242 167.158 14.6242 166.87 cv
14.6003 166.63 li
14.5522 166.45 li
14.4922 166.306 li
14.4683 166.198 li
14.4802 166.15 li
14.5402 166.102 li
14.6482 166.078 li
14.8282 166.066 li
cp
f
15.2122 163.822 mo
15.2962 163.846 li
15.3442 163.918 li
15.3682 164.062 li
15.3682 164.134 15.3802 164.206 15.3802 164.302 cv
15.3802 164.398 15.3682 164.482 15.3682 164.542 cv
15.3442 164.698 li
15.2962 164.77 li
15.2122 164.782 li
9.93225 164.782 li
9.86025 164.77 li
9.80025 164.698 li
9.76425 164.542 li
9.76425 164.482 9.75225 164.398 9.75225 164.302 cv
9.75225 164.206 9.76425 164.134 9.76425 164.062 cv
9.80025 163.918 li
9.86025 163.846 li
9.93225 163.822 li
15.2122 163.822 li
cp
8.15625 163.702 mo
8.38425 163.702 8.54025 163.75 8.62425 163.834 cv
8.70825 163.93 8.74425 164.086 8.74425 164.314 cv
8.74425 164.542 8.70825 164.698 8.62425 164.782 cv
8.55225 164.866 8.39625 164.902 8.16825 164.902 cv
7.95225 164.902 7.79625 164.866 7.71225 164.782 cv
7.62825 164.698 7.58025 164.542 7.58025 164.302 cv
7.58025 164.074 7.62825 163.918 7.70025 163.834 cv
7.78425 163.75 7.94025 163.702 8.15625 163.702 cv
cp
f
9.92025 157.714 mo
9.98025 157.714 li
10.0402 157.726 li
10.1003 157.738 li
10.1722 157.762 li
15.1762 159.562 li
15.2962 159.622 li
15.3442 159.742 li
15.3682 159.934 li
15.3682 160.006 15.3802 160.102 15.3802 160.222 cv
15.3802 160.342 15.3682 160.45 15.3682 160.522 cv
15.3442 160.702 li
15.2843 160.822 li
15.1762 160.882 li
10.1722 162.682 li
10.0522 162.718 li
9.96825 162.73 li
9.92025 162.73 li
9.84825 162.706 li
9.78825 162.634 li
9.76425 162.49 li
9.76425 162.43 9.75225 162.358 9.75225 162.262 cv
9.75225 162.154 9.76425 162.07 9.76425 161.998 cv
9.80025 161.83 li
9.86025 161.746 li
9.94425 161.698 li
14.2882 160.21 li
14.3602 160.186 li
14.2882 160.174 li
9.94425 158.698 li
9.86025 158.662 li
9.80025 158.578 li
9.76425 158.422 li
9.76425 158.362 9.75225 158.278 9.75225 158.17 cv
9.75225 158.074 9.76425 158.002 9.76425 157.942 cv
9.78825 157.81 li
9.84825 157.738 li
9.92025 157.714 li
cp
f
12.3442 152.11 mo
12.5002 152.11 12.6082 152.158 12.6683 152.23 cv
12.7402 152.302 12.7642 152.398 12.7642 152.494 cv
12.7642 155.95 li
13.0642 155.95 13.3282 155.926 13.5562 155.866 cv
13.7962 155.806 13.9882 155.71 14.1563 155.566 cv
14.3242 155.434 14.4563 155.254 14.5522 155.038 cv
14.6482 154.822 14.6842 154.546 14.6842 154.234 cv
14.6842 153.982 14.6722 153.754 14.6242 153.562 cv
14.5883 153.37 14.5402 153.202 14.4922 153.058 cv
14.4443 152.914 14.3962 152.806 14.3482 152.71 cv
14.3123 152.614 14.2882 152.542 14.2882 152.494 cv
14.3123 152.422 li
14.3722 152.374 li
14.4802 152.35 li
14.6602 152.338 li
14.7922 152.35 li
14.9002 152.362 li
14.9722 152.386 li
15.0442 152.446 li
15.0682 152.47 15.0922 152.53 15.1403 152.626 cv
15.1882 152.734 15.2362 152.866 15.2843 153.034 cv
15.3322 153.202 15.3682 153.406 15.4043 153.622 cv
15.4282 153.85 15.4522 154.09 15.4522 154.33 cv
15.4522 154.762 15.3923 155.146 15.2843 155.47 cv
15.1642 155.806 14.9843 156.082 14.7442 156.298 cv
14.5042 156.514 14.2162 156.682 13.8562 156.802 cv
13.4963 156.922 13.0763 156.97 12.5962 156.97 cv
12.1402 156.97 11.7323 156.91 11.3722 156.79 cv
11.0122 156.67 10.7122 156.502 10.4602 156.286 cv
10.2083 156.07 10.0162 155.794 9.87225 155.482 cv
9.74025 155.17 9.66825 154.822 9.66825 154.438 cv
9.66825 154.03 9.74025 153.67 9.87225 153.382 cv
10.0162 153.094 10.1962 152.854 10.4122 152.662 cv
10.6402 152.47 10.9042 152.338 11.2043 152.242 cv
11.5042 152.158 11.8282 152.11 12.1642 152.11 cv
12.3442 152.11 li
cp
12.0562 153.082 mo
11.5522 153.082 11.1563 153.19 10.8682 153.43 cv
10.5802 153.67 10.4242 154.018 10.4242 154.474 cv
10.4242 154.714 10.4722 154.93 10.5682 155.11 cv
10.6642 155.29 10.7843 155.434 10.9282 155.554 cv
11.0723 155.674 11.2522 155.77 11.4443 155.842 cv
11.6362 155.914 11.8403 155.95 12.0562 155.95 cv
12.0562 153.082 li
cp
f
10.2802 144.838 mo
10.3762 144.838 10.4482 144.85 10.5082 144.85 cv
10.6402 144.874 li
10.7122 144.922 li
10.7362 144.994 li
10.7122 145.114 li
10.6642 145.258 li
10.6162 145.45 li
10.5922 145.678 li
10.5922 145.774 10.6162 145.87 10.6523 145.966 cv
10.6882 146.062 10.7483 146.158 10.8442 146.254 cv
10.9403 146.362 11.0602 146.47 11.2043 146.59 cv
11.3482 146.71 11.5282 146.83 11.7442 146.962 cv
15.2122 146.962 li
15.2962 146.986 li
15.3442 147.058 li
15.3682 147.202 li
15.3682 147.274 15.3802 147.346 15.3802 147.442 cv
15.3802 147.538 15.3682 147.622 15.3682 147.682 cv
15.3442 147.838 li
15.2962 147.91 li
15.2122 147.922 li
9.93225 147.922 li
9.86025 147.91 li
9.80025 147.838 li
9.76425 147.706 li
9.76425 147.658 9.75225 147.586 9.75225 147.49 cv
9.76425 147.274 li
9.80025 147.142 li
9.86025 147.082 li
9.93225 147.058 li
10.7002 147.058 li
10.4963 146.914 10.3282 146.77 10.1962 146.65 cv
10.0642 146.53 9.95625 146.41 9.88425 146.29 cv
9.81225 146.17 9.75225 146.062 9.71625 145.954 cv
9.69225 145.846 9.66825 145.726 9.66825 145.606 cv
9.68025 145.438 li
9.71625 145.234 li
9.77625 145.042 li
9.83625 144.922 li
9.88425 144.874 li
9.95625 144.862 li
10.0763 144.85 li
10.2802 144.838 li
cp
f
12.3442 139.234 mo
12.5002 139.234 12.6082 139.282 12.6683 139.354 cv
12.7402 139.426 12.7642 139.522 12.7642 139.618 cv
12.7642 143.074 li
13.0642 143.074 13.3282 143.05 13.5562 142.99 cv
13.7962 142.93 13.9882 142.834 14.1563 142.69 cv
14.3242 142.558 14.4563 142.378 14.5522 142.162 cv
14.6482 141.946 14.6842 141.67 14.6842 141.358 cv
14.6842 141.106 14.6722 140.878 14.6242 140.686 cv
14.5883 140.494 14.5402 140.326 14.4922 140.182 cv
14.4443 140.038 14.3962 139.93 14.3482 139.834 cv
14.3123 139.738 14.2882 139.666 14.2882 139.618 cv
14.3123 139.546 li
14.3722 139.498 li
14.4802 139.474 li
14.6602 139.462 li
14.7922 139.474 li
14.9002 139.486 li
14.9722 139.51 li
15.0442 139.57 li
15.0682 139.594 15.0922 139.654 15.1403 139.75 cv
15.1882 139.858 15.2362 139.99 15.2843 140.158 cv
15.3322 140.326 15.3682 140.53 15.4043 140.746 cv
15.4282 140.974 15.4522 141.214 15.4522 141.454 cv
15.4522 141.886 15.3923 142.27 15.2843 142.594 cv
15.1642 142.93 14.9843 143.206 14.7442 143.422 cv
14.5042 143.638 14.2162 143.806 13.8562 143.926 cv
13.4963 144.046 13.0763 144.094 12.5962 144.094 cv
12.1402 144.094 11.7323 144.034 11.3722 143.914 cv
11.0122 143.794 10.7122 143.626 10.4602 143.41 cv
10.2083 143.194 10.0162 142.918 9.87225 142.606 cv
9.74025 142.294 9.66825 141.946 9.66825 141.562 cv
9.66825 141.154 9.74025 140.794 9.87225 140.506 cv
10.0162 140.218 10.1962 139.978 10.4122 139.786 cv
10.6402 139.594 10.9042 139.462 11.2043 139.366 cv
11.5042 139.282 11.8282 139.234 12.1642 139.234 cv
12.3442 139.234 li
cp
12.0562 140.206 mo
11.5522 140.206 11.1563 140.314 10.8682 140.554 cv
10.5802 140.794 10.4242 141.142 10.4242 141.598 cv
10.4242 141.838 10.4722 142.054 10.5682 142.234 cv
10.6642 142.414 10.7843 142.558 10.9282 142.678 cv
11.0723 142.798 11.2522 142.894 11.4443 142.966 cv
11.6362 143.038 11.8403 143.074 12.0562 143.074 cv
12.0562 140.206 li
cp
f
14.8282 135.022 mo
14.9482 135.022 15.0322 135.034 15.0922 135.046 cv
15.2362 135.118 li
15.3202 135.25 li
15.3802 135.466 li
15.3923 135.55 15.4043 135.634 15.4163 135.73 cv
15.4282 135.826 15.4402 135.91 15.4402 135.994 cv
15.4402 136.27 15.4043 136.51 15.3442 136.702 cv
15.2723 136.894 15.1642 137.062 15.0202 137.182 cv
14.8762 137.302 14.6962 137.398 14.4683 137.446 cv
14.2402 137.506 13.9762 137.53 13.6642 137.53 cv
10.5922 137.53 li
10.5922 138.274 li
10.4963 138.418 li
10.4362 138.454 10.3282 138.466 10.1842 138.466 cv
10.0042 138.454 li
9.87225 138.418 li
9.81225 138.358 li
9.78825 138.262 li
9.78825 137.53 li
8.52825 137.53 li
8.45625 137.518 li
8.39625 137.446 li
8.36025 137.29 li
8.36025 137.23 8.34825 137.146 8.34825 137.05 cv
8.34825 136.954 8.36025 136.882 8.36025 136.81 cv
8.39625 136.666 li
8.45625 136.594 li
8.52825 136.57 li
9.78825 136.57 li
9.78825 135.214 li
9.81225 135.13 li
9.87225 135.07 li
10.0042 135.034 li
10.1842 135.022 li
10.3282 135.022 10.4362 135.046 10.4963 135.082 cv
10.5922 135.214 li
10.5922 136.57 li
13.5322 136.57 li
13.8923 136.57 14.1683 136.522 14.3482 136.414 cv
14.5402 136.306 14.6242 136.114 14.6242 135.826 cv
14.6003 135.586 li
14.5522 135.406 li
14.4922 135.262 li
14.4683 135.154 li
14.4802 135.106 li
14.5402 135.058 li
14.6482 135.034 li
14.8282 135.022 li
cp
f
15.2122 129.226 mo
15.2962 129.25 li
15.3442 129.322 li
15.3682 129.454 li
15.3802 129.658 li
15.3802 129.754 15.3682 129.838 15.3682 129.886 cv
15.3442 130.018 li
15.2962 130.09 li
15.2122 130.102 li
14.5162 130.102 li
14.8523 130.414 15.0922 130.714 15.2362 131.002 cv
15.3802 131.29 15.4522 131.59 15.4522 131.89 cv
15.4522 132.238 15.3923 132.538 15.2843 132.778 cv
15.1762 133.018 15.0202 133.222 14.8162 133.366 cv
14.6242 133.51 14.3842 133.618 14.1202 133.678 cv
13.8562 133.75 13.5203 133.774 13.1362 133.774 cv
9.93225 133.774 li
9.86025 133.75 li
9.80025 133.678 li
9.76425 133.522 li
9.76425 133.462 9.75225 133.378 9.75225 133.282 cv
9.75225 133.186 9.76425 133.114 9.76425 133.054 cv
9.80025 132.91 li
9.86025 132.826 li
9.93225 132.802 li
13.0042 132.802 li
13.3162 132.802 13.5682 132.778 13.7483 132.73 cv
13.9402 132.682 14.0962 132.622 14.2282 132.526 cv
14.3602 132.43 14.4563 132.322 14.5282 132.178 cv
14.6003 132.034 14.6362 131.878 14.6362 131.686 cv
14.6362 131.446 14.5522 131.206 14.3842 130.966 cv
14.2162 130.726 13.9522 130.474 13.6163 130.198 cv
9.93225 130.198 li
9.86025 130.174 li
9.80025 130.102 li
9.76425 129.958 li
9.76425 129.898 9.75225 129.814 9.75225 129.706 cv
9.76425 129.478 li
9.80025 129.334 li
9.86025 129.25 li
9.93225 129.226 li
15.2122 129.226 li
cp
f
10.2802 124.354 mo
10.3762 124.354 10.4482 124.366 10.5082 124.366 cv
10.6402 124.39 li
10.7122 124.438 li
10.7362 124.51 li
10.7122 124.63 li
10.6642 124.774 li
10.6162 124.966 li
10.5922 125.194 li
10.5922 125.29 10.6162 125.386 10.6523 125.482 cv
10.6882 125.578 10.7483 125.674 10.8442 125.77 cv
10.9403 125.878 11.0602 125.986 11.2043 126.106 cv
11.3482 126.226 11.5282 126.346 11.7442 126.478 cv
15.2122 126.478 li
15.2962 126.502 li
15.3442 126.574 li
15.3682 126.718 li
15.3682 126.79 15.3802 126.862 15.3802 126.958 cv
15.3802 127.054 15.3682 127.138 15.3682 127.198 cv
15.3442 127.354 li
15.2962 127.426 li
15.2122 127.438 li
9.93225 127.438 li
9.86025 127.426 li
9.80025 127.354 li
9.76425 127.222 li
9.76425 127.174 9.75225 127.102 9.75225 127.006 cv
9.76425 126.79 li
9.80025 126.658 li
9.86025 126.598 li
9.93225 126.574 li
10.7002 126.574 li
10.4963 126.43 10.3282 126.286 10.1962 126.166 cv
10.0642 126.046 9.95625 125.926 9.88425 125.806 cv
9.81225 125.686 9.75225 125.578 9.71625 125.47 cv
9.69225 125.362 9.66825 125.242 9.66825 125.122 cv
9.68025 124.954 li
9.71625 124.75 li
9.77625 124.558 li
9.83625 124.438 li
9.88425 124.39 li
9.95625 124.378 li
10.0763 124.366 li
10.2802 124.354 li
cp
f
15.2122 118.714 mo
15.2962 118.738 li
15.3442 118.822 li
15.3682 118.966 li
15.3682 119.026 15.3802 119.098 15.3802 119.194 cv
15.3802 119.29 15.3682 119.374 15.3682 119.434 cv
15.3442 119.59 li
15.2962 119.662 li
15.2122 119.674 li
12.1163 119.674 li
11.8282 119.674 11.5882 119.698 11.3962 119.746 cv
11.2162 119.794 11.0602 119.866 10.9282 119.962 cv
10.7962 120.058 10.6882 120.166 10.6162 120.31 cv
10.5442 120.454 10.5082 120.61 10.5082 120.802 cv
10.5082 121.042 10.6042 121.294 10.7722 121.534 cv
10.9403 121.774 11.1922 122.026 11.5282 122.29 cv
15.2122 122.29 li
15.2962 122.314 li
15.3442 122.386 li
15.3682 122.53 li
15.3682 122.602 15.3802 122.674 15.3802 122.77 cv
15.3802 122.866 15.3682 122.95 15.3682 123.01 cv
15.3442 123.166 li
15.2962 123.238 li
15.2122 123.25 li
9.93225 123.25 li
9.86025 123.238 li
9.80025 123.166 li
9.76425 123.034 li
9.76425 122.986 9.75225 122.914 9.75225 122.818 cv
9.76425 122.602 li
9.80025 122.47 li
9.86025 122.41 li
9.93225 122.386 li
10.6283 122.386 li
10.3042 122.086 10.0642 121.786 9.90825 121.498 cv
9.75225 121.21 9.66825 120.91 9.66825 120.598 cv
9.66825 120.25 9.72825 119.95 9.84825 119.71 cv
9.96825 119.47 10.1362 119.278 10.3282 119.134 cv
10.5322 118.99 10.7722 118.882 11.0362 118.81 cv
11.3002 118.75 11.6242 118.714 11.9963 118.714 cv
15.2122 118.714 li
cp
f
1.1 lw
2 lc
69.2548 276.35 mo
74.7366 267.464 li
80.2185 269.09 li
85.7003 261.938 li
91.1821 264.105 li
96.6639 264.755 li
102.146 267.356 li
107.628 247.201 li
113.109 244.709 li
118.591 249.043 li
124.073 254.461 li
129.555 241.241 li
135.037 233.331 li
140.518 238.099 li
146 241.458 li
151.482 243.625 li
156.964 252.294 li
162.446 241.458 li
167.928 241.458 li
173.409 234.198 li
178.891 233.981 li
184.373 237.774 li
189.855 243.842 li
195.337 244.6 li
200.818 245.792 li
206.3 241.024 li
211.782 244.167 li
217.264 234.848 li
222.746 239.832 li
228.228 242.433 li
233.709 239.941 li
239.191 238.641 li
244.673 236.257 li
250.155 249.26 li
255.637 237.015 li
261.118 245.25 li
266.6 255.978 li
272.082 252.836 li
277.564 253.161 li
283.046 256.52 li
288.528 248.61 li
294.009 252.511 li
299.491 245.684 li
304.973 249.585 li
310.455 257.603 li
315.937 252.402 li
321.418 263.13 li
326.9 251.969 li
332.382 256.845 li
337.864 248.718 li
343.346 256.953 li
348.828 261.288 li
354.309 245.359 li
359.791 253.052 li
365.273 250.885 li
370.755 254.786 li
376.237 257.17 li
381.718 251.535 li
387.2 251.102 li
392.682 255.653 li
398.164 246.009 li
0 .561822 1 0 cmyk
@
69.2548 266.597 mo
74.7366 228.671 li
80.2185 212.417 li
85.7003 180.668 li
91.1821 145.343 li
96.6639 154.553 li
102.146 162.572 li
107.628 161.922 li
113.109 131.039 li
118.591 140.683 li
124.073 182.51 li
129.555 158.563 li
135.037 143.826 li
140.518 182.727 li
146 165.172 li
151.482 154.553 li
156.964 166.581 li
162.446 167.665 li
167.928 172.649 li
173.409 163.764 li
178.891 176.008 li
184.373 150.652 li
189.855 171.566 li
195.337 163.222 li
200.818 167.34 li
206.3 167.231 li
211.782 153.903 li
217.264 181.426 li
222.746 142.85 li
228.228 181.535 li
233.709 174.275 li
239.191 150.327 li
244.673 161.38 li
250.155 156.395 li
255.637 178.501 li
261.118 166.798 li
266.6 167.448 li
272.082 145.993 li
277.564 172.433 li
283.046 150.327 li
288.528 178.717 li
294.009 163.764 li
299.491 178.067 li
304.973 154.445 li
310.455 165.823 li
315.937 170.699 li
321.418 168.64 li
326.9 148.16 li
332.382 152.603 li
337.864 175.9 li
343.346 161.922 li
348.828 149.894 li
354.309 161.922 li
359.791 160.946 li
365.273 162.789 li
370.755 170.157 li
376.237 147.618 li
381.718 159.863 li
387.2 160.838 li
392.682 172.433 li
398.164 155.095 li
0 1 1 0 cmyk
@
69.2548 256.303 mo
74.7366 237.882 li
80.2185 209.6 li
85.7003 190.312 li
91.1821 138.408 li
96.6639 164.522 li
102.146 137.324 li
107.628 134.723 li
113.109 92.1379 li
118.591 86.6115 li
124.073 70.791 li
129.555 82.8189 li
135.037 68.1904 li
140.518 77.8344 li
146 54.9705 li
151.482 70.6826 li
156.964 71.5495 li
162.446 51.5029 li
167.928 73.9334 li
173.409 58.7631 li
178.891 66.7817 li
184.373 55.8373 li
189.855 65.0479 li
195.337 52.5865 li
200.818 58.438 li
206.3 60.6052 li
211.782 66.1315 li
217.264 54.9705 li
222.746 58.1129 li
228.228 74.2585 li
233.709 53.9952 li
239.191 54.9705 li
244.673 85.853 li
250.155 81.5186 li
255.637 49.6608 li
261.118 89.8623 li
266.6 63.5309 li
272.082 78.0511 li
277.564 65.0479 li
283.046 88.0202 li
288.528 65.8065 li
294.009 59.6299 li
299.491 95.8221 li
304.973 75.9923 li
310.455 50.8528 li
315.937 55.8373 li
321.418 51.2862 li
326.9 84.1193 li
332.382 73.9334 li
337.864 40.4502 li
343.346 50.4193 li
348.828 58.438 li
354.309 63.2058 li
359.791 71.1161 li
365.273 69.1656 li
370.755 58.7631 li
376.237 54.537 li
381.718 46.1933 li
387.2 52.6949 li
392.682 51.2862 li
398.164 55.9457 li
.930816 .793027 0 0 cmyk
@
69.2548 247.526 mo
74.7366 238.207 li
80.2185 225.746 li
85.7003 228.888 li
91.1821 232.897 li
96.6639 238.641 li
102.146 237.882 li
107.628 241.675 li
113.109 232.897 li
118.591 227.805 li
124.073 236.257 li
129.555 235.606 li
135.037 236.69 li
140.518 251.21 li
146 235.281 li
151.482 229.972 li
156.964 234.306 li
162.446 214.801 li
167.928 242.867 li
173.409 229.105 li
178.891 230.622 li
184.373 236.257 li
189.855 238.207 li
195.337 234.523 li
200.818 236.257 li
206.3 226.504 li
211.782 230.514 li
217.264 228.238 li
222.746 216.86 li
228.228 236.69 li
233.709 231.705 li
239.191 243.733 li
244.673 228.671 li
250.155 231.055 li
255.637 228.563 li
261.118 227.696 li
266.6 235.173 li
272.082 242.541 li
277.564 217.727 li
283.046 219.136 li
288.528 233.006 li
294.009 228.996 li
299.491 236.907 li
304.973 242.433 li
310.455 228.996 li
315.937 236.365 li
321.418 226.504 li
326.9 238.424 li
332.382 241.566 li
337.864 219.027 li
343.346 220.761 li
348.828 212.742 li
354.309 213.393 li
359.791 247.201 li
365.273 247.959 li
370.755 241.133 li
376.237 225.421 li
381.718 238.207 li
387.2 221.845 li
392.682 227.154 li
398.164 244.817 li
.884581 .536797 .613733 .453285 cmyk
@
.8 lw
0 lj
52.8094 309.6 mo
52.8094 7.19998 li
1 /0 /CSD get_res sepcs
1 sep
@
414.609 309.6 mo
414.609 7.19998 li
@
52.8094 309.6 mo
414.609 309.6 li
@
52.8094 7.19998 mo
414.609 7.19998 li
@
532.118 309.1 mo
420.227 309.1 li
419.638 309.098 419.29 308.956 419.081 308.746 cv
418.871 308.537 418.729 308.19 418.727 307.6 cv
418.727 253.475 li
418.729 252.885 418.871 252.538 419.081 252.328 cv
419.29 252.119 419.638 251.977 420.227 251.975 cv
532.118 251.975 li
532.708 251.977 533.055 252.119 533.264 252.328 cv
533.474 252.538 533.616 252.885 533.618 253.475 cv
533.618 307.6 li
533.616 308.19 533.474 308.537 533.264 308.746 cv
533.055 308.956 532.708 309.098 532.118 309.1 cv
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
532.128 310.1 mo
532.125 310.1 532.121 310.1 532.118 310.1 cv
420.227 310.1 li
420.224 310.1 420.221 310.1 420.217 310.1 cv
419.478 310.1 418.829 309.909 418.374 309.454 cv
417.917 308.996 417.726 308.343 417.727 307.6 cv
417.727 253.475 li
417.726 252.731 417.917 252.079 418.374 251.621 cv
418.829 251.167 419.478 250.975 420.216 250.975 cv
420.22 250.975 420.224 250.975 420.227 250.975 cv
532.118 250.975 li
532.122 250.975 532.125 250.975 532.129 250.975 cv
532.868 250.975 533.516 251.167 533.971 251.621 cv
534.429 252.079 534.62 252.731 534.618 253.475 cv
534.618 307.6 li
534.62 308.343 534.429 308.996 533.971 309.454 cv
533.516 309.909 532.867 310.1 532.128 310.1 cv
420.227 309.1 mo
532.118 309.1 li
532.708 309.098 533.055 308.956 533.264 308.746 cv
533.474 308.537 533.616 308.19 533.618 307.6 cv
533.618 253.475 li
533.616 252.885 533.474 252.538 533.264 252.328 cv
533.055 252.119 532.708 251.977 532.118 251.975 cv
420.227 251.975 li
419.638 251.977 419.29 252.119 419.081 252.328 cv
418.871 252.538 418.729 252.885 418.727 253.475 cv
418.727 307.6 li
418.729 308.19 418.871 308.537 419.081 308.746 cv
419.29 308.956 419.638 309.098 420.227 309.1 cv
420.227 309.1 li
1 /1 /CSD get_res sepcs
.160784 sep
f
1.1 lw
1 lj
422.227 258.975 mo
442.227 258.975 li
0 .561822 1 0 cmyk
@
455.617 262.345 mo
455.597 262.415 li
455.527 262.465 li
455.397 262.485 li
455.207 262.495 li
454.997 262.485 li
454.867 262.465 li
454.797 262.415 li
454.787 262.345 li
454.787 259.545 li
451.907 259.545 li
451.907 262.345 li
451.887 262.415 li
451.817 262.465 li
451.687 262.485 li
451.487 262.495 li
451.287 262.485 li
451.157 262.465 li
451.087 262.415 li
451.067 262.345 li
451.067 256.285 li
451.087 256.215 li
451.157 256.175 li
451.287 256.145 li
451.487 256.125 li
451.687 256.145 li
451.817 256.175 li
451.887 256.215 li
451.907 256.285 li
451.907 258.815 li
454.787 258.815 li
454.787 256.285 li
454.797 256.215 li
454.867 256.175 li
454.997 256.145 li
455.207 256.125 li
455.397 256.145 li
455.527 256.175 li
455.597 256.215 li
455.617 256.285 li
455.617 262.345 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
461.287 260.105 mo
461.287 260.465 461.237 260.795 461.147 261.095 cv
461.047 261.395 460.907 261.655 460.727 261.875 cv
460.537 262.095 460.297 262.265 460.017 262.385 cv
459.737 262.495 459.407 262.555 459.047 262.555 cv
458.687 262.555 458.367 262.505 458.097 262.405 cv
457.827 262.305 457.607 262.145 457.427 261.945 cv
457.247 261.745 457.107 261.495 457.027 261.195 cv
456.937 260.905 456.897 260.575 456.897 260.195 cv
456.897 259.835 456.937 259.505 457.037 259.205 cv
457.127 258.905 457.267 258.645 457.457 258.425 cv
457.637 258.205 457.877 258.035 458.157 257.915 cv
458.437 257.795 458.757 257.735 459.137 257.735 cv
459.497 257.735 459.807 257.795 460.077 257.905 cv
460.347 258.015 460.577 258.175 460.757 258.375 cv
460.937 258.575 461.067 258.825 461.157 259.115 cv
461.237 259.415 461.287 259.745 461.287 260.105 cv
cp
460.437 260.165 mo
460.437 259.925 460.407 259.705 460.367 259.485 cv
460.327 259.275 460.257 259.095 460.157 258.935 cv
460.057 258.775 459.917 258.655 459.747 258.555 cv
459.567 258.465 459.357 258.415 459.107 258.415 cv
458.867 258.415 458.657 258.465 458.487 258.545 cv
458.317 258.625 458.177 258.745 458.067 258.905 cv
457.957 259.065 457.877 259.245 457.817 259.455 cv
457.757 259.665 457.737 259.895 457.737 260.145 cv
457.737 260.385 457.757 260.615 457.807 260.825 cv
457.847 261.035 457.927 261.215 458.027 261.375 cv
458.127 261.535 458.257 261.665 458.437 261.755 cv
458.607 261.845 458.827 261.885 459.087 261.885 cv
459.317 261.885 459.517 261.845 459.697 261.765 cv
459.867 261.685 460.007 261.565 460.117 261.405 cv
460.227 261.255 460.307 261.075 460.357 260.865 cv
460.407 260.655 460.437 260.425 460.437 260.165 cv
cp
f
468.997 262.355 mo
468.977 262.425 li
468.907 262.465 li
468.787 262.485 li
468.597 262.495 li
468.387 262.485 li
468.267 262.465 li
468.197 262.425 li
468.187 262.355 li
468.187 259.685 li
468.187 259.505 468.167 259.335 468.137 259.175 cv
468.097 259.025 468.047 258.895 467.977 258.785 cv
467.897 258.675 467.807 258.585 467.697 258.525 cv
467.587 258.465 467.457 258.435 467.317 258.435 cv
467.127 258.435 466.937 258.515 466.757 258.655 cv
466.567 258.795 466.357 259.005 466.137 259.285 cv
466.137 262.355 li
466.117 262.425 li
466.047 262.465 li
465.927 262.485 li
465.727 262.495 li
465.537 262.485 li
465.407 262.465 li
465.347 262.425 li
465.327 262.355 li
465.327 259.685 li
465.327 259.505 465.307 259.335 465.277 259.175 cv
465.237 259.025 465.187 258.895 465.117 258.785 cv
465.037 258.675 464.947 258.585 464.837 258.525 cv
464.727 258.465 464.597 258.435 464.457 258.435 cv
464.267 258.435 464.077 258.515 463.887 258.655 cv
463.697 258.795 463.497 259.005 463.277 259.285 cv
463.277 262.355 li
463.257 262.425 li
463.197 262.465 li
463.077 262.485 li
462.877 262.495 li
462.677 262.485 li
462.547 262.465 li
462.487 262.425 li
462.477 262.355 li
462.477 257.955 li
462.487 257.895 li
462.547 257.845 li
462.657 257.815 li
462.837 257.805 li
463.017 257.815 li
463.127 257.845 li
463.177 257.895 li
463.197 257.955 li
463.197 258.535 li
463.447 258.265 463.687 258.065 463.917 257.935 cv
464.147 257.805 464.387 257.735 464.627 257.735 cv
464.807 257.735 464.967 257.765 465.117 257.805 cv
465.257 257.845 465.387 257.905 465.497 257.985 cv
465.607 258.065 465.697 258.155 465.777 258.255 cv
465.857 258.365 465.917 258.485 465.977 258.605 cv
466.117 258.445 466.257 258.315 466.397 258.205 cv
466.527 258.095 466.657 258.005 466.777 257.935 cv
466.897 257.875 467.007 257.825 467.127 257.785 cv
467.247 257.755 467.367 257.735 467.487 257.735 cv
467.767 257.735 467.997 257.785 468.197 257.885 cv
468.387 257.985 468.537 258.125 468.657 258.285 cv
468.777 258.455 468.857 258.655 468.917 258.875 cv
468.967 259.095 468.997 259.335 468.997 259.575 cv
468.997 262.355 li
cp
f
474.547 260.105 mo
474.547 260.465 474.497 260.795 474.407 261.095 cv
474.307 261.395 474.167 261.655 473.987 261.875 cv
473.797 262.095 473.557 262.265 473.277 262.385 cv
472.997 262.495 472.667 262.555 472.307 262.555 cv
471.947 262.555 471.627 262.505 471.357 262.405 cv
471.087 262.305 470.867 262.145 470.687 261.945 cv
470.507 261.745 470.367 261.495 470.287 261.195 cv
470.197 260.905 470.157 260.575 470.157 260.195 cv
470.157 259.835 470.197 259.505 470.297 259.205 cv
470.387 258.905 470.527 258.645 470.717 258.425 cv
470.897 258.205 471.137 258.035 471.417 257.915 cv
471.697 257.795 472.017 257.735 472.397 257.735 cv
472.757 257.735 473.067 257.795 473.337 257.905 cv
473.607 258.015 473.837 258.175 474.017 258.375 cv
474.197 258.575 474.327 258.825 474.417 259.115 cv
474.497 259.415 474.547 259.745 474.547 260.105 cv
cp
473.697 260.165 mo
473.697 259.925 473.667 259.705 473.627 259.485 cv
473.587 259.275 473.517 259.095 473.417 258.935 cv
473.317 258.775 473.177 258.655 473.007 258.555 cv
472.827 258.465 472.617 258.415 472.367 258.415 cv
472.127 258.415 471.917 258.465 471.747 258.545 cv
471.577 258.625 471.437 258.745 471.327 258.905 cv
471.217 259.065 471.137 259.245 471.077 259.455 cv
471.017 259.665 470.997 259.895 470.997 260.145 cv
470.997 260.385 471.017 260.615 471.067 260.825 cv
471.107 261.035 471.187 261.215 471.287 261.375 cv
471.387 261.535 471.517 261.665 471.697 261.755 cv
471.867 261.845 472.087 261.885 472.347 261.885 cv
472.577 261.885 472.777 261.845 472.957 261.765 cv
473.127 261.685 473.267 261.565 473.377 261.405 cv
473.487 261.255 473.567 261.075 473.617 260.865 cv
473.667 260.655 473.697 260.425 473.697 260.165 cv
cp
f
479.407 258.155 mo
479.407 258.275 479.387 258.355 479.357 258.405 cv
479.237 258.485 li
478.607 258.485 li
478.717 258.605 478.797 258.735 478.847 258.875 cv
478.887 259.015 478.917 259.165 478.917 259.315 cv
478.917 259.575 478.877 259.795 478.797 259.985 cv
478.717 260.185 478.597 260.345 478.447 260.485 cv
478.287 260.625 478.107 260.725 477.907 260.795 cv
477.697 260.865 477.467 260.895 477.217 260.895 cv
477.037 260.895 476.857 260.875 476.697 260.825 cv
476.537 260.785 476.407 260.725 476.327 260.645 cv
476.177 260.855 li
476.127 261.105 li
476.127 261.225 476.177 261.315 476.287 261.395 cv
476.387 261.475 476.527 261.515 476.707 261.515 cv
477.857 261.565 li
478.077 261.575 478.277 261.605 478.457 261.655 cv
478.637 261.715 478.797 261.785 478.937 261.885 cv
479.067 261.985 479.167 262.115 479.247 262.255 cv
479.317 262.395 479.357 262.555 479.357 262.745 cv
479.357 262.945 479.307 263.135 479.227 263.315 cv
479.147 263.495 479.017 263.655 478.837 263.795 cv
478.657 263.935 478.437 264.045 478.167 264.125 cv
477.897 264.205 477.577 264.245 477.217 264.245 cv
476.857 264.245 476.557 264.215 476.307 264.155 cv
476.057 264.095 475.857 264.005 475.697 263.905 cv
475.537 263.805 475.417 263.675 475.347 263.535 cv
475.277 263.385 475.247 263.225 475.247 263.065 cv
475.247 262.955 475.257 262.855 475.287 262.755 cv
475.307 262.655 475.347 262.555 475.407 262.475 cv
475.607 262.215 li
475.687 262.135 475.777 262.045 475.877 261.965 cv
475.717 261.885 475.597 261.785 475.517 261.665 cv
475.437 261.545 475.407 261.405 475.407 261.255 cv
475.407 261.065 475.447 260.895 475.527 260.735 cv
475.607 260.575 475.717 260.435 475.837 260.305 cv
475.737 260.185 475.657 260.055 475.597 259.905 cv
475.537 259.755 475.507 259.565 475.507 259.345 cv
475.507 259.105 475.547 258.875 475.637 258.675 cv
475.717 258.475 475.837 258.315 475.987 258.175 cv
476.137 258.035 476.317 257.935 476.527 257.855 cv
476.737 257.785 476.967 257.745 477.217 257.745 cv
477.347 257.745 477.467 257.755 477.587 257.775 cv
477.697 257.795 477.807 257.815 477.907 257.835 cv
479.237 257.835 li
479.367 257.915 li
479.387 257.975 479.407 258.055 479.407 258.155 cv
cp
478.147 259.315 mo
478.147 259.015 478.057 258.785 477.897 258.615 cv
477.737 258.455 477.497 258.365 477.197 258.365 cv
477.037 258.365 476.907 258.395 476.787 258.445 cv
476.667 258.495 476.577 258.565 476.497 258.655 cv
476.417 258.755 476.367 258.855 476.327 258.975 cv
476.287 259.095 476.277 259.215 476.277 259.345 cv
476.277 259.635 476.357 259.865 476.517 260.025 cv
476.677 260.195 476.917 260.275 477.217 260.275 cv
477.377 260.275 477.507 260.255 477.627 260.205 cv
477.747 260.155 477.837 260.085 477.917 259.995 cv
477.997 259.905 478.047 259.805 478.087 259.685 cv
478.127 259.565 478.147 259.445 478.147 259.315 cv
cp
478.547 262.785 mo
478.547 262.595 478.467 262.455 478.317 262.355 cv
478.157 262.255 477.957 262.205 477.697 262.195 cv
476.557 262.155 li
476.447 262.235 476.357 262.315 476.297 262.385 cv
476.137 262.585 li
476.057 262.785 li
476.037 262.985 li
476.037 263.195 476.137 263.355 476.357 263.465 cv
476.567 263.575 476.867 263.635 477.257 263.635 cv
477.497 263.635 477.707 263.605 477.867 263.565 cv
478.027 263.515 478.167 263.455 478.267 263.375 cv
478.367 263.295 478.437 263.205 478.477 263.105 cv
478.517 263.005 478.547 262.895 478.547 262.785 cv
cp
f
484.197 259.965 mo
484.197 260.095 484.157 260.185 484.097 260.235 cv
483.877 260.315 li
480.997 260.315 li
480.997 260.565 481.017 260.785 481.067 260.975 cv
481.117 261.175 481.197 261.335 481.317 261.475 cv
481.427 261.615 481.577 261.725 481.757 261.805 cv
481.937 261.885 482.167 261.915 482.427 261.915 cv
482.637 261.915 482.827 261.905 482.987 261.865 cv
483.147 261.835 483.287 261.795 483.407 261.755 cv
483.527 261.715 483.617 261.675 483.697 261.635 cv
483.877 261.585 li
483.937 261.605 li
483.977 261.655 li
483.997 261.745 li
484.007 261.895 li
483.997 262.005 li
483.987 262.095 li
483.967 262.155 li
483.917 262.215 li
483.767 262.295 li
483.677 262.335 483.567 262.375 483.427 262.415 cv
483.287 262.455 483.117 262.485 482.937 262.515 cv
482.747 262.535 482.547 262.555 482.347 262.555 cv
481.987 262.555 481.667 262.505 481.397 262.415 cv
481.117 262.315 480.887 262.165 480.707 261.965 cv
480.527 261.765 480.387 261.525 480.287 261.225 cv
480.187 260.925 480.147 260.575 480.147 260.175 cv
480.147 259.795 480.197 259.455 480.297 259.155 cv
480.397 258.855 480.537 258.605 480.717 258.395 cv
480.897 258.185 481.127 258.025 481.387 257.905 cv
481.647 257.795 481.937 257.735 482.257 257.735 cv
482.597 257.735 482.897 257.795 483.137 257.905 cv
483.377 258.025 483.577 258.175 483.737 258.355 cv
483.897 258.545 484.007 258.765 484.087 259.015 cv
484.157 259.265 484.197 259.535 484.197 259.815 cv
484.197 259.965 li
cp
483.387 259.725 mo
483.387 259.305 483.297 258.975 483.097 258.735 cv
482.897 258.495 482.607 258.365 482.227 258.365 cv
482.027 258.365 481.847 258.405 481.697 258.485 cv
481.547 258.565 481.427 258.665 481.327 258.785 cv
481.227 258.905 481.147 259.055 481.087 259.215 cv
481.027 259.375 480.997 259.545 480.997 259.725 cv
483.387 259.725 li
cp
f
489.207 262.355 mo
489.187 262.425 li
489.117 262.465 li
488.997 262.485 li
488.807 262.495 li
488.607 262.485 li
488.477 262.465 li
488.417 262.425 li
488.407 262.355 li
488.407 259.775 li
488.407 259.535 488.387 259.335 488.347 259.175 cv
488.307 259.025 488.247 258.895 488.167 258.785 cv
488.087 258.675 487.997 258.585 487.877 258.525 cv
487.757 258.465 487.627 258.435 487.467 258.435 cv
487.267 258.435 487.057 258.515 486.857 258.655 cv
486.657 258.795 486.447 259.005 486.227 259.285 cv
486.227 262.355 li
486.207 262.425 li
486.147 262.465 li
486.027 262.485 li
485.827 262.495 li
485.627 262.485 li
485.497 262.465 li
485.437 262.425 li
485.427 262.355 li
485.427 257.955 li
485.437 257.895 li
485.497 257.845 li
485.607 257.815 li
485.787 257.805 li
485.967 257.815 li
486.077 257.845 li
486.127 257.895 li
486.147 257.955 li
486.147 258.535 li
486.397 258.265 486.647 258.065 486.887 257.935 cv
487.127 257.805 487.377 257.735 487.637 257.735 cv
487.927 257.735 488.177 257.785 488.377 257.885 cv
488.577 257.985 488.737 258.125 488.857 258.285 cv
488.977 258.455 489.067 258.655 489.127 258.875 cv
489.177 259.095 489.207 259.365 489.207 259.675 cv
489.207 262.355 li
cp
f
494.427 259.965 mo
494.427 260.095 494.387 260.185 494.327 260.235 cv
494.107 260.315 li
491.227 260.315 li
491.227 260.565 491.247 260.785 491.297 260.975 cv
491.347 261.175 491.427 261.335 491.547 261.475 cv
491.657 261.615 491.807 261.725 491.987 261.805 cv
492.167 261.885 492.397 261.915 492.657 261.915 cv
492.867 261.915 493.057 261.905 493.217 261.865 cv
493.377 261.835 493.517 261.795 493.637 261.755 cv
493.757 261.715 493.847 261.675 493.927 261.635 cv
494.107 261.585 li
494.167 261.605 li
494.207 261.655 li
494.227 261.745 li
494.237 261.895 li
494.227 262.005 li
494.217 262.095 li
494.197 262.155 li
494.147 262.215 li
493.997 262.295 li
493.907 262.335 493.797 262.375 493.657 262.415 cv
493.517 262.455 493.347 262.485 493.167 262.515 cv
492.977 262.535 492.777 262.555 492.577 262.555 cv
492.217 262.555 491.897 262.505 491.627 262.415 cv
491.347 262.315 491.117 262.165 490.937 261.965 cv
490.757 261.765 490.617 261.525 490.517 261.225 cv
490.417 260.925 490.377 260.575 490.377 260.175 cv
490.377 259.795 490.427 259.455 490.527 259.155 cv
490.627 258.855 490.767 258.605 490.947 258.395 cv
491.127 258.185 491.357 258.025 491.617 257.905 cv
491.877 257.795 492.167 257.735 492.487 257.735 cv
492.827 257.735 493.127 257.795 493.367 257.905 cv
493.607 258.025 493.807 258.175 493.967 258.355 cv
494.127 258.545 494.237 258.765 494.317 259.015 cv
494.387 259.265 494.427 259.535 494.427 259.815 cv
494.427 259.965 li
cp
493.617 259.725 mo
493.617 259.305 493.527 258.975 493.327 258.735 cv
493.127 258.495 492.837 258.365 492.457 258.365 cv
492.257 258.365 492.077 258.405 491.927 258.485 cv
491.777 258.565 491.657 258.665 491.557 258.785 cv
491.457 258.905 491.377 259.055 491.317 259.215 cv
491.257 259.375 491.227 259.545 491.227 259.725 cv
493.617 259.725 li
cp
f
499.737 260.105 mo
499.737 260.465 499.687 260.795 499.597 261.095 cv
499.497 261.395 499.357 261.655 499.177 261.875 cv
498.987 262.095 498.747 262.265 498.467 262.385 cv
498.187 262.495 497.857 262.555 497.497 262.555 cv
497.137 262.555 496.817 262.505 496.547 262.405 cv
496.277 262.305 496.057 262.145 495.877 261.945 cv
495.697 261.745 495.557 261.495 495.477 261.195 cv
495.387 260.905 495.347 260.575 495.347 260.195 cv
495.347 259.835 495.387 259.505 495.487 259.205 cv
495.577 258.905 495.717 258.645 495.907 258.425 cv
496.087 258.205 496.327 258.035 496.607 257.915 cv
496.887 257.795 497.207 257.735 497.587 257.735 cv
497.947 257.735 498.257 257.795 498.527 257.905 cv
498.797 258.015 499.027 258.175 499.207 258.375 cv
499.387 258.575 499.517 258.825 499.607 259.115 cv
499.687 259.415 499.737 259.745 499.737 260.105 cv
cp
498.887 260.165 mo
498.887 259.925 498.857 259.705 498.817 259.485 cv
498.777 259.275 498.707 259.095 498.607 258.935 cv
498.507 258.775 498.367 258.655 498.197 258.555 cv
498.017 258.465 497.807 258.415 497.557 258.415 cv
497.317 258.415 497.107 258.465 496.937 258.545 cv
496.767 258.625 496.627 258.745 496.517 258.905 cv
496.407 259.065 496.327 259.245 496.267 259.455 cv
496.207 259.665 496.187 259.895 496.187 260.145 cv
496.187 260.385 496.207 260.615 496.257 260.825 cv
496.297 261.035 496.377 261.215 496.477 261.375 cv
496.577 261.535 496.707 261.665 496.887 261.755 cv
497.057 261.845 497.277 261.885 497.537 261.885 cv
497.767 261.885 497.967 261.845 498.147 261.765 cv
498.317 261.685 498.457 261.565 498.567 261.405 cv
498.677 261.255 498.757 261.075 498.807 260.865 cv
498.857 260.655 498.887 260.425 498.887 260.165 cv
cp
f
504.687 262.355 mo
504.667 262.425 li
504.607 262.465 li
504.497 262.485 li
504.327 262.495 li
504.137 262.485 li
504.027 262.465 li
503.967 262.425 li
503.957 262.355 li
503.957 261.775 li
503.697 262.055 503.447 262.255 503.207 262.375 cv
502.967 262.495 502.717 262.555 502.467 262.555 cv
502.177 262.555 501.927 262.505 501.727 262.415 cv
501.527 262.325 501.357 262.195 501.237 262.025 cv
501.117 261.865 501.027 261.665 500.977 261.445 cv
500.917 261.225 500.897 260.945 500.897 260.625 cv
500.897 257.955 li
500.917 257.895 li
500.977 257.845 li
501.107 257.815 li
501.307 257.805 li
501.497 257.815 li
501.617 257.845 li
501.687 257.895 li
501.707 257.955 li
501.707 260.515 li
501.707 260.775 501.727 260.985 501.767 261.135 cv
501.807 261.295 501.857 261.425 501.937 261.535 cv
502.017 261.645 502.107 261.725 502.227 261.785 cv
502.347 261.845 502.477 261.875 502.637 261.875 cv
502.837 261.875 503.037 261.805 503.237 261.665 cv
503.437 261.525 503.647 261.305 503.877 261.025 cv
503.877 257.955 li
503.897 257.895 li
503.957 257.845 li
504.077 257.815 li
504.287 257.805 li
504.477 257.815 li
504.597 257.845 li
504.667 257.895 li
504.687 257.955 li
504.687 262.355 li
cp
f
508.937 261.155 mo
508.937 261.385 508.887 261.585 508.807 261.765 cv
508.727 261.945 508.607 262.085 508.457 262.205 cv
508.297 262.325 508.117 262.415 507.907 262.475 cv
507.687 262.525 507.457 262.555 507.207 262.555 cv
507.047 262.555 506.897 262.535 506.757 262.515 cv
506.617 262.495 506.487 262.475 506.377 262.435 cv
506.267 262.405 506.177 262.365 506.097 262.325 cv
505.917 262.215 li
505.847 262.075 li
505.827 262.015 505.827 261.935 505.827 261.835 cv
505.837 261.685 li
505.857 261.575 li
505.897 261.525 li
505.957 261.505 li
506.117 261.575 li
506.187 261.615 506.277 261.665 506.377 261.715 cv
506.477 261.775 506.597 261.825 506.737 261.865 cv
506.877 261.905 507.037 261.925 507.227 261.925 cv
507.357 261.925 507.477 261.915 507.587 261.885 cv
507.697 261.855 507.797 261.815 507.877 261.755 cv
508.067 261.535 li
508.107 261.455 508.137 261.345 508.137 261.225 cv
508.137 261.105 508.097 260.995 508.037 260.915 cv
507.977 260.835 507.887 260.755 507.787 260.685 cv
507.687 260.625 507.567 260.565 507.437 260.515 cv
507.307 260.465 507.177 260.415 507.037 260.355 cv
506.897 260.295 506.757 260.235 506.627 260.165 cv
506.497 260.095 506.377 260.005 506.277 259.905 cv
506.167 259.805 506.077 259.685 506.017 259.545 cv
505.957 259.405 505.927 259.245 505.927 259.045 cv
505.927 258.875 505.957 258.705 506.027 258.545 cv
506.087 258.385 506.187 258.255 506.327 258.135 cv
506.457 258.015 506.627 257.925 506.827 257.845 cv
507.027 257.775 507.257 257.735 507.527 257.735 cv
507.647 257.735 507.757 257.745 507.877 257.765 cv
507.997 257.785 508.097 257.815 508.197 257.845 cv
508.297 257.875 508.377 257.905 508.447 257.935 cv
508.597 258.025 li
508.657 258.095 li
508.687 258.165 li
508.697 258.255 li
508.707 258.385 li
508.697 258.525 li
508.677 258.625 li
508.627 258.685 li
508.577 258.705 li
508.447 258.655 li
508.237 258.535 li
508.147 258.495 508.047 258.465 507.927 258.425 cv
507.807 258.385 507.667 258.365 507.517 258.365 cv
507.377 258.365 507.257 258.385 507.157 258.415 cv
507.057 258.445 506.967 258.485 506.907 258.545 cv
506.747 258.745 li
506.697 258.995 li
506.697 259.125 506.727 259.235 506.797 259.315 cv
506.857 259.405 506.947 259.485 507.047 259.545 cv
507.147 259.615 507.267 259.675 507.407 259.725 cv
507.537 259.775 507.677 259.825 507.817 259.885 cv
507.957 259.945 508.087 260.005 508.227 260.075 cv
508.357 260.145 508.477 260.225 508.587 260.325 cv
508.687 260.425 508.777 260.535 508.837 260.675 cv
508.897 260.815 508.937 260.975 508.937 261.155 cv
cp
f
515.717 262.105 mo
515.707 262.275 li
515.667 262.385 li
515.617 262.455 li
515.547 262.475 li
512.747 262.475 li
512.537 262.405 li
512.467 262.355 512.437 262.265 512.437 262.135 cv
512.437 256.285 li
512.457 256.215 li
512.527 256.175 li
512.657 256.145 li
512.857 256.125 li
513.057 256.145 li
513.187 256.175 li
513.257 256.215 li
513.277 256.285 li
513.277 261.745 li
515.547 261.745 li
515.617 261.775 li
515.667 261.835 li
515.707 261.945 li
515.717 262.105 li
cp
f
520.627 260.105 mo
520.627 260.465 520.577 260.795 520.487 261.095 cv
520.387 261.395 520.247 261.655 520.067 261.875 cv
519.877 262.095 519.637 262.265 519.357 262.385 cv
519.077 262.495 518.747 262.555 518.387 262.555 cv
518.027 262.555 517.707 262.505 517.437 262.405 cv
517.167 262.305 516.947 262.145 516.767 261.945 cv
516.587 261.745 516.447 261.495 516.367 261.195 cv
516.277 260.905 516.237 260.575 516.237 260.195 cv
516.237 259.835 516.277 259.505 516.377 259.205 cv
516.467 258.905 516.607 258.645 516.797 258.425 cv
516.977 258.205 517.217 258.035 517.497 257.915 cv
517.777 257.795 518.097 257.735 518.477 257.735 cv
518.837 257.735 519.147 257.795 519.417 257.905 cv
519.687 258.015 519.917 258.175 520.097 258.375 cv
520.277 258.575 520.407 258.825 520.497 259.115 cv
520.577 259.415 520.627 259.745 520.627 260.105 cv
cp
519.777 260.165 mo
519.777 259.925 519.747 259.705 519.707 259.485 cv
519.667 259.275 519.597 259.095 519.497 258.935 cv
519.397 258.775 519.257 258.655 519.087 258.555 cv
518.907 258.465 518.697 258.415 518.447 258.415 cv
518.207 258.415 517.997 258.465 517.827 258.545 cv
517.657 258.625 517.517 258.745 517.407 258.905 cv
517.297 259.065 517.217 259.245 517.157 259.455 cv
517.097 259.665 517.077 259.895 517.077 260.145 cv
517.077 260.385 517.097 260.615 517.147 260.825 cv
517.187 261.035 517.267 261.215 517.367 261.375 cv
517.467 261.535 517.597 261.665 517.777 261.755 cv
517.947 261.845 518.167 261.885 518.427 261.885 cv
518.657 261.885 518.857 261.845 519.037 261.765 cv
519.207 261.685 519.347 261.565 519.457 261.405 cv
519.567 261.255 519.647 261.075 519.697 260.865 cv
519.747 260.655 519.777 260.425 519.777 260.165 cv
cp
f
527.957 257.945 mo
527.947 258.035 li
527.917 258.155 li
526.627 262.325 li
526.577 262.425 li
526.487 262.465 li
526.337 262.485 li
526.267 262.485 526.187 262.495 526.087 262.495 cv
525.987 262.495 525.897 262.485 525.837 262.485 cv
525.677 262.465 li
525.587 262.415 li
525.537 262.325 li
524.617 259.145 li
524.607 259.095 li
524.597 259.145 li
523.747 262.325 li
523.697 262.425 li
523.597 262.465 li
523.437 262.485 li
523.367 262.485 523.287 262.495 523.187 262.495 cv
523.087 262.495 522.997 262.485 522.937 262.485 cv
522.787 262.465 li
522.697 262.415 li
522.657 262.325 li
521.367 258.155 li
521.337 258.035 li
521.327 257.945 li
521.347 257.885 li
521.407 257.835 li
521.537 257.815 li
521.727 257.805 li
521.817 257.805 521.887 257.815 521.947 257.815 cv
522.067 257.845 li
522.137 257.885 li
522.167 257.965 li
523.227 261.585 li
523.237 261.635 li
523.247 261.585 li
524.217 257.965 li
524.247 257.885 li
524.317 257.845 li
524.437 257.815 li
524.637 257.805 li
524.827 257.815 li
524.947 257.845 li
525.007 257.885 li
525.037 257.955 li
526.087 261.585 li
526.097 261.635 li
526.107 261.585 li
527.147 257.965 li
527.177 257.885 li
527.247 257.845 li
527.377 257.815 li
527.427 257.815 527.497 257.805 527.587 257.805 cv
527.777 257.815 li
527.887 257.835 li
527.937 257.885 li
527.957 257.945 li
cp
f
422.227 272.756 mo
442.227 272.756 li
0 1 1 0 cmyk
@
455.617 276.126 mo
455.597 276.196 li
455.527 276.246 li
455.397 276.266 li
455.207 276.276 li
454.997 276.266 li
454.867 276.246 li
454.797 276.196 li
454.787 276.126 li
454.787 273.326 li
451.907 273.326 li
451.907 276.126 li
451.887 276.196 li
451.817 276.246 li
451.687 276.266 li
451.487 276.276 li
451.287 276.266 li
451.157 276.246 li
451.087 276.196 li
451.067 276.126 li
451.067 270.066 li
451.087 269.996 li
451.157 269.956 li
451.287 269.926 li
451.487 269.906 li
451.687 269.926 li
451.817 269.956 li
451.887 269.996 li
451.907 270.066 li
451.907 272.596 li
454.787 272.596 li
454.787 270.066 li
454.797 269.996 li
454.867 269.956 li
454.997 269.926 li
455.207 269.906 li
455.397 269.926 li
455.527 269.956 li
455.597 269.996 li
455.617 270.066 li
455.617 276.126 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
461.287 273.886 mo
461.287 274.246 461.237 274.576 461.147 274.876 cv
461.047 275.176 460.907 275.436 460.727 275.656 cv
460.537 275.876 460.297 276.046 460.017 276.166 cv
459.737 276.276 459.407 276.336 459.047 276.336 cv
458.687 276.336 458.367 276.286 458.097 276.186 cv
457.827 276.086 457.607 275.926 457.427 275.726 cv
457.247 275.526 457.107 275.276 457.027 274.976 cv
456.937 274.686 456.897 274.356 456.897 273.976 cv
456.897 273.616 456.937 273.286 457.037 272.986 cv
457.127 272.686 457.267 272.426 457.457 272.206 cv
457.637 271.986 457.877 271.816 458.157 271.696 cv
458.437 271.576 458.757 271.516 459.137 271.516 cv
459.497 271.516 459.807 271.576 460.077 271.686 cv
460.347 271.796 460.577 271.956 460.757 272.156 cv
460.937 272.356 461.067 272.606 461.157 272.896 cv
461.237 273.196 461.287 273.526 461.287 273.886 cv
cp
460.437 273.946 mo
460.437 273.706 460.407 273.486 460.367 273.266 cv
460.327 273.056 460.257 272.876 460.157 272.716 cv
460.057 272.556 459.917 272.436 459.747 272.336 cv
459.567 272.246 459.357 272.196 459.107 272.196 cv
458.867 272.196 458.657 272.246 458.487 272.326 cv
458.317 272.406 458.177 272.526 458.067 272.686 cv
457.957 272.846 457.877 273.026 457.817 273.236 cv
457.757 273.446 457.737 273.676 457.737 273.926 cv
457.737 274.166 457.757 274.396 457.807 274.606 cv
457.847 274.816 457.927 274.996 458.027 275.156 cv
458.127 275.316 458.257 275.446 458.437 275.536 cv
458.607 275.626 458.827 275.666 459.087 275.666 cv
459.317 275.666 459.517 275.626 459.697 275.546 cv
459.867 275.466 460.007 275.346 460.117 275.186 cv
460.227 275.036 460.307 274.856 460.357 274.646 cv
460.407 274.436 460.437 274.206 460.437 273.946 cv
cp
f
468.997 276.136 mo
468.977 276.206 li
468.907 276.246 li
468.787 276.266 li
468.597 276.276 li
468.387 276.266 li
468.267 276.246 li
468.197 276.206 li
468.187 276.136 li
468.187 273.466 li
468.187 273.286 468.167 273.116 468.137 272.956 cv
468.097 272.806 468.047 272.676 467.977 272.566 cv
467.897 272.456 467.807 272.366 467.697 272.306 cv
467.587 272.246 467.457 272.216 467.317 272.216 cv
467.127 272.216 466.937 272.296 466.757 272.436 cv
466.567 272.576 466.357 272.786 466.137 273.066 cv
466.137 276.136 li
466.117 276.206 li
466.047 276.246 li
465.927 276.266 li
465.727 276.276 li
465.537 276.266 li
465.407 276.246 li
465.347 276.206 li
465.327 276.136 li
465.327 273.466 li
465.327 273.286 465.307 273.116 465.277 272.956 cv
465.237 272.806 465.187 272.676 465.117 272.566 cv
465.037 272.456 464.947 272.366 464.837 272.306 cv
464.727 272.246 464.597 272.216 464.457 272.216 cv
464.267 272.216 464.077 272.296 463.887 272.436 cv
463.697 272.576 463.497 272.786 463.277 273.066 cv
463.277 276.136 li
463.257 276.206 li
463.197 276.246 li
463.077 276.266 li
462.877 276.276 li
462.677 276.266 li
462.547 276.246 li
462.487 276.206 li
462.477 276.136 li
462.477 271.736 li
462.487 271.676 li
462.547 271.626 li
462.657 271.596 li
462.837 271.586 li
463.017 271.596 li
463.127 271.626 li
463.177 271.676 li
463.197 271.736 li
463.197 272.316 li
463.447 272.046 463.687 271.846 463.917 271.716 cv
464.147 271.586 464.387 271.516 464.627 271.516 cv
464.807 271.516 464.967 271.546 465.117 271.586 cv
465.257 271.626 465.387 271.686 465.497 271.766 cv
465.607 271.846 465.697 271.936 465.777 272.036 cv
465.857 272.146 465.917 272.266 465.977 272.386 cv
466.117 272.226 466.257 272.096 466.397 271.986 cv
466.527 271.876 466.657 271.786 466.777 271.716 cv
466.897 271.656 467.007 271.606 467.127 271.566 cv
467.247 271.536 467.367 271.516 467.487 271.516 cv
467.767 271.516 467.997 271.566 468.197 271.666 cv
468.387 271.766 468.537 271.906 468.657 272.066 cv
468.777 272.236 468.857 272.436 468.917 272.656 cv
468.967 272.876 468.997 273.116 468.997 273.356 cv
468.997 276.136 li
cp
f
474.547 273.886 mo
474.547 274.246 474.497 274.576 474.407 274.876 cv
474.307 275.176 474.167 275.436 473.987 275.656 cv
473.797 275.876 473.557 276.046 473.277 276.166 cv
472.997 276.276 472.667 276.336 472.307 276.336 cv
471.947 276.336 471.627 276.286 471.357 276.186 cv
471.087 276.086 470.867 275.926 470.687 275.726 cv
470.507 275.526 470.367 275.276 470.287 274.976 cv
470.197 274.686 470.157 274.356 470.157 273.976 cv
470.157 273.616 470.197 273.286 470.297 272.986 cv
470.387 272.686 470.527 272.426 470.717 272.206 cv
470.897 271.986 471.137 271.816 471.417 271.696 cv
471.697 271.576 472.017 271.516 472.397 271.516 cv
472.757 271.516 473.067 271.576 473.337 271.686 cv
473.607 271.796 473.837 271.956 474.017 272.156 cv
474.197 272.356 474.327 272.606 474.417 272.896 cv
474.497 273.196 474.547 273.526 474.547 273.886 cv
cp
473.697 273.946 mo
473.697 273.706 473.667 273.486 473.627 273.266 cv
473.587 273.056 473.517 272.876 473.417 272.716 cv
473.317 272.556 473.177 272.436 473.007 272.336 cv
472.827 272.246 472.617 272.196 472.367 272.196 cv
472.127 272.196 471.917 272.246 471.747 272.326 cv
471.577 272.406 471.437 272.526 471.327 272.686 cv
471.217 272.846 471.137 273.026 471.077 273.236 cv
471.017 273.446 470.997 273.676 470.997 273.926 cv
470.997 274.166 471.017 274.396 471.067 274.606 cv
471.107 274.816 471.187 274.996 471.287 275.156 cv
471.387 275.316 471.517 275.446 471.697 275.536 cv
471.867 275.626 472.087 275.666 472.347 275.666 cv
472.577 275.666 472.777 275.626 472.957 275.546 cv
473.127 275.466 473.267 275.346 473.377 275.186 cv
473.487 275.036 473.567 274.856 473.617 274.646 cv
473.667 274.436 473.697 274.206 473.697 273.946 cv
cp
f
479.407 271.936 mo
479.407 272.056 479.387 272.136 479.357 272.186 cv
479.237 272.266 li
478.607 272.266 li
478.717 272.386 478.797 272.516 478.847 272.656 cv
478.887 272.796 478.917 272.946 478.917 273.096 cv
478.917 273.356 478.877 273.576 478.797 273.766 cv
478.717 273.966 478.597 274.126 478.447 274.266 cv
478.287 274.406 478.107 274.506 477.907 274.576 cv
477.697 274.646 477.467 274.676 477.217 274.676 cv
477.037 274.676 476.857 274.656 476.697 274.606 cv
476.537 274.566 476.407 274.506 476.327 274.426 cv
476.177 274.636 li
476.127 274.886 li
476.127 275.006 476.177 275.096 476.287 275.176 cv
476.387 275.256 476.527 275.296 476.707 275.296 cv
477.857 275.346 li
478.077 275.356 478.277 275.386 478.457 275.436 cv
478.637 275.496 478.797 275.566 478.937 275.666 cv
479.067 275.766 479.167 275.896 479.247 276.036 cv
479.317 276.176 479.357 276.336 479.357 276.526 cv
479.357 276.726 479.307 276.916 479.227 277.096 cv
479.147 277.276 479.017 277.436 478.837 277.576 cv
478.657 277.716 478.437 277.826 478.167 277.906 cv
477.897 277.986 477.577 278.026 477.217 278.026 cv
476.857 278.026 476.557 277.996 476.307 277.936 cv
476.057 277.876 475.857 277.786 475.697 277.686 cv
475.537 277.586 475.417 277.456 475.347 277.316 cv
475.277 277.166 475.247 277.006 475.247 276.846 cv
475.247 276.736 475.257 276.636 475.287 276.536 cv
475.307 276.436 475.347 276.336 475.407 276.256 cv
475.607 275.996 li
475.687 275.916 475.777 275.826 475.877 275.746 cv
475.717 275.666 475.597 275.566 475.517 275.446 cv
475.437 275.326 475.407 275.186 475.407 275.036 cv
475.407 274.846 475.447 274.676 475.527 274.516 cv
475.607 274.356 475.717 274.216 475.837 274.086 cv
475.737 273.966 475.657 273.836 475.597 273.686 cv
475.537 273.536 475.507 273.346 475.507 273.126 cv
475.507 272.886 475.547 272.656 475.637 272.456 cv
475.717 272.256 475.837 272.096 475.987 271.956 cv
476.137 271.816 476.317 271.716 476.527 271.636 cv
476.737 271.566 476.967 271.526 477.217 271.526 cv
477.347 271.526 477.467 271.536 477.587 271.556 cv
477.697 271.576 477.807 271.596 477.907 271.616 cv
479.237 271.616 li
479.367 271.696 li
479.387 271.756 479.407 271.836 479.407 271.936 cv
cp
478.147 273.096 mo
478.147 272.796 478.057 272.566 477.897 272.396 cv
477.737 272.236 477.497 272.146 477.197 272.146 cv
477.037 272.146 476.907 272.176 476.787 272.226 cv
476.667 272.276 476.577 272.346 476.497 272.436 cv
476.417 272.536 476.367 272.636 476.327 272.756 cv
476.287 272.876 476.277 272.996 476.277 273.126 cv
476.277 273.416 476.357 273.646 476.517 273.806 cv
476.677 273.976 476.917 274.056 477.217 274.056 cv
477.377 274.056 477.507 274.036 477.627 273.986 cv
477.747 273.936 477.837 273.866 477.917 273.776 cv
477.997 273.686 478.047 273.586 478.087 273.466 cv
478.127 273.346 478.147 273.226 478.147 273.096 cv
cp
478.547 276.566 mo
478.547 276.376 478.467 276.236 478.317 276.136 cv
478.157 276.036 477.957 275.986 477.697 275.976 cv
476.557 275.936 li
476.447 276.016 476.357 276.096 476.297 276.166 cv
476.137 276.366 li
476.057 276.566 li
476.037 276.766 li
476.037 276.976 476.137 277.136 476.357 277.246 cv
476.567 277.356 476.867 277.416 477.257 277.416 cv
477.497 277.416 477.707 277.386 477.867 277.346 cv
478.027 277.296 478.167 277.236 478.267 277.156 cv
478.367 277.076 478.437 276.986 478.477 276.886 cv
478.517 276.786 478.547 276.676 478.547 276.566 cv
cp
f
484.197 273.746 mo
484.197 273.876 484.157 273.966 484.097 274.016 cv
483.877 274.096 li
480.997 274.096 li
480.997 274.346 481.017 274.566 481.067 274.756 cv
481.117 274.956 481.197 275.116 481.317 275.256 cv
481.427 275.396 481.577 275.506 481.757 275.586 cv
481.937 275.666 482.167 275.696 482.427 275.696 cv
482.637 275.696 482.827 275.686 482.987 275.646 cv
483.147 275.616 483.287 275.576 483.407 275.536 cv
483.527 275.496 483.617 275.456 483.697 275.416 cv
483.877 275.366 li
483.937 275.386 li
483.977 275.436 li
483.997 275.526 li
484.007 275.676 li
483.997 275.786 li
483.987 275.876 li
483.967 275.936 li
483.917 275.996 li
483.767 276.076 li
483.677 276.116 483.567 276.156 483.427 276.196 cv
483.287 276.236 483.117 276.266 482.937 276.296 cv
482.747 276.316 482.547 276.336 482.347 276.336 cv
481.987 276.336 481.667 276.286 481.397 276.196 cv
481.117 276.096 480.887 275.946 480.707 275.746 cv
480.527 275.546 480.387 275.306 480.287 275.006 cv
480.187 274.706 480.147 274.356 480.147 273.956 cv
480.147 273.576 480.197 273.236 480.297 272.936 cv
480.397 272.636 480.537 272.386 480.717 272.176 cv
480.897 271.966 481.127 271.806 481.387 271.686 cv
481.647 271.576 481.937 271.516 482.257 271.516 cv
482.597 271.516 482.897 271.576 483.137 271.686 cv
483.377 271.806 483.577 271.956 483.737 272.136 cv
483.897 272.326 484.007 272.546 484.087 272.796 cv
484.157 273.046 484.197 273.316 484.197 273.596 cv
484.197 273.746 li
cp
483.387 273.506 mo
483.387 273.086 483.297 272.756 483.097 272.516 cv
482.897 272.276 482.607 272.146 482.227 272.146 cv
482.027 272.146 481.847 272.186 481.697 272.266 cv
481.547 272.346 481.427 272.446 481.327 272.566 cv
481.227 272.686 481.147 272.836 481.087 272.996 cv
481.027 273.156 480.997 273.326 480.997 273.506 cv
483.387 273.506 li
cp
f
489.207 276.136 mo
489.187 276.206 li
489.117 276.246 li
488.997 276.266 li
488.807 276.276 li
488.607 276.266 li
488.477 276.246 li
488.417 276.206 li
488.407 276.136 li
488.407 273.556 li
488.407 273.316 488.387 273.116 488.347 272.956 cv
488.307 272.806 488.247 272.676 488.167 272.566 cv
488.087 272.456 487.997 272.366 487.877 272.306 cv
487.757 272.246 487.627 272.216 487.467 272.216 cv
487.267 272.216 487.057 272.296 486.857 272.436 cv
486.657 272.576 486.447 272.786 486.227 273.066 cv
486.227 276.136 li
486.207 276.206 li
486.147 276.246 li
486.027 276.266 li
485.827 276.276 li
485.627 276.266 li
485.497 276.246 li
485.437 276.206 li
485.427 276.136 li
485.427 271.736 li
485.437 271.676 li
485.497 271.626 li
485.607 271.596 li
485.787 271.586 li
485.967 271.596 li
486.077 271.626 li
486.127 271.676 li
486.147 271.736 li
486.147 272.316 li
486.397 272.046 486.647 271.846 486.887 271.716 cv
487.127 271.586 487.377 271.516 487.637 271.516 cv
487.927 271.516 488.177 271.566 488.377 271.666 cv
488.577 271.766 488.737 271.906 488.857 272.066 cv
488.977 272.236 489.067 272.436 489.127 272.656 cv
489.177 272.876 489.207 273.146 489.207 273.456 cv
489.207 276.136 li
cp
f
494.427 273.746 mo
494.427 273.876 494.387 273.966 494.327 274.016 cv
494.107 274.096 li
491.227 274.096 li
491.227 274.346 491.247 274.566 491.297 274.756 cv
491.347 274.956 491.427 275.116 491.547 275.256 cv
491.657 275.396 491.807 275.506 491.987 275.586 cv
492.167 275.666 492.397 275.696 492.657 275.696 cv
492.867 275.696 493.057 275.686 493.217 275.646 cv
493.377 275.616 493.517 275.576 493.637 275.536 cv
493.757 275.496 493.847 275.456 493.927 275.416 cv
494.107 275.366 li
494.167 275.386 li
494.207 275.436 li
494.227 275.526 li
494.237 275.676 li
494.227 275.786 li
494.217 275.876 li
494.197 275.936 li
494.147 275.996 li
493.997 276.076 li
493.907 276.116 493.797 276.156 493.657 276.196 cv
493.517 276.236 493.347 276.266 493.167 276.296 cv
492.977 276.316 492.777 276.336 492.577 276.336 cv
492.217 276.336 491.897 276.286 491.627 276.196 cv
491.347 276.096 491.117 275.946 490.937 275.746 cv
490.757 275.546 490.617 275.306 490.517 275.006 cv
490.417 274.706 490.377 274.356 490.377 273.956 cv
490.377 273.576 490.427 273.236 490.527 272.936 cv
490.627 272.636 490.767 272.386 490.947 272.176 cv
491.127 271.966 491.357 271.806 491.617 271.686 cv
491.877 271.576 492.167 271.516 492.487 271.516 cv
492.827 271.516 493.127 271.576 493.367 271.686 cv
493.607 271.806 493.807 271.956 493.967 272.136 cv
494.127 272.326 494.237 272.546 494.317 272.796 cv
494.387 273.046 494.427 273.316 494.427 273.596 cv
494.427 273.746 li
cp
493.617 273.506 mo
493.617 273.086 493.527 272.756 493.327 272.516 cv
493.127 272.276 492.837 272.146 492.457 272.146 cv
492.257 272.146 492.077 272.186 491.927 272.266 cv
491.777 272.346 491.657 272.446 491.557 272.566 cv
491.457 272.686 491.377 272.836 491.317 272.996 cv
491.257 273.156 491.227 273.326 491.227 273.506 cv
493.617 273.506 li
cp
f
499.737 273.886 mo
499.737 274.246 499.687 274.576 499.597 274.876 cv
499.497 275.176 499.357 275.436 499.177 275.656 cv
498.987 275.876 498.747 276.046 498.467 276.166 cv
498.187 276.276 497.857 276.336 497.497 276.336 cv
497.137 276.336 496.817 276.286 496.547 276.186 cv
496.277 276.086 496.057 275.926 495.877 275.726 cv
495.697 275.526 495.557 275.276 495.477 274.976 cv
495.387 274.686 495.347 274.356 495.347 273.976 cv
495.347 273.616 495.387 273.286 495.487 272.986 cv
495.577 272.686 495.717 272.426 495.907 272.206 cv
496.087 271.986 496.327 271.816 496.607 271.696 cv
496.887 271.576 497.207 271.516 497.587 271.516 cv
497.947 271.516 498.257 271.576 498.527 271.686 cv
498.797 271.796 499.027 271.956 499.207 272.156 cv
499.387 272.356 499.517 272.606 499.607 272.896 cv
499.687 273.196 499.737 273.526 499.737 273.886 cv
cp
498.887 273.946 mo
498.887 273.706 498.857 273.486 498.817 273.266 cv
498.777 273.056 498.707 272.876 498.607 272.716 cv
498.507 272.556 498.367 272.436 498.197 272.336 cv
498.017 272.246 497.807 272.196 497.557 272.196 cv
497.317 272.196 497.107 272.246 496.937 272.326 cv
496.767 272.406 496.627 272.526 496.517 272.686 cv
496.407 272.846 496.327 273.026 496.267 273.236 cv
496.207 273.446 496.187 273.676 496.187 273.926 cv
496.187 274.166 496.207 274.396 496.257 274.606 cv
496.297 274.816 496.377 274.996 496.477 275.156 cv
496.577 275.316 496.707 275.446 496.887 275.536 cv
497.057 275.626 497.277 275.666 497.537 275.666 cv
497.767 275.666 497.967 275.626 498.147 275.546 cv
498.317 275.466 498.457 275.346 498.567 275.186 cv
498.677 275.036 498.757 274.856 498.807 274.646 cv
498.857 274.436 498.887 274.206 498.887 273.946 cv
cp
f
504.687 276.136 mo
504.667 276.206 li
504.607 276.246 li
504.497 276.266 li
504.327 276.276 li
504.137 276.266 li
504.027 276.246 li
503.967 276.206 li
503.957 276.136 li
503.957 275.556 li
503.697 275.836 503.447 276.036 503.207 276.156 cv
502.967 276.276 502.717 276.336 502.467 276.336 cv
502.177 276.336 501.927 276.286 501.727 276.196 cv
501.527 276.106 501.357 275.976 501.237 275.806 cv
501.117 275.646 501.027 275.446 500.977 275.226 cv
500.917 275.006 500.897 274.726 500.897 274.406 cv
500.897 271.736 li
500.917 271.676 li
500.977 271.626 li
501.107 271.596 li
501.307 271.586 li
501.497 271.596 li
501.617 271.626 li
501.687 271.676 li
501.707 271.736 li
501.707 274.296 li
501.707 274.556 501.727 274.766 501.767 274.916 cv
501.807 275.076 501.857 275.206 501.937 275.316 cv
502.017 275.426 502.107 275.506 502.227 275.566 cv
502.347 275.626 502.477 275.656 502.637 275.656 cv
502.837 275.656 503.037 275.586 503.237 275.446 cv
503.437 275.306 503.647 275.086 503.877 274.806 cv
503.877 271.736 li
503.897 271.676 li
503.957 271.626 li
504.077 271.596 li
504.287 271.586 li
504.477 271.596 li
504.597 271.626 li
504.667 271.676 li
504.687 271.736 li
504.687 276.136 li
cp
f
508.937 274.936 mo
508.937 275.166 508.887 275.366 508.807 275.546 cv
508.727 275.726 508.607 275.866 508.457 275.986 cv
508.297 276.106 508.117 276.196 507.907 276.256 cv
507.687 276.306 507.457 276.336 507.207 276.336 cv
507.047 276.336 506.897 276.316 506.757 276.296 cv
506.617 276.276 506.487 276.256 506.377 276.216 cv
506.267 276.186 506.177 276.146 506.097 276.106 cv
505.917 275.996 li
505.847 275.856 li
505.827 275.796 505.827 275.716 505.827 275.616 cv
505.837 275.466 li
505.857 275.356 li
505.897 275.306 li
505.957 275.286 li
506.117 275.356 li
506.187 275.396 506.277 275.446 506.377 275.496 cv
506.477 275.556 506.597 275.606 506.737 275.646 cv
506.877 275.686 507.037 275.706 507.227 275.706 cv
507.357 275.706 507.477 275.696 507.587 275.666 cv
507.697 275.636 507.797 275.596 507.877 275.536 cv
508.067 275.316 li
508.107 275.236 508.137 275.126 508.137 275.006 cv
508.137 274.886 508.097 274.776 508.037 274.696 cv
507.977 274.616 507.887 274.536 507.787 274.466 cv
507.687 274.406 507.567 274.346 507.437 274.296 cv
507.307 274.246 507.177 274.196 507.037 274.136 cv
506.897 274.076 506.757 274.016 506.627 273.946 cv
506.497 273.876 506.377 273.786 506.277 273.686 cv
506.167 273.586 506.077 273.466 506.017 273.326 cv
505.957 273.186 505.927 273.026 505.927 272.826 cv
505.927 272.656 505.957 272.486 506.027 272.326 cv
506.087 272.166 506.187 272.036 506.327 271.916 cv
506.457 271.796 506.627 271.706 506.827 271.626 cv
507.027 271.556 507.257 271.516 507.527 271.516 cv
507.647 271.516 507.757 271.526 507.877 271.546 cv
507.997 271.566 508.097 271.596 508.197 271.626 cv
508.297 271.656 508.377 271.686 508.447 271.716 cv
508.597 271.806 li
508.657 271.876 li
508.687 271.946 li
508.697 272.036 li
508.707 272.166 li
508.697 272.306 li
508.677 272.406 li
508.627 272.466 li
508.577 272.486 li
508.447 272.436 li
508.237 272.316 li
508.147 272.276 508.047 272.246 507.927 272.206 cv
507.807 272.166 507.667 272.146 507.517 272.146 cv
507.377 272.146 507.257 272.166 507.157 272.196 cv
507.057 272.226 506.967 272.266 506.907 272.326 cv
506.747 272.526 li
506.697 272.776 li
506.697 272.906 506.727 273.016 506.797 273.096 cv
506.857 273.186 506.947 273.266 507.047 273.326 cv
507.147 273.396 507.267 273.456 507.407 273.506 cv
507.537 273.556 507.677 273.606 507.817 273.666 cv
507.957 273.726 508.087 273.786 508.227 273.856 cv
508.357 273.926 508.477 274.006 508.587 274.106 cv
508.687 274.206 508.777 274.316 508.837 274.456 cv
508.897 274.596 508.937 274.756 508.937 274.936 cv
cp
f
516.987 276.126 mo
516.967 276.196 li
516.897 276.246 li
516.767 276.266 li
516.577 276.276 li
516.487 276.276 516.417 276.266 516.367 276.266 cv
516.237 276.246 li
516.167 276.196 li
516.157 276.126 li
516.157 273.326 li
513.277 273.326 li
513.277 276.126 li
513.257 276.196 li
513.187 276.246 li
513.057 276.266 li
512.857 276.276 li
512.657 276.266 li
512.527 276.246 li
512.457 276.196 li
512.437 276.126 li
512.437 270.066 li
512.457 269.996 li
512.527 269.956 li
512.657 269.926 li
512.857 269.906 li
513.057 269.926 li
513.187 269.956 li
513.257 269.996 li
513.277 270.066 li
513.277 272.596 li
516.157 272.596 li
516.157 270.066 li
516.167 269.996 li
516.237 269.956 li
516.367 269.926 li
516.417 269.916 516.487 269.906 516.577 269.906 cv
516.767 269.926 li
516.897 269.956 li
516.967 269.996 li
516.987 270.066 li
516.987 276.126 li
cp
f
519.377 276.136 mo
519.357 276.206 li
519.297 276.246 li
519.177 276.266 li
518.977 276.276 li
518.777 276.266 li
518.647 276.246 li
518.587 276.206 li
518.577 276.136 li
518.577 271.736 li
518.587 271.676 li
518.647 271.626 li
518.777 271.596 li
518.977 271.586 li
519.177 271.596 li
519.297 271.626 li
519.357 271.676 li
519.377 271.736 li
519.377 276.136 li
cp
519.477 270.256 mo
519.477 270.446 519.437 270.576 519.367 270.646 cv
519.287 270.716 519.157 270.746 518.967 270.746 cv
518.777 270.746 518.647 270.716 518.577 270.646 cv
518.507 270.586 518.477 270.456 518.477 270.266 cv
518.477 270.086 518.507 269.956 518.577 269.886 cv
518.647 269.816 518.777 269.776 518.977 269.776 cv
519.167 269.776 519.297 269.816 519.367 269.876 cv
519.437 269.946 519.477 270.076 519.477 270.256 cv
cp
f
524.537 271.936 mo
524.537 272.056 524.517 272.136 524.487 272.186 cv
524.367 272.266 li
523.737 272.266 li
523.847 272.386 523.927 272.516 523.977 272.656 cv
524.017 272.796 524.047 272.946 524.047 273.096 cv
524.047 273.356 524.007 273.576 523.927 273.766 cv
523.847 273.966 523.727 274.126 523.577 274.266 cv
523.417 274.406 523.237 274.506 523.037 274.576 cv
522.827 274.646 522.597 274.676 522.347 274.676 cv
522.167 274.676 521.987 274.656 521.827 274.606 cv
521.667 274.566 521.537 274.506 521.457 274.426 cv
521.307 274.636 li
521.257 274.886 li
521.257 275.006 521.307 275.096 521.417 275.176 cv
521.517 275.256 521.657 275.296 521.837 275.296 cv
522.987 275.346 li
523.207 275.356 523.407 275.386 523.587 275.436 cv
523.767 275.496 523.927 275.566 524.067 275.666 cv
524.197 275.766 524.297 275.896 524.377 276.036 cv
524.447 276.176 524.487 276.336 524.487 276.526 cv
524.487 276.726 524.437 276.916 524.357 277.096 cv
524.277 277.276 524.147 277.436 523.967 277.576 cv
523.787 277.716 523.567 277.826 523.297 277.906 cv
523.027 277.986 522.707 278.026 522.347 278.026 cv
521.987 278.026 521.687 277.996 521.437 277.936 cv
521.187 277.876 520.987 277.786 520.827 277.686 cv
520.667 277.586 520.547 277.456 520.477 277.316 cv
520.407 277.166 520.377 277.006 520.377 276.846 cv
520.377 276.736 520.387 276.636 520.417 276.536 cv
520.437 276.436 520.477 276.336 520.537 276.256 cv
520.737 275.996 li
520.817 275.916 520.907 275.826 521.007 275.746 cv
520.847 275.666 520.727 275.566 520.647 275.446 cv
520.567 275.326 520.537 275.186 520.537 275.036 cv
520.537 274.846 520.577 274.676 520.657 274.516 cv
520.737 274.356 520.847 274.216 520.967 274.086 cv
520.867 273.966 520.787 273.836 520.727 273.686 cv
520.667 273.536 520.637 273.346 520.637 273.126 cv
520.637 272.886 520.677 272.656 520.767 272.456 cv
520.847 272.256 520.967 272.096 521.117 271.956 cv
521.267 271.816 521.447 271.716 521.657 271.636 cv
521.867 271.566 522.097 271.526 522.347 271.526 cv
522.477 271.526 522.597 271.536 522.717 271.556 cv
522.827 271.576 522.937 271.596 523.037 271.616 cv
524.367 271.616 li
524.497 271.696 li
524.517 271.756 524.537 271.836 524.537 271.936 cv
cp
523.277 273.096 mo
523.277 272.796 523.187 272.566 523.027 272.396 cv
522.867 272.236 522.627 272.146 522.327 272.146 cv
522.167 272.146 522.037 272.176 521.917 272.226 cv
521.797 272.276 521.707 272.346 521.627 272.436 cv
521.547 272.536 521.497 272.636 521.457 272.756 cv
521.417 272.876 521.407 272.996 521.407 273.126 cv
521.407 273.416 521.487 273.646 521.647 273.806 cv
521.807 273.976 522.047 274.056 522.347 274.056 cv
522.507 274.056 522.637 274.036 522.757 273.986 cv
522.877 273.936 522.967 273.866 523.047 273.776 cv
523.127 273.686 523.177 273.586 523.217 273.466 cv
523.257 273.346 523.277 273.226 523.277 273.096 cv
cp
523.677 276.566 mo
523.677 276.376 523.597 276.236 523.447 276.136 cv
523.287 276.036 523.087 275.986 522.827 275.976 cv
521.687 275.936 li
521.577 276.016 521.487 276.096 521.427 276.166 cv
521.267 276.366 li
521.187 276.566 li
521.167 276.766 li
521.167 276.976 521.267 277.136 521.487 277.246 cv
521.697 277.356 521.997 277.416 522.387 277.416 cv
522.627 277.416 522.837 277.386 522.997 277.346 cv
523.157 277.296 523.297 277.236 523.397 277.156 cv
523.497 277.076 523.567 276.986 523.607 276.886 cv
523.647 276.786 523.677 276.676 523.677 276.566 cv
cp
f
529.357 276.136 mo
529.337 276.206 li
529.267 276.246 li
529.147 276.266 li
528.957 276.276 li
528.757 276.266 li
528.627 276.246 li
528.567 276.206 li
528.557 276.136 li
528.557 273.556 li
528.557 273.316 528.537 273.116 528.497 272.956 cv
528.457 272.806 528.397 272.676 528.317 272.566 cv
528.237 272.456 528.147 272.366 528.027 272.306 cv
527.907 272.246 527.777 272.216 527.617 272.216 cv
527.417 272.216 527.207 272.296 527.007 272.436 cv
526.807 272.576 526.597 272.786 526.377 273.066 cv
526.377 276.136 li
526.357 276.206 li
526.297 276.246 li
526.177 276.266 li
525.977 276.276 li
525.777 276.266 li
525.647 276.246 li
525.587 276.206 li
525.577 276.136 li
525.577 269.606 li
525.587 269.546 li
525.647 269.496 li
525.777 269.466 li
525.977 269.456 li
526.177 269.466 li
526.297 269.496 li
526.357 269.546 li
526.377 269.606 li
526.377 272.246 li
526.607 272.006 526.837 271.816 527.077 271.696 cv
527.307 271.576 527.547 271.516 527.787 271.516 cv
528.077 271.516 528.327 271.566 528.527 271.666 cv
528.727 271.766 528.887 271.906 529.007 272.066 cv
529.127 272.236 529.217 272.436 529.277 272.656 cv
529.327 272.876 529.357 273.146 529.357 273.456 cv
529.357 276.136 li
cp
f
422.227 286.537 mo
442.227 286.537 li
.930816 .793027 0 0 cmyk
@
455.617 289.907 mo
455.597 289.977 li
455.527 290.027 li
455.397 290.047 li
455.207 290.057 li
454.997 290.047 li
454.867 290.027 li
454.797 289.977 li
454.787 289.907 li
454.787 287.107 li
451.907 287.107 li
451.907 289.907 li
451.887 289.977 li
451.817 290.027 li
451.687 290.047 li
451.487 290.057 li
451.287 290.047 li
451.157 290.027 li
451.087 289.977 li
451.067 289.907 li
451.067 283.847 li
451.087 283.777 li
451.157 283.737 li
451.287 283.707 li
451.487 283.687 li
451.687 283.707 li
451.817 283.737 li
451.887 283.777 li
451.907 283.847 li
451.907 286.377 li
454.787 286.377 li
454.787 283.847 li
454.797 283.777 li
454.867 283.737 li
454.997 283.707 li
455.207 283.687 li
455.397 283.707 li
455.527 283.737 li
455.597 283.777 li
455.617 283.847 li
455.617 289.907 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
460.957 287.527 mo
460.957 287.657 460.917 287.747 460.857 287.797 cv
460.637 287.877 li
457.757 287.877 li
457.757 288.127 457.777 288.347 457.827 288.537 cv
457.877 288.737 457.957 288.897 458.077 289.037 cv
458.187 289.177 458.337 289.287 458.517 289.367 cv
458.697 289.447 458.927 289.477 459.187 289.477 cv
459.397 289.477 459.587 289.467 459.747 289.427 cv
459.907 289.397 460.047 289.357 460.167 289.317 cv
460.287 289.277 460.377 289.237 460.457 289.197 cv
460.637 289.147 li
460.697 289.167 li
460.737 289.217 li
460.757 289.307 li
460.767 289.457 li
460.757 289.567 li
460.747 289.657 li
460.727 289.717 li
460.677 289.777 li
460.527 289.857 li
460.437 289.897 460.327 289.937 460.187 289.977 cv
460.047 290.017 459.877 290.047 459.697 290.077 cv
459.507 290.097 459.307 290.117 459.107 290.117 cv
458.747 290.117 458.427 290.067 458.157 289.977 cv
457.877 289.877 457.647 289.727 457.467 289.527 cv
457.287 289.327 457.147 289.087 457.047 288.787 cv
456.947 288.487 456.907 288.137 456.907 287.737 cv
456.907 287.357 456.957 287.017 457.057 286.717 cv
457.157 286.417 457.297 286.167 457.477 285.957 cv
457.657 285.747 457.887 285.587 458.147 285.467 cv
458.407 285.357 458.697 285.297 459.017 285.297 cv
459.357 285.297 459.657 285.357 459.897 285.467 cv
460.137 285.587 460.337 285.737 460.497 285.917 cv
460.657 286.107 460.767 286.327 460.847 286.577 cv
460.917 286.827 460.957 287.097 460.957 287.377 cv
460.957 287.527 li
cp
460.147 287.287 mo
460.147 286.867 460.057 286.537 459.857 286.297 cv
459.657 286.057 459.367 285.927 458.987 285.927 cv
458.787 285.927 458.607 285.967 458.457 286.047 cv
458.307 286.127 458.187 286.227 458.087 286.347 cv
457.987 286.467 457.907 286.617 457.847 286.777 cv
457.787 286.937 457.757 287.107 457.757 287.287 cv
460.147 287.287 li
cp
f
464.467 289.597 mo
464.467 289.697 464.457 289.767 464.447 289.817 cv
464.387 289.937 li
464.277 290.007 li
464.097 290.057 li
463.877 290.087 li
463.657 290.107 li
463.427 290.107 463.227 290.077 463.067 290.027 cv
462.907 289.967 462.767 289.877 462.667 289.757 cv
462.567 289.637 462.487 289.487 462.447 289.297 cv
462.397 289.107 462.377 288.887 462.377 288.627 cv
462.377 286.067 li
461.757 286.067 li
461.637 285.987 li
461.607 285.937 461.597 285.847 461.597 285.727 cv
461.607 285.577 li
461.637 285.467 li
461.687 285.417 li
461.767 285.397 li
462.377 285.397 li
462.377 284.347 li
462.387 284.287 li
462.447 284.237 li
462.577 284.207 li
462.777 284.197 li
462.977 284.207 li
463.097 284.237 li
463.157 284.287 li
463.177 284.347 li
463.177 285.397 li
464.307 285.397 li
464.377 285.417 li
464.427 285.467 li
464.457 285.577 li
464.467 285.727 li
464.467 285.847 464.447 285.937 464.417 285.987 cv
464.307 286.067 li
463.177 286.067 li
463.177 288.517 li
463.177 288.817 463.217 289.047 463.307 289.197 cv
463.397 289.357 463.557 289.427 463.797 289.427 cv
463.997 289.407 li
464.147 289.367 li
464.267 289.317 li
464.357 289.297 li
464.397 289.307 li
464.437 289.357 li
464.457 289.447 li
464.467 289.597 li
cp
f
469.287 287.527 mo
469.287 287.657 469.247 287.747 469.187 287.797 cv
468.967 287.877 li
466.087 287.877 li
466.087 288.127 466.107 288.347 466.157 288.537 cv
466.207 288.737 466.287 288.897 466.407 289.037 cv
466.517 289.177 466.667 289.287 466.847 289.367 cv
467.027 289.447 467.257 289.477 467.517 289.477 cv
467.727 289.477 467.917 289.467 468.077 289.427 cv
468.237 289.397 468.377 289.357 468.497 289.317 cv
468.617 289.277 468.707 289.237 468.787 289.197 cv
468.967 289.147 li
469.027 289.167 li
469.067 289.217 li
469.087 289.307 li
469.097 289.457 li
469.087 289.567 li
469.077 289.657 li
469.057 289.717 li
469.007 289.777 li
468.857 289.857 li
468.767 289.897 468.657 289.937 468.517 289.977 cv
468.377 290.017 468.207 290.047 468.027 290.077 cv
467.837 290.097 467.637 290.117 467.437 290.117 cv
467.077 290.117 466.757 290.067 466.487 289.977 cv
466.207 289.877 465.977 289.727 465.797 289.527 cv
465.617 289.327 465.477 289.087 465.377 288.787 cv
465.277 288.487 465.237 288.137 465.237 287.737 cv
465.237 287.357 465.287 287.017 465.387 286.717 cv
465.487 286.417 465.627 286.167 465.807 285.957 cv
465.987 285.747 466.217 285.587 466.477 285.467 cv
466.737 285.357 467.027 285.297 467.347 285.297 cv
467.687 285.297 467.987 285.357 468.227 285.467 cv
468.467 285.587 468.667 285.737 468.827 285.917 cv
468.987 286.107 469.097 286.327 469.177 286.577 cv
469.247 286.827 469.287 287.097 469.287 287.377 cv
469.287 287.527 li
cp
468.477 287.287 mo
468.477 286.867 468.387 286.537 468.187 286.297 cv
467.987 286.057 467.697 285.927 467.317 285.927 cv
467.117 285.927 466.937 285.967 466.787 286.047 cv
466.637 286.127 466.517 286.227 466.417 286.347 cv
466.317 286.467 466.237 286.617 466.177 286.777 cv
466.117 286.937 466.087 287.107 466.087 287.287 cv
468.477 287.287 li
cp
f
473.087 285.807 mo
473.077 285.997 li
473.057 286.107 li
473.017 286.167 li
472.957 286.187 li
472.857 286.167 li
472.737 286.127 li
472.577 286.087 li
472.387 286.067 li
472.147 286.117 li
471.908 286.277 li
471.817 286.357 471.727 286.457 471.627 286.577 cv
471.527 286.697 471.427 286.847 471.317 287.027 cv
471.317 289.917 li
471.297 289.987 li
471.237 290.027 li
471.117 290.047 li
470.917 290.057 li
470.717 290.047 li
470.587 290.027 li
470.527 289.987 li
470.517 289.917 li
470.517 285.517 li
470.527 285.457 li
470.587 285.407 li
470.697 285.377 li
470.877 285.367 li
471.057 285.377 li
471.167 285.407 li
471.217 285.457 li
471.237 285.517 li
471.237 286.157 li
471.357 285.987 471.477 285.847 471.577 285.737 cv
471.677 285.627 471.777 285.537 471.877 285.477 cv
471.977 285.417 472.067 285.367 472.158 285.337 cv
472.247 285.317 472.347 285.297 472.447 285.297 cv
472.587 285.307 li
472.757 285.337 li
472.917 285.387 li
473.017 285.437 li
473.057 285.477 li
473.067 285.537 li
473.077 285.637 li
473.087 285.807 li
cp
f
478.087 287.667 mo
478.087 288.027 478.037 288.357 477.947 288.657 cv
477.847 288.957 477.707 289.217 477.527 289.437 cv
477.337 289.657 477.097 289.827 476.817 289.947 cv
476.537 290.057 476.207 290.117 475.847 290.117 cv
475.487 290.117 475.167 290.067 474.897 289.967 cv
474.627 289.867 474.407 289.707 474.227 289.507 cv
474.047 289.307 473.907 289.057 473.827 288.757 cv
473.737 288.467 473.697 288.137 473.697 287.757 cv
473.697 287.397 473.737 287.067 473.837 286.767 cv
473.927 286.467 474.067 286.207 474.257 285.987 cv
474.437 285.767 474.677 285.597 474.957 285.477 cv
475.237 285.357 475.557 285.297 475.937 285.297 cv
476.297 285.297 476.607 285.357 476.877 285.467 cv
477.147 285.577 477.377 285.737 477.557 285.937 cv
477.737 286.137 477.867 286.387 477.957 286.677 cv
478.037 286.977 478.087 287.307 478.087 287.667 cv
cp
477.237 287.727 mo
477.237 287.487 477.207 287.267 477.167 287.047 cv
477.127 286.837 477.057 286.657 476.957 286.497 cv
476.857 286.337 476.717 286.217 476.547 286.117 cv
476.367 286.027 476.157 285.977 475.907 285.977 cv
475.667 285.977 475.457 286.027 475.287 286.107 cv
475.117 286.187 474.977 286.307 474.867 286.467 cv
474.757 286.627 474.677 286.807 474.617 287.017 cv
474.557 287.227 474.537 287.457 474.537 287.707 cv
474.537 287.947 474.557 288.177 474.607 288.387 cv
474.647 288.597 474.727 288.777 474.827 288.937 cv
474.927 289.097 475.057 289.227 475.237 289.317 cv
475.407 289.407 475.627 289.447 475.887 289.447 cv
476.117 289.447 476.317 289.407 476.497 289.327 cv
476.667 289.247 476.807 289.127 476.917 288.967 cv
477.027 288.817 477.107 288.637 477.157 288.427 cv
477.207 288.217 477.237 287.987 477.237 287.727 cv
cp
f
482.947 285.717 mo
482.947 285.837 482.927 285.917 482.897 285.967 cv
482.777 286.047 li
482.147 286.047 li
482.257 286.167 482.337 286.297 482.387 286.437 cv
482.427 286.577 482.457 286.727 482.457 286.877 cv
482.457 287.137 482.417 287.357 482.337 287.547 cv
482.257 287.747 482.137 287.907 481.987 288.047 cv
481.827 288.187 481.647 288.287 481.447 288.357 cv
481.237 288.427 481.007 288.457 480.757 288.457 cv
480.577 288.457 480.397 288.437 480.237 288.387 cv
480.077 288.347 479.947 288.287 479.867 288.207 cv
479.717 288.417 li
479.667 288.667 li
479.667 288.787 479.717 288.877 479.827 288.957 cv
479.927 289.037 480.067 289.077 480.247 289.077 cv
481.397 289.127 li
481.617 289.137 481.817 289.167 481.997 289.217 cv
482.177 289.277 482.337 289.347 482.477 289.447 cv
482.607 289.547 482.707 289.677 482.787 289.817 cv
482.857 289.957 482.897 290.117 482.897 290.307 cv
482.897 290.507 482.847 290.697 482.767 290.877 cv
482.687 291.057 482.557 291.217 482.377 291.357 cv
482.197 291.497 481.977 291.607 481.707 291.687 cv
481.437 291.767 481.117 291.807 480.757 291.807 cv
480.397 291.807 480.097 291.777 479.847 291.717 cv
479.597 291.657 479.397 291.567 479.237 291.467 cv
479.077 291.367 478.957 291.237 478.887 291.097 cv
478.817 290.947 478.787 290.787 478.787 290.627 cv
478.787 290.517 478.797 290.417 478.827 290.317 cv
478.847 290.217 478.887 290.117 478.947 290.037 cv
479.147 289.777 li
479.227 289.697 479.317 289.607 479.417 289.527 cv
479.257 289.447 479.137 289.347 479.057 289.227 cv
478.977 289.107 478.947 288.967 478.947 288.817 cv
478.947 288.627 478.987 288.457 479.067 288.297 cv
479.147 288.137 479.257 287.997 479.377 287.867 cv
479.277 287.747 479.197 287.617 479.137 287.467 cv
479.077 287.317 479.047 287.127 479.047 286.907 cv
479.047 286.667 479.087 286.437 479.177 286.237 cv
479.257 286.037 479.377 285.877 479.527 285.737 cv
479.677 285.597 479.857 285.497 480.067 285.417 cv
480.277 285.347 480.507 285.307 480.757 285.307 cv
480.887 285.307 481.007 285.317 481.127 285.337 cv
481.237 285.357 481.347 285.377 481.447 285.397 cv
482.777 285.397 li
482.907 285.477 li
482.927 285.537 482.947 285.617 482.947 285.717 cv
cp
481.687 286.877 mo
481.687 286.577 481.597 286.347 481.437 286.177 cv
481.277 286.017 481.037 285.927 480.737 285.927 cv
480.577 285.927 480.447 285.957 480.327 286.007 cv
480.207 286.057 480.117 286.127 480.037 286.217 cv
479.957 286.317 479.907 286.417 479.867 286.537 cv
479.827 286.657 479.817 286.777 479.817 286.907 cv
479.817 287.197 479.897 287.427 480.057 287.587 cv
480.217 287.757 480.457 287.837 480.757 287.837 cv
480.917 287.837 481.047 287.817 481.167 287.767 cv
481.287 287.717 481.377 287.647 481.457 287.557 cv
481.537 287.467 481.587 287.367 481.627 287.247 cv
481.667 287.127 481.687 287.007 481.687 286.877 cv
cp
482.087 290.347 mo
482.087 290.157 482.007 290.017 481.857 289.917 cv
481.697 289.817 481.497 289.767 481.237 289.757 cv
480.097 289.717 li
479.987 289.797 479.897 289.877 479.837 289.947 cv
479.677 290.147 li
479.597 290.347 li
479.577 290.547 li
479.577 290.757 479.677 290.917 479.897 291.027 cv
480.107 291.137 480.407 291.197 480.797 291.197 cv
481.037 291.197 481.247 291.167 481.407 291.127 cv
481.567 291.077 481.707 291.017 481.807 290.937 cv
481.907 290.857 481.977 290.767 482.017 290.667 cv
482.057 290.567 482.087 290.457 482.087 290.347 cv
cp
f
487.737 287.527 mo
487.737 287.657 487.697 287.747 487.637 287.797 cv
487.417 287.877 li
484.537 287.877 li
484.537 288.127 484.557 288.347 484.607 288.537 cv
484.657 288.737 484.737 288.897 484.857 289.037 cv
484.967 289.177 485.117 289.287 485.297 289.367 cv
485.477 289.447 485.707 289.477 485.967 289.477 cv
486.177 289.477 486.367 289.467 486.527 289.427 cv
486.687 289.397 486.827 289.357 486.947 289.317 cv
487.067 289.277 487.157 289.237 487.237 289.197 cv
487.417 289.147 li
487.477 289.167 li
487.517 289.217 li
487.537 289.307 li
487.547 289.457 li
487.537 289.567 li
487.527 289.657 li
487.507 289.717 li
487.457 289.777 li
487.307 289.857 li
487.217 289.897 487.107 289.937 486.967 289.977 cv
486.827 290.017 486.657 290.047 486.477 290.077 cv
486.287 290.097 486.087 290.117 485.887 290.117 cv
485.527 290.117 485.207 290.067 484.937 289.977 cv
484.657 289.877 484.427 289.727 484.247 289.527 cv
484.067 289.327 483.927 289.087 483.827 288.787 cv
483.727 288.487 483.687 288.137 483.687 287.737 cv
483.687 287.357 483.737 287.017 483.837 286.717 cv
483.937 286.417 484.077 286.167 484.257 285.957 cv
484.437 285.747 484.667 285.587 484.927 285.467 cv
485.187 285.357 485.477 285.297 485.797 285.297 cv
486.137 285.297 486.437 285.357 486.677 285.467 cv
486.917 285.587 487.117 285.737 487.277 285.917 cv
487.437 286.107 487.547 286.327 487.627 286.577 cv
487.697 286.827 487.737 287.097 487.737 287.377 cv
487.737 287.527 li
cp
486.927 287.287 mo
486.927 286.867 486.837 286.537 486.637 286.297 cv
486.437 286.057 486.147 285.927 485.767 285.927 cv
485.567 285.927 485.387 285.967 485.237 286.047 cv
485.087 286.127 484.967 286.227 484.867 286.347 cv
484.767 286.467 484.687 286.617 484.627 286.777 cv
484.567 286.937 484.537 287.107 484.537 287.287 cv
486.927 287.287 li
cp
f
492.747 289.917 mo
492.727 289.987 li
492.657 290.027 li
492.537 290.047 li
492.347 290.057 li
492.147 290.047 li
492.017 290.027 li
491.957 289.987 li
491.947 289.917 li
491.947 287.337 li
491.947 287.097 491.927 286.897 491.887 286.737 cv
491.847 286.587 491.787 286.457 491.707 286.347 cv
491.627 286.237 491.537 286.147 491.417 286.087 cv
491.297 286.027 491.167 285.997 491.007 285.997 cv
490.807 285.997 490.597 286.077 490.397 286.217 cv
490.197 286.357 489.987 286.567 489.767 286.847 cv
489.767 289.917 li
489.747 289.987 li
489.687 290.027 li
489.567 290.047 li
489.367 290.057 li
489.167 290.047 li
489.037 290.027 li
488.977 289.987 li
488.967 289.917 li
488.967 285.517 li
488.977 285.457 li
489.037 285.407 li
489.147 285.377 li
489.327 285.367 li
489.507 285.377 li
489.617 285.407 li
489.667 285.457 li
489.687 285.517 li
489.687 286.097 li
489.937 285.827 490.187 285.627 490.427 285.497 cv
490.667 285.367 490.917 285.297 491.177 285.297 cv
491.467 285.297 491.717 285.347 491.917 285.447 cv
492.117 285.547 492.277 285.687 492.397 285.847 cv
492.517 286.017 492.607 286.217 492.667 286.437 cv
492.717 286.657 492.747 286.927 492.747 287.237 cv
492.747 289.917 li
cp
f
497.967 287.527 mo
497.967 287.657 497.927 287.747 497.867 287.797 cv
497.647 287.877 li
494.767 287.877 li
494.767 288.127 494.787 288.347 494.837 288.537 cv
494.887 288.737 494.967 288.897 495.087 289.037 cv
495.197 289.177 495.347 289.287 495.527 289.367 cv
495.707 289.447 495.937 289.477 496.197 289.477 cv
496.407 289.477 496.597 289.467 496.757 289.427 cv
496.917 289.397 497.057 289.357 497.177 289.317 cv
497.297 289.277 497.387 289.237 497.467 289.197 cv
497.647 289.147 li
497.707 289.167 li
497.747 289.217 li
497.767 289.307 li
497.777 289.457 li
497.767 289.567 li
497.757 289.657 li
497.737 289.717 li
497.687 289.777 li
497.537 289.857 li
497.447 289.897 497.337 289.937 497.197 289.977 cv
497.057 290.017 496.887 290.047 496.707 290.077 cv
496.517 290.097 496.317 290.117 496.117 290.117 cv
495.757 290.117 495.437 290.067 495.167 289.977 cv
494.887 289.877 494.657 289.727 494.477 289.527 cv
494.297 289.327 494.157 289.087 494.057 288.787 cv
493.957 288.487 493.917 288.137 493.917 287.737 cv
493.917 287.357 493.967 287.017 494.067 286.717 cv
494.167 286.417 494.307 286.167 494.487 285.957 cv
494.667 285.747 494.897 285.587 495.157 285.467 cv
495.417 285.357 495.707 285.297 496.027 285.297 cv
496.367 285.297 496.667 285.357 496.907 285.467 cv
497.147 285.587 497.347 285.737 497.507 285.917 cv
497.667 286.107 497.777 286.327 497.857 286.577 cv
497.927 286.827 497.967 287.097 497.967 287.377 cv
497.967 287.527 li
cp
497.157 287.287 mo
497.157 286.867 497.067 286.537 496.867 286.297 cv
496.667 286.057 496.377 285.927 495.997 285.927 cv
495.797 285.927 495.617 285.967 495.467 286.047 cv
495.317 286.127 495.197 286.227 495.097 286.347 cv
494.997 286.467 494.917 286.617 494.857 286.777 cv
494.797 286.937 494.767 287.107 494.767 287.287 cv
497.157 287.287 li
cp
f
503.277 287.667 mo
503.277 288.027 503.227 288.357 503.137 288.657 cv
503.037 288.957 502.897 289.217 502.717 289.437 cv
502.527 289.657 502.287 289.827 502.007 289.947 cv
501.727 290.057 501.397 290.117 501.037 290.117 cv
500.677 290.117 500.357 290.067 500.087 289.967 cv
499.817 289.867 499.597 289.707 499.417 289.507 cv
499.237 289.307 499.097 289.057 499.017 288.757 cv
498.927 288.467 498.887 288.137 498.887 287.757 cv
498.887 287.397 498.927 287.067 499.027 286.767 cv
499.117 286.467 499.257 286.207 499.447 285.987 cv
499.627 285.767 499.867 285.597 500.147 285.477 cv
500.427 285.357 500.747 285.297 501.127 285.297 cv
501.487 285.297 501.797 285.357 502.067 285.467 cv
502.337 285.577 502.567 285.737 502.747 285.937 cv
502.927 286.137 503.057 286.387 503.147 286.677 cv
503.227 286.977 503.277 287.307 503.277 287.667 cv
cp
502.427 287.727 mo
502.427 287.487 502.397 287.267 502.357 287.047 cv
502.317 286.837 502.247 286.657 502.147 286.497 cv
502.047 286.337 501.907 286.217 501.737 286.117 cv
501.557 286.027 501.347 285.977 501.097 285.977 cv
500.857 285.977 500.647 286.027 500.477 286.107 cv
500.307 286.187 500.167 286.307 500.057 286.467 cv
499.947 286.627 499.867 286.807 499.807 287.017 cv
499.747 287.227 499.727 287.457 499.727 287.707 cv
499.727 287.947 499.747 288.177 499.797 288.387 cv
499.837 288.597 499.917 288.777 500.017 288.937 cv
500.117 289.097 500.247 289.227 500.427 289.317 cv
500.597 289.407 500.817 289.447 501.077 289.447 cv
501.307 289.447 501.507 289.407 501.687 289.327 cv
501.857 289.247 501.997 289.127 502.107 288.967 cv
502.217 288.817 502.297 288.637 502.347 288.427 cv
502.397 288.217 502.427 287.987 502.427 287.727 cv
cp
f
508.227 289.917 mo
508.207 289.987 li
508.147 290.027 li
508.037 290.047 li
507.867 290.057 li
507.677 290.047 li
507.567 290.027 li
507.507 289.987 li
507.497 289.917 li
507.497 289.337 li
507.237 289.617 506.987 289.817 506.747 289.937 cv
506.507 290.057 506.257 290.117 506.007 290.117 cv
505.717 290.117 505.467 290.067 505.267 289.977 cv
505.067 289.887 504.897 289.757 504.777 289.587 cv
504.657 289.427 504.567 289.227 504.517 289.007 cv
504.457 288.787 504.437 288.507 504.437 288.187 cv
504.437 285.517 li
504.457 285.457 li
504.517 285.407 li
504.647 285.377 li
504.847 285.367 li
505.037 285.377 li
505.157 285.407 li
505.227 285.457 li
505.247 285.517 li
505.247 288.077 li
505.247 288.337 505.267 288.547 505.307 288.697 cv
505.347 288.857 505.397 288.987 505.477 289.097 cv
505.557 289.207 505.647 289.287 505.767 289.347 cv
505.887 289.407 506.017 289.437 506.177 289.437 cv
506.377 289.437 506.577 289.367 506.777 289.227 cv
506.977 289.087 507.187 288.867 507.417 288.587 cv
507.417 285.517 li
507.437 285.457 li
507.497 285.407 li
507.617 285.377 li
507.827 285.367 li
508.017 285.377 li
508.137 285.407 li
508.207 285.457 li
508.227 285.517 li
508.227 289.917 li
cp
f
512.477 288.717 mo
512.477 288.947 512.427 289.147 512.347 289.327 cv
512.267 289.507 512.147 289.647 511.997 289.767 cv
511.837 289.887 511.657 289.977 511.447 290.037 cv
511.227 290.087 510.997 290.117 510.747 290.117 cv
510.587 290.117 510.437 290.097 510.297 290.077 cv
510.157 290.057 510.027 290.037 509.917 289.997 cv
509.807 289.967 509.717 289.927 509.637 289.887 cv
509.457 289.777 li
509.387 289.637 li
509.367 289.577 509.367 289.497 509.367 289.397 cv
509.377 289.247 li
509.397 289.137 li
509.437 289.087 li
509.497 289.067 li
509.657 289.137 li
509.727 289.177 509.817 289.227 509.917 289.277 cv
510.017 289.337 510.137 289.387 510.277 289.427 cv
510.417 289.467 510.577 289.487 510.767 289.487 cv
510.897 289.487 511.017 289.477 511.127 289.447 cv
511.237 289.417 511.337 289.377 511.417 289.317 cv
511.607 289.097 li
511.647 289.017 511.677 288.907 511.677 288.787 cv
511.677 288.667 511.637 288.557 511.577 288.477 cv
511.517 288.397 511.427 288.317 511.327 288.247 cv
511.227 288.187 511.107 288.127 510.977 288.077 cv
510.847 288.027 510.717 287.977 510.577 287.917 cv
510.437 287.857 510.297 287.797 510.167 287.727 cv
510.037 287.657 509.917 287.567 509.817 287.467 cv
509.707 287.367 509.617 287.247 509.557 287.107 cv
509.497 286.967 509.467 286.807 509.467 286.607 cv
509.467 286.437 509.497 286.267 509.567 286.107 cv
509.627 285.947 509.727 285.817 509.867 285.697 cv
509.997 285.577 510.167 285.487 510.367 285.407 cv
510.567 285.337 510.797 285.297 511.067 285.297 cv
511.187 285.297 511.297 285.307 511.417 285.327 cv
511.537 285.347 511.637 285.377 511.737 285.407 cv
511.837 285.437 511.917 285.467 511.987 285.497 cv
512.137 285.587 li
512.197 285.657 li
512.227 285.727 li
512.237 285.817 li
512.247 285.947 li
512.237 286.087 li
512.217 286.187 li
512.167 286.247 li
512.117 286.267 li
511.987 286.217 li
511.777 286.097 li
511.687 286.057 511.587 286.027 511.467 285.987 cv
511.347 285.947 511.207 285.927 511.057 285.927 cv
510.917 285.927 510.797 285.947 510.697 285.977 cv
510.597 286.007 510.507 286.047 510.447 286.107 cv
510.287 286.307 li
510.237 286.557 li
510.237 286.687 510.267 286.797 510.337 286.877 cv
510.397 286.967 510.487 287.047 510.587 287.107 cv
510.687 287.177 510.807 287.237 510.947 287.287 cv
511.077 287.337 511.217 287.387 511.357 287.447 cv
511.497 287.507 511.627 287.567 511.767 287.637 cv
511.897 287.707 512.017 287.787 512.127 287.887 cv
512.227 287.987 512.317 288.097 512.377 288.237 cv
512.437 288.377 512.477 288.537 512.477 288.717 cv
cp
f
422.227 300.319 mo
442.227 300.319 li
.884581 .536797 .613733 .453285 cmyk
@
455.277 303.689 mo
455.257 303.759 li
455.197 303.809 li
455.067 303.829 li
455.007 303.829 454.927 303.839 454.827 303.839 cv
454.627 303.829 li
454.497 303.809 li
454.417 303.749 li
454.377 303.649 li
453.787 302.159 li
453.717 301.999 453.647 301.839 453.577 301.699 cv
453.497 301.559 453.417 301.429 453.317 301.329 cv
453.217 301.229 453.097 301.149 452.957 301.089 cv
452.817 301.029 452.657 300.999 452.467 300.999 cv
451.907 300.999 li
451.907 303.689 li
451.887 303.759 li
451.817 303.809 li
451.687 303.829 li
451.487 303.839 li
451.287 303.829 li
451.157 303.809 li
451.087 303.759 li
451.067 303.689 li
451.067 297.839 li
451.067 297.719 451.097 297.629 451.167 297.579 cv
451.377 297.499 li
452.727 297.499 li
452.877 297.499 453.007 297.509 453.117 297.519 cv
453.217 297.529 453.317 297.539 453.407 297.539 cv
453.647 297.579 453.857 297.649 454.047 297.739 cv
454.237 297.839 454.397 297.949 454.527 298.089 cv
454.647 298.229 454.747 298.389 454.807 298.569 cv
454.867 298.749 454.907 298.949 454.907 299.169 cv
454.907 299.379 454.877 299.569 454.817 299.739 cv
454.757 299.909 454.677 300.059 454.567 300.179 cv
454.457 300.309 454.327 300.419 454.187 300.519 cv
454.037 300.619 453.867 300.689 453.687 300.749 cv
453.787 300.799 453.877 300.859 453.967 300.929 cv
454.047 300.999 454.127 301.079 454.207 301.179 cv
454.277 301.279 454.347 301.389 454.407 301.519 cv
454.467 301.649 454.537 301.789 454.607 301.939 cv
455.177 303.339 li
455.217 303.459 455.237 303.539 455.257 303.579 cv
455.277 303.689 li
cp
454.017 299.249 mo
454.017 299.009 453.957 298.799 453.847 298.629 cv
453.737 298.459 453.557 298.339 453.297 298.259 cv
453.207 298.239 453.117 298.219 453.017 298.209 cv
452.917 298.199 452.777 298.189 452.617 298.189 cv
451.907 298.189 li
451.907 300.319 li
452.727 300.319 li
452.947 300.319 453.137 300.299 453.297 300.239 cv
453.457 300.189 453.597 300.119 453.707 300.019 cv
453.807 299.919 453.887 299.809 453.937 299.679 cv
453.987 299.549 454.017 299.409 454.017 299.249 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
459.717 303.699 mo
459.677 303.789 li
459.567 303.829 li
459.367 303.839 li
459.157 303.829 li
459.047 303.789 li
459.017 303.699 li
459.017 303.259 li
458.827 303.469 458.617 303.629 458.377 303.739 cv
458.137 303.839 457.887 303.899 457.627 303.899 cv
457.397 303.899 457.187 303.869 456.997 303.819 cv
456.807 303.759 456.647 303.679 456.517 303.559 cv
456.387 303.449 456.287 303.309 456.217 303.139 cv
456.137 302.979 456.107 302.789 456.107 302.569 cv
456.107 302.329 456.157 302.109 456.257 301.929 cv
456.357 301.749 456.497 301.599 456.687 301.479 cv
456.877 301.359 457.107 301.269 457.387 301.209 cv
457.657 301.149 457.967 301.109 458.307 301.109 cv
458.917 301.109 li
458.917 300.769 li
458.917 300.609 458.897 300.459 458.857 300.329 cv
458.817 300.199 458.767 300.089 458.687 299.999 cv
458.607 299.919 458.497 299.849 458.377 299.809 cv
458.247 299.769 458.087 299.739 457.907 299.739 cv
457.707 299.739 457.527 299.769 457.367 299.809 cv
457.207 299.859 457.077 299.909 456.957 299.969 cv
456.837 300.029 456.737 300.079 456.657 300.119 cv
456.487 300.189 li
456.417 300.169 li
456.357 300.109 li
456.327 300.009 li
456.317 299.879 li
456.337 299.689 li
456.417 299.559 li
456.457 299.519 456.537 299.469 456.647 299.409 cv
456.747 299.349 456.877 299.299 457.017 299.249 cv
457.157 299.209 457.307 299.169 457.477 299.129 cv
457.637 299.099 457.807 299.079 457.977 299.079 cv
458.297 299.079 458.567 299.119 458.787 299.189 cv
459.007 299.269 459.177 299.369 459.317 299.509 cv
459.457 299.649 459.557 299.819 459.617 300.019 cv
459.677 300.229 459.717 300.469 459.717 300.739 cv
459.717 303.699 li
cp
458.917 301.699 mo
458.227 301.699 li
458.007 301.699 457.807 301.719 457.647 301.759 cv
457.487 301.799 457.347 301.849 457.247 301.919 cv
457.137 301.999 457.057 302.089 457.007 302.189 cv
456.947 302.289 456.927 302.409 456.927 302.539 cv
456.927 302.769 456.997 302.949 457.147 303.079 cv
457.287 303.219 457.497 303.279 457.757 303.279 cv
457.967 303.279 458.167 303.229 458.347 303.119 cv
458.527 303.019 458.717 302.849 458.917 302.629 cv
458.917 301.699 li
cp
f
464.977 303.699 mo
464.957 303.769 li
464.887 303.809 li
464.767 303.829 li
464.577 303.839 li
464.377 303.829 li
464.247 303.809 li
464.187 303.769 li
464.177 303.699 li
464.177 301.119 li
464.177 300.879 464.157 300.679 464.117 300.519 cv
464.077 300.369 464.017 300.239 463.937 300.129 cv
463.857 300.019 463.767 299.929 463.647 299.869 cv
463.527 299.809 463.397 299.779 463.237 299.779 cv
463.037 299.779 462.827 299.859 462.627 299.999 cv
462.427 300.139 462.217 300.349 461.997 300.629 cv
461.997 303.699 li
461.977 303.769 li
461.917 303.809 li
461.797 303.829 li
461.597 303.839 li
461.397 303.829 li
461.267 303.809 li
461.207 303.769 li
461.197 303.699 li
461.197 299.299 li
461.207 299.239 li
461.267 299.189 li
461.377 299.159 li
461.557 299.149 li
461.737 299.159 li
461.847 299.189 li
461.897 299.239 li
461.917 299.299 li
461.917 299.879 li
462.167 299.609 462.417 299.409 462.657 299.279 cv
462.897 299.149 463.147 299.079 463.407 299.079 cv
463.697 299.079 463.947 299.129 464.147 299.229 cv
464.347 299.329 464.507 299.469 464.627 299.629 cv
464.747 299.799 464.837 299.999 464.897 300.219 cv
464.947 300.439 464.977 300.709 464.977 301.019 cv
464.977 303.699 li
cp
f
470.207 303.699 mo
470.187 303.769 li
470.127 303.809 li
470.017 303.829 li
469.857 303.839 li
469.687 303.829 li
469.567 303.809 li
469.507 303.769 li
469.487 303.699 li
469.487 303.119 li
469.257 303.369 469.017 303.559 468.767 303.699 cv
468.517 303.829 468.247 303.899 467.957 303.899 cv
467.627 303.899 467.347 303.839 467.127 303.719 cv
466.897 303.599 466.707 303.439 466.567 303.219 cv
466.427 303.009 466.317 302.759 466.257 302.469 cv
466.197 302.179 466.167 301.869 466.167 301.549 cv
466.167 301.179 466.207 300.839 466.287 300.529 cv
466.367 300.229 466.487 299.969 466.647 299.749 cv
466.807 299.539 466.997 299.379 467.237 299.259 cv
467.477 299.139 467.747 299.079 468.057 299.079 cv
468.317 299.079 468.547 299.139 468.767 299.249 cv
468.977 299.369 469.187 299.529 469.397 299.749 cv
469.397 297.189 li
469.417 297.129 li
469.477 297.079 li
469.597 297.049 li
469.797 297.039 li
469.997 297.049 li
470.117 297.079 li
470.187 297.129 li
470.207 297.189 li
470.207 303.699 li
cp
469.397 300.609 mo
469.177 300.339 468.957 300.129 468.757 299.989 cv
468.557 299.849 468.347 299.779 468.127 299.779 cv
467.917 299.779 467.737 299.829 467.597 299.929 cv
467.457 300.029 467.337 300.149 467.257 300.309 cv
467.167 300.469 467.097 300.649 467.057 300.849 cv
467.017 301.049 466.997 301.259 466.997 301.469 cv
466.997 301.689 467.007 301.909 467.047 302.119 cv
467.087 302.329 467.147 302.519 467.227 302.679 cv
467.307 302.849 467.427 302.979 467.567 303.079 cv
467.707 303.179 467.877 303.219 468.097 303.219 cv
468.197 303.219 468.307 303.209 468.407 303.179 cv
468.507 303.159 468.607 303.109 468.707 303.039 cv
468.807 302.969 468.917 302.879 469.037 302.769 cv
469.147 302.659 469.267 302.519 469.397 302.359 cv
469.397 300.609 li
cp
f
475.777 301.449 mo
475.777 301.809 475.727 302.139 475.637 302.439 cv
475.537 302.739 475.397 302.999 475.217 303.219 cv
475.027 303.439 474.787 303.609 474.507 303.729 cv
474.227 303.839 473.897 303.899 473.537 303.899 cv
473.177 303.899 472.857 303.849 472.587 303.749 cv
472.317 303.649 472.097 303.489 471.917 303.289 cv
471.737 303.089 471.597 302.839 471.517 302.539 cv
471.427 302.249 471.387 301.919 471.387 301.539 cv
471.387 301.179 471.427 300.849 471.527 300.549 cv
471.617 300.249 471.757 299.989 471.947 299.769 cv
472.127 299.549 472.367 299.379 472.647 299.259 cv
472.927 299.139 473.247 299.079 473.627 299.079 cv
473.987 299.079 474.297 299.139 474.567 299.249 cv
474.837 299.359 475.067 299.519 475.247 299.719 cv
475.427 299.919 475.557 300.169 475.647 300.459 cv
475.727 300.759 475.777 301.089 475.777 301.449 cv
cp
474.927 301.509 mo
474.927 301.269 474.897 301.049 474.857 300.829 cv
474.817 300.619 474.747 300.439 474.647 300.279 cv
474.547 300.119 474.407 299.999 474.237 299.899 cv
474.057 299.809 473.847 299.759 473.597 299.759 cv
473.357 299.759 473.147 299.809 472.977 299.889 cv
472.807 299.969 472.667 300.089 472.557 300.249 cv
472.447 300.409 472.367 300.589 472.307 300.799 cv
472.247 301.009 472.227 301.239 472.227 301.489 cv
472.227 301.729 472.247 301.959 472.297 302.169 cv
472.337 302.379 472.417 302.559 472.517 302.719 cv
472.617 302.879 472.747 303.009 472.927 303.099 cv
473.097 303.189 473.317 303.229 473.577 303.229 cv
473.807 303.229 474.007 303.189 474.187 303.109 cv
474.357 303.029 474.497 302.909 474.607 302.749 cv
474.717 302.599 474.797 302.419 474.847 302.209 cv
474.897 301.999 474.927 301.769 474.927 301.509 cv
cp
f
483.487 303.699 mo
483.467 303.769 li
483.397 303.809 li
483.277 303.829 li
483.087 303.839 li
482.877 303.829 li
482.757 303.809 li
482.687 303.769 li
482.677 303.699 li
482.677 301.029 li
482.677 300.849 482.657 300.679 482.627 300.519 cv
482.587 300.369 482.537 300.239 482.467 300.129 cv
482.387 300.019 482.297 299.929 482.187 299.869 cv
482.077 299.809 481.947 299.779 481.807 299.779 cv
481.617 299.779 481.427 299.859 481.247 299.999 cv
481.057 300.139 480.847 300.349 480.627 300.629 cv
480.627 303.699 li
480.607 303.769 li
480.537 303.809 li
480.417 303.829 li
480.217 303.839 li
480.027 303.829 li
479.897 303.809 li
479.837 303.769 li
479.817 303.699 li
479.817 301.029 li
479.817 300.849 479.797 300.679 479.767 300.519 cv
479.727 300.369 479.677 300.239 479.607 300.129 cv
479.527 300.019 479.437 299.929 479.327 299.869 cv
479.217 299.809 479.087 299.779 478.947 299.779 cv
478.757 299.779 478.567 299.859 478.377 299.999 cv
478.187 300.139 477.987 300.349 477.767 300.629 cv
477.767 303.699 li
477.747 303.769 li
477.687 303.809 li
477.567 303.829 li
477.367 303.839 li
477.167 303.829 li
477.037 303.809 li
476.977 303.769 li
476.967 303.699 li
476.967 299.299 li
476.977 299.239 li
477.037 299.189 li
477.147 299.159 li
477.327 299.149 li
477.507 299.159 li
477.617 299.189 li
477.667 299.239 li
477.687 299.299 li
477.687 299.879 li
477.937 299.609 478.177 299.409 478.407 299.279 cv
478.637 299.149 478.877 299.079 479.117 299.079 cv
479.297 299.079 479.457 299.109 479.607 299.149 cv
479.747 299.189 479.877 299.249 479.987 299.329 cv
480.097 299.409 480.187 299.499 480.267 299.599 cv
480.347 299.709 480.407 299.829 480.467 299.949 cv
480.607 299.789 480.747 299.659 480.887 299.549 cv
481.017 299.439 481.147 299.349 481.267 299.279 cv
481.387 299.219 481.497 299.169 481.617 299.129 cv
481.737 299.099 481.857 299.079 481.977 299.079 cv
482.257 299.079 482.487 299.129 482.687 299.229 cv
482.877 299.329 483.027 299.469 483.147 299.629 cv
483.267 299.799 483.347 299.999 483.407 300.219 cv
483.457 300.439 483.487 300.679 483.487 300.919 cv
483.487 303.699 li
cp
f
492.037 303.519 mo
492.077 303.699 li
492.047 303.789 li
491.917 303.829 li
491.857 303.829 491.767 303.839 491.667 303.839 cv
491.567 303.839 491.487 303.829 491.427 303.829 cv
491.287 303.809 li
491.227 303.769 li
491.187 303.699 li
490.637 302.159 li
488.017 302.159 li
487.497 303.679 li
487.457 303.759 li
487.387 303.809 li
487.247 303.829 li
487.037 303.839 li
486.937 303.839 486.857 303.829 486.797 303.829 cv
486.667 303.789 li
486.637 303.689 li
486.677 303.519 li
488.797 297.649 li
488.847 297.559 li
488.947 297.509 li
489.097 297.479 li
489.157 297.479 489.247 297.469 489.347 297.469 cv
489.447 297.469 489.527 297.479 489.597 297.479 cv
489.767 297.509 li
489.857 297.569 li
489.917 297.649 li
492.037 303.519 li
cp
489.317 298.339 mo
489.317 298.339 li
488.227 301.489 li
490.427 301.489 li
489.317 298.339 li
cp
f
496.167 303.029 mo
496.157 303.169 li
496.137 303.279 li
496.107 303.349 li
496.037 303.439 li
495.997 303.479 495.927 303.529 495.827 303.589 cv
495.727 303.649 495.617 303.709 495.497 303.749 cv
495.377 303.799 495.237 303.829 495.097 303.859 cv
494.957 303.879 494.807 303.899 494.657 303.899 cv
494.337 303.899 494.047 303.849 493.807 303.749 cv
493.567 303.649 493.357 303.499 493.197 303.299 cv
493.037 303.099 492.907 302.859 492.827 302.569 cv
492.737 302.279 492.697 301.939 492.697 301.549 cv
492.697 301.119 492.747 300.749 492.857 300.439 cv
492.957 300.129 493.107 299.879 493.287 299.679 cv
493.467 299.479 493.687 299.339 493.937 299.239 cv
494.187 299.139 494.457 299.089 494.747 299.089 cv
494.887 299.089 495.017 299.109 495.157 299.129 cv
495.287 299.159 495.407 299.189 495.517 299.229 cv
495.627 299.269 495.727 299.319 495.817 299.379 cv
495.997 299.519 li
496.077 299.619 li
496.117 299.699 li
496.137 299.799 li
496.147 299.939 li
496.147 300.069 496.127 300.159 496.097 300.209 cv
495.997 300.279 li
495.817 300.199 li
495.757 300.149 495.677 300.089 495.577 300.029 cv
495.477 299.969 495.367 299.909 495.227 299.849 cv
495.087 299.799 494.917 299.769 494.737 299.769 cv
494.347 299.769 494.047 299.919 493.847 300.219 cv
493.637 300.519 493.537 300.949 493.537 301.509 cv
493.537 301.799 493.557 302.049 493.617 302.259 cv
493.667 302.469 493.747 302.649 493.847 302.789 cv
493.947 302.929 494.077 303.039 494.237 303.109 cv
494.387 303.179 494.557 303.209 494.757 303.209 cv
494.937 303.209 495.107 303.189 495.247 303.129 cv
495.387 303.069 495.507 303.009 495.607 302.939 cv
495.707 302.869 495.797 302.809 495.867 302.749 cv
496.027 302.659 li
496.087 302.679 li
496.127 302.749 li
496.157 302.859 li
496.167 303.029 li
cp
f
499.517 303.379 mo
499.517 303.479 499.507 303.549 499.497 303.599 cv
499.437 303.719 li
499.327 303.789 li
499.147 303.839 li
498.927 303.869 li
498.707 303.889 li
498.477 303.889 498.277 303.859 498.117 303.809 cv
497.957 303.749 497.817 303.659 497.717 303.539 cv
497.617 303.419 497.537 303.269 497.497 303.079 cv
497.447 302.889 497.427 302.669 497.427 302.409 cv
497.427 299.849 li
496.807 299.849 li
496.687 299.769 li
496.657 299.719 496.647 299.629 496.647 299.509 cv
496.657 299.359 li
496.687 299.249 li
496.737 299.199 li
496.817 299.179 li
497.427 299.179 li
497.427 298.129 li
497.437 298.069 li
497.497 298.019 li
497.627 297.989 li
497.827 297.979 li
498.027 297.989 li
498.147 298.019 li
498.207 298.069 li
498.227 298.129 li
498.227 299.179 li
499.357 299.179 li
499.427 299.199 li
499.477 299.249 li
499.507 299.359 li
499.517 299.509 li
499.517 299.629 499.497 299.719 499.467 299.769 cv
499.357 299.849 li
498.227 299.849 li
498.227 302.299 li
498.227 302.599 498.267 302.829 498.357 302.979 cv
498.447 303.139 498.607 303.209 498.847 303.209 cv
499.047 303.189 li
499.197 303.149 li
499.317 303.099 li
499.407 303.079 li
499.447 303.089 li
499.487 303.139 li
499.507 303.229 li
499.517 303.379 li
cp
f
501.387 303.699 mo
501.367 303.769 li
501.307 303.809 li
501.187 303.829 li
500.987 303.839 li
500.787 303.829 li
500.657 303.809 li
500.597 303.769 li
500.587 303.699 li
500.587 299.299 li
500.597 299.239 li
500.657 299.189 li
500.787 299.159 li
500.987 299.149 li
501.187 299.159 li
501.307 299.189 li
501.367 299.239 li
501.387 299.299 li
501.387 303.699 li
cp
501.487 297.819 mo
501.487 298.009 501.447 298.139 501.377 298.209 cv
501.297 298.279 501.167 298.309 500.977 298.309 cv
500.787 298.309 500.657 298.279 500.587 298.209 cv
500.517 298.149 500.487 298.019 500.487 297.829 cv
500.487 297.649 500.517 297.519 500.587 297.449 cv
500.657 297.379 500.787 297.339 500.987 297.339 cv
501.177 297.339 501.307 297.379 501.377 297.439 cv
501.447 297.509 501.487 297.639 501.487 297.819 cv
cp
f
506.957 301.449 mo
506.957 301.809 506.907 302.139 506.817 302.439 cv
506.717 302.739 506.577 302.999 506.397 303.219 cv
506.207 303.439 505.967 303.609 505.687 303.729 cv
505.407 303.839 505.077 303.899 504.717 303.899 cv
504.357 303.899 504.037 303.849 503.767 303.749 cv
503.497 303.649 503.277 303.489 503.097 303.289 cv
502.917 303.089 502.777 302.839 502.697 302.539 cv
502.607 302.249 502.567 301.919 502.567 301.539 cv
502.567 301.179 502.607 300.849 502.707 300.549 cv
502.797 300.249 502.937 299.989 503.127 299.769 cv
503.307 299.549 503.547 299.379 503.827 299.259 cv
504.107 299.139 504.427 299.079 504.807 299.079 cv
505.167 299.079 505.477 299.139 505.747 299.249 cv
506.017 299.359 506.247 299.519 506.427 299.719 cv
506.607 299.919 506.737 300.169 506.827 300.459 cv
506.907 300.759 506.957 301.089 506.957 301.449 cv
cp
506.107 301.509 mo
506.107 301.269 506.077 301.049 506.037 300.829 cv
505.997 300.619 505.927 300.439 505.827 300.279 cv
505.727 300.119 505.587 299.999 505.417 299.899 cv
505.237 299.809 505.027 299.759 504.777 299.759 cv
504.537 299.759 504.327 299.809 504.157 299.889 cv
503.987 299.969 503.847 300.089 503.737 300.249 cv
503.627 300.409 503.547 300.589 503.487 300.799 cv
503.427 301.009 503.407 301.239 503.407 301.489 cv
503.407 301.729 503.427 301.959 503.477 302.169 cv
503.517 302.379 503.597 302.559 503.697 302.719 cv
503.797 302.879 503.927 303.009 504.107 303.099 cv
504.277 303.189 504.497 303.229 504.757 303.229 cv
504.987 303.229 505.187 303.189 505.367 303.109 cv
505.537 303.029 505.677 302.909 505.787 302.749 cv
505.897 302.599 505.977 302.419 506.027 302.209 cv
506.077 301.999 506.107 301.769 506.107 301.509 cv
cp
f
511.927 303.699 mo
511.907 303.769 li
511.837 303.809 li
511.717 303.829 li
511.527 303.839 li
511.327 303.829 li
511.197 303.809 li
511.137 303.769 li
511.127 303.699 li
511.127 301.119 li
511.127 300.879 511.107 300.679 511.067 300.519 cv
511.027 300.369 510.967 300.239 510.887 300.129 cv
510.807 300.019 510.717 299.929 510.597 299.869 cv
510.477 299.809 510.347 299.779 510.187 299.779 cv
509.987 299.779 509.777 299.859 509.577 299.999 cv
509.377 300.139 509.167 300.349 508.947 300.629 cv
508.947 303.699 li
508.927 303.769 li
508.867 303.809 li
508.747 303.829 li
508.547 303.839 li
508.347 303.829 li
508.217 303.809 li
508.157 303.769 li
508.147 303.699 li
508.147 299.299 li
508.157 299.239 li
508.217 299.189 li
508.327 299.159 li
508.507 299.149 li
508.687 299.159 li
508.797 299.189 li
508.847 299.239 li
508.867 299.299 li
508.867 299.879 li
509.117 299.609 509.367 299.409 509.607 299.279 cv
509.847 299.149 510.097 299.079 510.357 299.079 cv
510.647 299.079 510.897 299.129 511.097 299.229 cv
511.297 299.329 511.457 299.469 511.577 299.629 cv
511.697 299.799 511.787 299.999 511.847 300.219 cv
511.897 300.439 511.927 300.709 511.927 301.019 cv
511.927 303.699 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
