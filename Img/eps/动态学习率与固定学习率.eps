%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <52A8><6001><5B66><4E60><7387><4E0E><56FA><5B9A><5B66><4E60><7387>.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: ASUS
%%CreationDate: 2021/7/1, 21:22:19
%%BoundingBox: 0 0 541 349
%%HiResBoundingBox: 0 0 540.9430 348.3938
%%CropBox: 0 0 540.9430 348.3938
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 574 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-07-01T21:14:46+08:00"
   xmp:CreatorTool="Matplotlib v3.4.2, https://matplotlib.org"
   pdf:Producer="Matplotlib pdf backend v3.4.2"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -348.394 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 348.394 li
540.943 348.394 li
540.943 0 li
cp
clp
gsave
0 348.394 mo
541 348.394 li
541 -.606201 li
0 -.606201 li
0 348.394 li
clp
0 348.394 mo
540.943 348.394 li
540.943 0 li
0 0 li
0 348.394 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
f
74.5409 216.036 mo
74.7366 215.388 li
80.2185 187.534 li
85.7003 168.538 li
91.1821 117.42 li
95.1501 136.036 li
91.7651 158.574 li
91.1821 155.839 li
89.0173 176.026 li
85.7003 196.819 li
82.0855 204.49 li
80.2185 203.436 li
74.7366 215.708 li
74.5409 216.036 li
96.6639 181.558 mo
95.1501 174.455 li
96.6639 164.376 li
100.058 164.971 li
96.6639 181.558 li
106.023 152.96 mo
102.146 126.918 li
100.058 126.552 li
102.146 116.353 li
107.628 113.791 li
113.109 71.8506 li
118.591 66.4079 li
124.073 50.8269 li
129.555 62.6728 li
135.037 48.2656 li
140.518 57.7636 li
146 35.2458 li
151.482 50.7202 li
156.964 51.574 li
162.446 31.8308 li
167.927 53.9217 li
173.409 38.9811 li
178.891 46.8782 li
184.373 36.0996 li
189.855 45.1708 li
195.337 32.8981 li
200.819 38.6609 li
206.3 40.7952 li
211.782 46.2379 li
217.264 35.2458 li
222.746 38.3407 li
228.228 54.2419 li
233.709 34.2853 li
239.191 35.2458 li
244.673 65.6608 li
250.155 61.3921 li
255.637 30.0166 li
261.118 69.6094 li
266.6 43.6767 li
272.082 57.977 li
277.564 45.1708 li
283.046 67.7953 li
288.528 45.9179 li
294.009 39.8348 li
299.491 75.4791 li
304.973 55.9494 li
310.455 31.1905 li
315.937 36.0996 li
321.418 31.6174 li
326.9 63.9533 li
332.382 53.9217 li
337.864 20.9455 li
343.346 30.7636 li
348.828 38.6609 li
354.309 43.3565 li
359.791 51.1471 li
365.273 49.2261 li
370.755 38.9811 li
376.237 34.8189 li
381.719 26.6016 li
387.2 33.0048 li
392.682 31.6174 li
398.164 36.2063 li
398.164 74.6253 li
392.682 70.0363 li
387.2 71.4237 li
381.719 65.0205 li
376.237 73.2379 li
370.755 77.4 li
365.273 87.6451 li
359.791 89.566 li
354.309 81.7755 li
348.828 77.0798 li
343.346 69.1826 li
337.864 59.3644 li
332.382 92.3407 li
326.9 102.372 li
321.418 70.0363 li
315.937 74.5186 li
310.455 69.6094 li
304.973 94.3683 li
299.491 113.898 li
294.009 78.2537 li
288.528 84.3367 li
283.046 106.214 li
277.564 83.5897 li
272.082 96.396 li
266.6 82.0956 li
261.118 108.028 li
255.637 68.4356 li
250.155 99.8111 li
244.673 104.08 li
239.191 73.6648 li
233.709 72.7043 li
228.228 92.6609 li
222.746 76.7596 li
217.264 73.6648 li
211.782 84.6569 li
206.3 79.2142 li
200.819 77.0798 li
195.337 71.3169 li
189.855 83.5897 li
184.373 74.5186 li
178.891 85.2972 li
173.409 77.4 li
167.927 92.3407 li
162.446 70.2497 li
156.964 89.9929 li
151.482 89.1391 li
146 73.6648 li
140.518 96.1826 li
135.037 86.6846 li
129.555 101.092 li
124.073 89.2458 li
118.591 104.827 li
113.109 110.27 li
107.628 152.21 li
106.023 152.96 li
/1 
[/DeviceCMYK] /CSA add_res
.243137 .196078 0 0 cmyk
f
69.2548 295.855 mo
69.2548 271.949 li
74.5409 254.455 li
74.7366 254.127 li
80.2185 241.855 li
82.0854 242.909 li
80.2185 246.87 li
74.7366 272.27 li
69.2548 295.855 li
167.927 213.574 mo
162.446 150.183 li
156.964 201.194 li
151.482 186.04 li
146 168.325 li
140.518 184.653 li
135.037 211.119 li
129.555 163.309 li
124.073 165.444 li
118.591 180.064 li
113.109 200.234 li
107.628 202.155 li
102.146 165.337 li
100.058 164.971 li
102.146 154.771 li
106.023 152.96 li
107.628 163.736 li
113.109 161.815 li
118.591 141.645 li
124.073 127.024 li
129.555 124.89 li
135.037 172.7 li
140.518 146.234 li
146 129.906 li
151.482 147.621 li
156.964 162.775 li
162.446 111.764 li
167.927 175.155 li
173.409 140.151 li
178.891 149.862 li
184.373 161.068 li
189.855 120.941 li
195.337 147.621 li
200.819 124.463 li
206.3 151.677 li
211.782 155.198 li
217.264 125.53 li
222.746 148.688 li
228.228 133.214 li
233.709 143.886 li
239.191 140.578 li
244.673 138.337 li
250.155 145.807 li
255.637 137.483 li
261.118 152.637 li
266.6 157.119 li
272.082 157.653 li
277.564 144.42 li
283.046 144.313 li
288.528 136.309 li
294.009 151.143 li
299.491 147.194 li
304.973 143.459 li
310.455 150.289 li
315.937 148.795 li
321.418 135.135 li
326.9 139.297 li
332.382 137.91 li
337.864 143.566 li
343.346 139.084 li
348.828 144.313 li
354.309 135.776 li
359.791 147.194 li
365.273 147.835 li
370.755 150.93 li
376.237 152.424 li
381.719 137.056 li
387.2 146.127 li
392.682 155.198 li
398.164 135.562 li
398.164 173.981 li
392.682 193.617 li
387.2 184.546 li
381.719 175.475 li
376.237 190.843 li
370.755 189.349 li
365.273 186.254 li
359.791 185.613 li
354.309 174.194 li
348.828 182.732 li
343.346 177.503 li
337.864 181.985 li
332.382 176.329 li
326.9 177.716 li
321.418 173.554 li
315.937 187.214 li
310.455 188.708 li
304.973 181.878 li
299.491 185.613 li
294.009 189.562 li
288.528 174.728 li
283.046 182.732 li
277.564 182.839 li
272.082 196.072 li
266.6 195.538 li
261.118 191.056 li
255.637 175.902 li
250.155 184.226 li
244.673 176.756 li
239.191 178.997 li
233.709 182.305 li
228.228 171.633 li
222.746 187.107 li
217.264 163.949 li
211.782 193.617 li
206.3 190.096 li
200.819 162.882 li
195.337 186.04 li
189.855 159.361 li
184.373 199.487 li
178.891 188.281 li
173.409 178.57 li
167.927 213.574 li
89.8078 209.489 mo
85.7428 206.561 li
89.0173 176.026 li
91.1821 162.455 li
91.7651 158.574 li
95.1501 174.455 li
91.1821 200.874 li
89.8078 209.489 li
96.6639 143.139 mo
95.1501 136.036 li
96.6639 125.957 li
100.058 126.552 li
96.6639 143.139 li
.054902 .168627 0 0 cmyk
f
69.2548 271.949 mo
69.2548 257.435 li
69.2548 263.305 li
74.5409 254.455 li
69.2548 271.949 li
85.7428 206.561 mo
85.7003 206.53 li
82.0855 204.49 li
85.7003 196.819 li
89.0173 176.026 li
85.7428 206.561 li
95.1501 174.455 mo
91.7651 158.574 li
95.1501 136.036 li
96.6639 143.139 li
100.058 126.552 li
102.146 126.918 li
106.023 152.96 li
102.146 154.771 li
100.058 164.971 li
96.6639 164.376 li
95.1501 174.455 li
.223529 .305882 0 0 cmyk
f
140.518 266.934 mo
135.037 252.633 li
129.555 251.566 li
124.073 252.206 li
118.591 243.882 li
113.109 248.898 li
107.628 257.542 li
102.146 253.807 li
96.6639 254.554 li
91.1821 248.898 li
85.7003 244.949 li
82.0854 242.909 li
85.7003 235.238 li
89.8078 209.489 li
91.1821 210.479 li
96.6639 216.135 li
102.146 215.388 li
107.628 219.123 li
113.109 210.479 li
118.591 205.463 li
124.073 213.787 li
129.555 213.147 li
135.037 214.214 li
140.518 228.515 li
146 212.827 li
151.482 207.598 li
156.964 211.866 li
162.446 192.657 li
167.927 220.297 li
173.409 206.744 li
178.891 208.238 li
184.373 213.787 li
189.855 215.708 li
195.337 212.08 li
200.819 213.787 li
206.3 204.183 li
211.782 208.131 li
217.264 205.89 li
222.746 194.685 li
228.228 214.214 li
233.709 209.305 li
239.191 221.151 li
244.673 206.317 li
250.155 208.665 li
255.637 206.21 li
261.118 205.356 li
266.6 212.72 li
272.082 219.977 li
277.564 195.538 li
283.046 196.926 li
288.528 210.586 li
294.009 206.637 li
299.491 214.428 li
304.973 219.87 li
310.455 206.637 li
315.937 213.894 li
321.418 204.183 li
326.9 215.922 li
332.382 219.017 li
337.864 196.819 li
343.346 198.526 li
348.828 190.629 li
354.309 191.27 li
359.791 224.566 li
365.273 225.313 li
370.755 218.59 li
376.237 203.115 li
381.719 215.708 li
387.2 199.594 li
392.682 204.823 li
398.164 222.218 li
398.164 260.637 li
392.682 243.242 li
387.2 238.013 li
381.719 254.127 li
376.237 241.534 li
370.755 257.009 li
365.273 263.732 li
359.791 262.985 li
354.309 229.689 li
348.828 229.048 li
343.346 236.945 li
337.864 235.238 li
332.382 257.435 li
326.9 254.341 li
321.418 242.602 li
315.937 252.313 li
310.455 245.056 li
304.973 258.289 li
299.491 252.847 li
294.009 245.056 li
288.528 249.005 li
283.046 235.345 li
277.564 233.957 li
272.082 258.396 li
266.6 251.139 li
261.118 243.776 li
255.637 244.629 li
250.155 247.084 li
244.673 244.736 li
239.191 259.57 li
233.709 247.724 li
228.228 252.633 li
222.746 233.104 li
217.264 244.309 li
211.782 246.55 li
206.3 242.602 li
200.819 252.206 li
195.337 250.499 li
189.855 254.127 li
184.373 252.206 li
178.891 246.657 li
173.409 245.163 li
167.927 258.716 li
162.446 231.076 li
156.964 250.285 li
151.482 246.017 li
146 251.246 li
140.518 266.934 li
69.2548 233.53 mo
69.2548 224.886 li
74.5409 216.036 li
69.2548 233.53 li
.270588 .0823529 .145098 .0156863 cmyk
f
69.2548 257.435 mo
69.2548 233.53 li
74.5409 216.036 li
74.7366 215.708 li
80.2185 203.436 li
82.0855 204.49 li
80.2185 208.451 li
74.7366 233.851 li
69.2548 257.435 li
.439216 .219608 .145098 .0156863 cmyk
f
74.5409 254.455 mo
74.7366 253.807 li
80.2185 225.953 li
85.7003 206.957 li
85.7428 206.561 li
89.8078 209.489 li
85.7003 235.238 li
82.0854 242.909 li
80.2185 241.855 li
74.7366 254.127 li
74.5409 254.455 li
.309804 .2 .145098 .0156863 cmyk
f
69.2548 263.305 mo
69.2548 257.435 li
74.7366 233.851 li
80.2185 208.451 li
82.0855 204.49 li
85.7003 206.53 li
85.7428 206.561 li
85.7003 206.957 li
80.2185 225.953 li
74.7366 253.807 li
74.5409 254.455 li
69.2548 263.305 li
.427451 .294118 .145098 .0156863 cmyk
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
.8 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.2548 309.6 mo
69.2548 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
69.2548 309.6 mo
69.2548 313.1 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
69.2548 309.6 mo
69.2548 313.1 li
@
71.8798 320.952 mo
71.8798 321.528 71.8318 322.056 71.7358 322.536 cv
71.6398 323.016 71.4958 323.436 71.2798 323.784 cv
71.0638 324.132 70.7878 324.396 70.4518 324.576 cv
70.1038 324.756 69.6838 324.852 69.1798 324.852 cv
68.6998 324.852 68.3038 324.768 67.9798 324.612 cv
67.6438 324.444 67.3798 324.204 67.1878 323.868 cv
66.9838 323.532 66.8398 323.124 66.7558 322.644 cv
66.6718 322.164 66.6358 321.612 66.6358 320.988 cv
66.6358 320.412 66.6838 319.872 66.7798 319.392 cv
66.8758 318.912 67.0198 318.504 67.2358 318.156 cv
67.4398 317.808 67.7158 317.544 68.0638 317.352 cv
68.3998 317.16 68.8318 317.064 69.3358 317.064 cv
69.8158 317.064 70.2118 317.148 70.5358 317.316 cv
70.8598 317.484 71.1238 317.736 71.3278 318.072 cv
71.5198 318.408 71.6638 318.804 71.7478 319.284 cv
71.8318 319.764 71.8798 320.328 71.8798 320.952 cv
cp
70.8478 321.012 mo
70.8478 320.64 70.8238 320.304 70.7998 320.004 cv
70.7758 319.704 70.7278 319.44 70.6798 319.2 cv
70.6318 318.972 70.5598 318.78 70.4758 318.612 cv
70.3918 318.444 70.2958 318.312 70.1758 318.204 cv
70.0558 318.096 69.9238 318.012 69.7798 317.964 cv
69.6238 317.916 69.4558 317.892 69.2758 317.892 cv
68.9398 317.892 68.6638 317.976 68.4598 318.132 cv
68.2558 318.288 68.0998 318.504 67.9798 318.768 cv
67.8598 319.044 67.7758 319.368 67.7278 319.728 cv
67.6798 320.1 67.6678 320.496 67.6678 320.916 cv
67.6678 321.48 67.6918 321.96 67.7518 322.356 cv
67.8118 322.764 67.9078 323.088 68.0278 323.328 cv
68.1478 323.58 68.3158 323.76 68.5198 323.868 cv
68.7118 323.988 68.9518 324.036 69.2398 324.036 cv
69.4558 324.036 69.6478 324.012 69.8158 323.94 cv
69.9838 323.868 70.1278 323.772 70.2478 323.64 cv
70.3678 323.508 70.4638 323.352 70.5358 323.16 cv
70.6078 322.98 70.6798 322.776 70.7278 322.56 cv
70.7758 322.344 70.7998 322.104 70.8238 321.84 cv
70.8358 321.576 70.8478 321.3 70.8478 321.012 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
124.073 309.6 mo
124.073 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
124.073 309.6 mo
124.073 313.1 li
f
124.073 309.6 mo
124.073 313.1 li
@
123.431 324.36 mo
123.407 324.552 li
123.359 324.672 li
123.287 324.744 li
123.215 324.756 li
119.255 324.756 li
119.183 324.744 li
119.111 324.672 li
119.051 324.552 li
119.039 324.36 li
119.051 324.18 li
119.099 324.048 li
119.171 323.976 li
119.255 323.952 li
120.839 323.952 li
120.839 318.18 li
119.375 319.056 li
119.183 319.128 li
119.075 319.104 li
119.027 318.972 li
119.015 318.924 119.015 318.852 119.015 318.756 cv
119.015 318.576 li
119.039 318.468 li
119.099 318.384 li
119.183 318.312 li
120.935 317.196 li
120.983 317.16 li
121.067 317.136 li
121.199 317.124 li
121.379 317.124 li
121.607 317.136 li
121.751 317.172 li
121.823 317.22 li
121.847 317.28 li
121.847 323.952 li
123.215 323.952 li
123.299 323.976 li
123.371 324.048 li
123.407 324.18 li
123.431 324.36 li
cp
f
129.743 320.952 mo
129.743 321.528 129.695 322.056 129.599 322.536 cv
129.503 323.016 129.359 323.436 129.143 323.784 cv
128.927 324.132 128.651 324.396 128.315 324.576 cv
127.967 324.756 127.547 324.852 127.043 324.852 cv
126.563 324.852 126.167 324.768 125.843 324.612 cv
125.507 324.444 125.243 324.204 125.051 323.868 cv
124.847 323.532 124.703 323.124 124.619 322.644 cv
124.535 322.164 124.499 321.612 124.499 320.988 cv
124.499 320.412 124.547 319.872 124.643 319.392 cv
124.739 318.912 124.883 318.504 125.099 318.156 cv
125.303 317.808 125.579 317.544 125.927 317.352 cv
126.263 317.16 126.695 317.064 127.199 317.064 cv
127.679 317.064 128.075 317.148 128.399 317.316 cv
128.723 317.484 128.987 317.736 129.191 318.072 cv
129.383 318.408 129.527 318.804 129.611 319.284 cv
129.695 319.764 129.743 320.328 129.743 320.952 cv
cp
128.711 321.012 mo
128.711 320.64 128.687 320.304 128.663 320.004 cv
128.639 319.704 128.591 319.44 128.543 319.2 cv
128.495 318.972 128.423 318.78 128.339 318.612 cv
128.255 318.444 128.159 318.312 128.039 318.204 cv
127.919 318.096 127.787 318.012 127.643 317.964 cv
127.487 317.916 127.319 317.892 127.139 317.892 cv
126.803 317.892 126.527 317.976 126.323 318.132 cv
126.119 318.288 125.963 318.504 125.843 318.768 cv
125.723 319.044 125.639 319.368 125.591 319.728 cv
125.543 320.1 125.531 320.496 125.531 320.916 cv
125.531 321.48 125.555 321.96 125.615 322.356 cv
125.675 322.764 125.771 323.088 125.891 323.328 cv
126.011 323.58 126.179 323.76 126.383 323.868 cv
126.575 323.988 126.815 324.036 127.103 324.036 cv
127.319 324.036 127.511 324.012 127.679 323.94 cv
127.847 323.868 127.991 323.772 128.111 323.64 cv
128.231 323.508 128.327 323.352 128.399 323.16 cv
128.471 322.98 128.543 322.776 128.591 322.56 cv
128.639 322.344 128.663 322.104 128.687 321.84 cv
128.699 321.576 128.711 321.3 128.711 321.012 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
178.891 309.6 mo
178.891 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
178.891 309.6 mo
178.891 313.1 li
f
178.891 309.6 mo
178.891 313.1 li
@
178.225 324.324 mo
178.213 324.516 li
178.165 324.648 li
178.093 324.732 li
178.009 324.756 li
173.809 324.756 li
173.665 324.744 li
173.557 324.672 li
173.497 324.54 li
173.485 324.48 173.485 324.408 173.485 324.312 cv
173.485 324.12 li
173.521 323.964 li
173.593 323.832 li
173.713 323.676 li
175.189 322.116 li
175.525 321.756 175.789 321.444 176.005 321.156 cv
176.209 320.868 176.365 320.616 176.473 320.376 cv
176.581 320.136 176.653 319.932 176.689 319.74 cv
176.725 319.548 176.749 319.368 176.749 319.2 cv
176.749 319.032 176.713 318.876 176.665 318.72 cv
176.605 318.576 176.521 318.444 176.425 318.324 cv
176.329 318.216 176.197 318.132 176.041 318.06 cv
175.885 317.988 175.705 317.952 175.501 317.952 cv
175.261 317.952 175.045 317.988 174.853 318.06 cv
174.661 318.132 174.505 318.204 174.361 318.276 cv
174.217 318.348 174.097 318.42 174.001 318.492 cv
173.905 318.564 173.833 318.588 173.797 318.588 cv
173.713 318.564 li
173.665 318.492 li
173.629 318.348 li
173.617 318.132 li
173.617 317.988 li
173.641 317.868 li
173.689 317.784 li
173.773 317.688 li
173.821 317.64 173.893 317.592 174.013 317.52 cv
174.133 317.448 174.277 317.388 174.457 317.316 cv
174.625 317.244 174.817 317.184 175.033 317.136 cv
175.237 317.088 175.453 317.064 175.693 317.064 cv
176.053 317.064 176.377 317.124 176.653 317.22 cv
176.917 317.328 177.145 317.472 177.337 317.652 cv
177.517 317.832 177.649 318.036 177.745 318.276 cv
177.829 318.516 177.877 318.768 177.877 319.032 cv
177.877 319.272 177.853 319.512 177.817 319.752 cv
177.769 319.992 177.685 320.256 177.541 320.532 cv
177.397 320.82 177.205 321.132 176.941 321.468 cv
176.677 321.816 176.329 322.212 175.897 322.644 cv
174.697 323.904 li
177.997 323.904 li
178.081 323.928 li
178.165 324.012 li
178.213 324.144 li
178.225 324.324 li
cp
f
184.561 320.952 mo
184.561 321.528 184.513 322.056 184.417 322.536 cv
184.321 323.016 184.177 323.436 183.961 323.784 cv
183.745 324.132 183.469 324.396 183.133 324.576 cv
182.785 324.756 182.365 324.852 181.861 324.852 cv
181.381 324.852 180.985 324.768 180.661 324.612 cv
180.325 324.444 180.061 324.204 179.869 323.868 cv
179.665 323.532 179.521 323.124 179.437 322.644 cv
179.353 322.164 179.317 321.612 179.317 320.988 cv
179.317 320.412 179.365 319.872 179.461 319.392 cv
179.557 318.912 179.701 318.504 179.917 318.156 cv
180.121 317.808 180.397 317.544 180.745 317.352 cv
181.081 317.16 181.513 317.064 182.017 317.064 cv
182.497 317.064 182.893 317.148 183.217 317.316 cv
183.541 317.484 183.805 317.736 184.009 318.072 cv
184.201 318.408 184.345 318.804 184.429 319.284 cv
184.513 319.764 184.561 320.328 184.561 320.952 cv
cp
183.529 321.012 mo
183.529 320.64 183.505 320.304 183.481 320.004 cv
183.457 319.704 183.409 319.44 183.361 319.2 cv
183.313 318.972 183.241 318.78 183.157 318.612 cv
183.073 318.444 182.977 318.312 182.857 318.204 cv
182.737 318.096 182.605 318.012 182.461 317.964 cv
182.305 317.916 182.137 317.892 181.957 317.892 cv
181.621 317.892 181.345 317.976 181.141 318.132 cv
180.937 318.288 180.781 318.504 180.661 318.768 cv
180.541 319.044 180.457 319.368 180.409 319.728 cv
180.361 320.1 180.349 320.496 180.349 320.916 cv
180.349 321.48 180.373 321.96 180.433 322.356 cv
180.493 322.764 180.589 323.088 180.709 323.328 cv
180.829 323.58 180.997 323.76 181.201 323.868 cv
181.393 323.988 181.633 324.036 181.921 324.036 cv
182.137 324.036 182.329 324.012 182.497 323.94 cv
182.665 323.868 182.809 323.772 182.929 323.64 cv
183.049 323.508 183.145 323.352 183.217 323.16 cv
183.289 322.98 183.361 322.776 183.409 322.56 cv
183.457 322.344 183.481 322.104 183.505 321.84 cv
183.517 321.576 183.529 321.3 183.529 321.012 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
233.709 309.6 mo
233.709 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
233.709 309.6 mo
233.709 313.1 li
f
233.709 309.6 mo
233.709 313.1 li
@
232.983 322.584 mo
232.983 322.944 232.923 323.256 232.803 323.532 cv
232.683 323.82 232.503 324.06 232.275 324.252 cv
232.047 324.444 231.771 324.6 231.435 324.696 cv
231.099 324.792 230.727 324.852 230.319 324.852 cv
230.055 324.852 229.815 324.828 229.599 324.792 cv
229.383 324.756 229.179 324.72 229.011 324.66 cv
228.843 324.612 228.699 324.552 228.591 324.492 cv
228.471 324.432 228.399 324.384 228.375 324.36 cv
228.315 324.276 li
228.267 324.168 li
228.243 324.024 li
228.231 323.82 li
228.231 323.676 228.243 323.58 228.267 323.532 cv
228.387 323.448 li
228.423 323.448 228.495 323.484 228.603 323.544 cv
228.699 323.604 228.831 323.664 228.999 323.736 cv
229.155 323.808 229.347 323.88 229.563 323.94 cv
229.779 324.012 230.019 324.036 230.295 324.036 cv
230.547 324.036 230.775 324.012 230.967 323.94 cv
231.159 323.868 231.327 323.772 231.459 323.652 cv
231.591 323.532 231.687 323.4 231.759 323.232 cv
231.831 323.064 231.867 322.884 231.867 322.68 cv
231.867 322.464 231.819 322.272 231.735 322.104 cv
231.651 321.936 231.531 321.78 231.363 321.66 cv
231.195 321.54 231.003 321.444 230.763 321.372 cv
230.523 321.3 230.259 321.264 229.959 321.264 cv
229.239 321.264 li
229.143 321.252 li
229.071 321.18 li
229.023 321.06 li
228.999 321.012 228.999 320.952 228.999 320.856 cv
229.011 320.676 li
229.071 320.556 li
229.143 320.496 li
229.239 320.472 li
229.899 320.472 li
230.151 320.472 230.379 320.448 230.583 320.376 cv
230.787 320.304 230.967 320.208 231.111 320.088 cv
231.255 319.968 231.363 319.812 231.435 319.644 cv
231.507 319.476 231.555 319.272 231.555 319.056 cv
231.555 318.9 231.519 318.756 231.471 318.612 cv
231.423 318.468 231.339 318.348 231.243 318.24 cv
231.147 318.132 231.015 318.048 230.859 317.988 cv
230.703 317.928 230.523 317.892 230.319 317.892 cv
230.079 317.892 229.875 317.928 229.683 318 cv
229.491 318.072 229.323 318.144 229.179 318.216 cv
229.035 318.3 228.903 318.372 228.807 318.444 cv
228.711 318.516 228.639 318.54 228.615 318.54 cv
228.531 318.528 li
228.483 318.468 li
228.447 318.348 li
228.447 318.3 228.447 318.228 228.447 318.132 cv
228.447 317.988 li
228.471 317.868 li
228.519 317.772 li
228.591 317.676 li
228.627 317.64 228.699 317.592 228.819 317.52 cv
228.927 317.448 229.071 317.388 229.239 317.316 cv
229.407 317.244 229.599 317.184 229.815 317.136 cv
230.031 317.088 230.259 317.064 230.511 317.064 cv
230.859 317.064 231.171 317.112 231.435 317.196 cv
231.699 317.292 231.927 317.412 232.107 317.58 cv
232.275 317.748 232.407 317.94 232.503 318.168 cv
232.587 318.396 232.635 318.648 232.635 318.924 cv
232.635 319.164 232.599 319.392 232.539 319.596 cv
232.467 319.8 232.383 319.98 232.263 320.136 cv
232.143 320.304 231.987 320.436 231.819 320.544 cv
231.639 320.664 231.435 320.736 231.207 320.772 cv
231.207 320.784 li
231.471 320.808 231.711 320.88 231.927 320.976 cv
232.143 321.084 232.323 321.216 232.479 321.372 cv
232.635 321.528 232.755 321.708 232.851 321.924 cv
232.935 322.14 232.983 322.356 232.983 322.584 cv
cp
f
239.379 320.952 mo
239.379 321.528 239.331 322.056 239.235 322.536 cv
239.139 323.016 238.995 323.436 238.779 323.784 cv
238.563 324.132 238.287 324.396 237.951 324.576 cv
237.603 324.756 237.183 324.852 236.679 324.852 cv
236.199 324.852 235.803 324.768 235.479 324.612 cv
235.143 324.444 234.879 324.204 234.687 323.868 cv
234.483 323.532 234.339 323.124 234.255 322.644 cv
234.171 322.164 234.135 321.612 234.135 320.988 cv
234.135 320.412 234.183 319.872 234.279 319.392 cv
234.375 318.912 234.519 318.504 234.735 318.156 cv
234.939 317.808 235.215 317.544 235.563 317.352 cv
235.899 317.16 236.331 317.064 236.835 317.064 cv
237.315 317.064 237.711 317.148 238.035 317.316 cv
238.359 317.484 238.623 317.736 238.827 318.072 cv
239.019 318.408 239.163 318.804 239.247 319.284 cv
239.331 319.764 239.379 320.328 239.379 320.952 cv
cp
238.347 321.012 mo
238.347 320.64 238.323 320.304 238.299 320.004 cv
238.275 319.704 238.227 319.44 238.179 319.2 cv
238.131 318.972 238.059 318.78 237.975 318.612 cv
237.891 318.444 237.795 318.312 237.675 318.204 cv
237.555 318.096 237.423 318.012 237.279 317.964 cv
237.123 317.916 236.955 317.892 236.775 317.892 cv
236.439 317.892 236.163 317.976 235.959 318.132 cv
235.755 318.288 235.599 318.504 235.479 318.768 cv
235.359 319.044 235.275 319.368 235.227 319.728 cv
235.179 320.1 235.167 320.496 235.167 320.916 cv
235.167 321.48 235.191 321.96 235.251 322.356 cv
235.311 322.764 235.407 323.088 235.527 323.328 cv
235.647 323.58 235.815 323.76 236.019 323.868 cv
236.211 323.988 236.451 324.036 236.739 324.036 cv
236.955 324.036 237.147 324.012 237.315 323.94 cv
237.483 323.868 237.627 323.772 237.747 323.64 cv
237.867 323.508 237.963 323.352 238.035 323.16 cv
238.107 322.98 238.179 322.776 238.227 322.56 cv
238.275 322.344 238.299 322.104 238.323 321.84 cv
238.335 321.576 238.347 321.3 238.347 321.012 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
288.528 309.6 mo
288.528 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
288.528 309.6 mo
288.528 313.1 li
f
288.528 309.6 mo
288.528 313.1 li
@
288.185 322.596 mo
288.185 322.728 288.161 322.836 288.125 322.908 cv
287.957 323.016 li
287.105 323.016 li
287.105 324.612 li
287.081 324.696 li
286.997 324.744 li
286.853 324.768 li
286.781 324.768 286.709 324.78 286.613 324.78 cv
286.517 324.78 286.433 324.768 286.373 324.768 cv
286.217 324.744 li
286.145 324.696 li
286.133 324.612 li
286.133 323.016 li
283.001 323.016 li
282.881 323.004 li
282.797 322.932 li
282.737 322.8 li
282.725 322.752 282.725 322.668 282.725 322.572 cv
282.725 322.38 li
282.749 322.212 li
282.797 322.08 li
282.881 321.924 li
285.605 317.316 li
285.689 317.244 li
285.833 317.184 li
286.049 317.148 li
286.133 317.148 286.241 317.136 286.361 317.136 cv
286.481 317.136 286.601 317.148 286.697 317.16 cv
286.793 317.172 286.865 317.184 286.925 317.196 cv
287.057 317.256 li
287.105 317.34 li
287.105 322.188 li
287.957 322.188 li
288.125 322.296 li
288.161 322.368 288.185 322.464 288.185 322.596 cv
cp
286.133 318.024 mo
286.121 318.024 li
283.649 322.188 li
286.133 322.188 li
286.133 318.024 li
cp
f
294.197 320.952 mo
294.197 321.528 294.149 322.056 294.053 322.536 cv
293.957 323.016 293.813 323.436 293.597 323.784 cv
293.381 324.132 293.105 324.396 292.769 324.576 cv
292.421 324.756 292.001 324.852 291.497 324.852 cv
291.017 324.852 290.621 324.768 290.297 324.612 cv
289.961 324.444 289.697 324.204 289.505 323.868 cv
289.301 323.532 289.157 323.124 289.073 322.644 cv
288.989 322.164 288.953 321.612 288.953 320.988 cv
288.953 320.412 289.001 319.872 289.097 319.392 cv
289.193 318.912 289.337 318.504 289.553 318.156 cv
289.757 317.808 290.033 317.544 290.381 317.352 cv
290.717 317.16 291.149 317.064 291.653 317.064 cv
292.133 317.064 292.529 317.148 292.853 317.316 cv
293.177 317.484 293.441 317.736 293.645 318.072 cv
293.837 318.408 293.981 318.804 294.065 319.284 cv
294.149 319.764 294.197 320.328 294.197 320.952 cv
cp
293.165 321.012 mo
293.165 320.64 293.141 320.304 293.117 320.004 cv
293.093 319.704 293.045 319.44 292.997 319.2 cv
292.949 318.972 292.877 318.78 292.793 318.612 cv
292.709 318.444 292.613 318.312 292.493 318.204 cv
292.373 318.096 292.241 318.012 292.097 317.964 cv
291.941 317.916 291.773 317.892 291.593 317.892 cv
291.257 317.892 290.981 317.976 290.777 318.132 cv
290.573 318.288 290.417 318.504 290.297 318.768 cv
290.177 319.044 290.093 319.368 290.045 319.728 cv
289.997 320.1 289.985 320.496 289.985 320.916 cv
289.985 321.48 290.009 321.96 290.069 322.356 cv
290.129 322.764 290.225 323.088 290.345 323.328 cv
290.465 323.58 290.633 323.76 290.837 323.868 cv
291.029 323.988 291.269 324.036 291.557 324.036 cv
291.773 324.036 291.965 324.012 292.133 323.94 cv
292.301 323.868 292.445 323.772 292.565 323.64 cv
292.685 323.508 292.781 323.352 292.853 323.16 cv
292.925 322.98 292.997 322.776 293.045 322.56 cv
293.093 322.344 293.117 322.104 293.141 321.84 cv
293.153 321.576 293.165 321.3 293.165 321.012 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
343.346 309.6 mo
343.346 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
343.346 309.6 mo
343.346 313.1 li
f
343.346 309.6 mo
343.346 313.1 li
@
342.644 322.32 mo
342.644 322.728 342.572 323.1 342.44 323.412 cv
342.296 323.724 342.104 323.988 341.864 324.204 cv
341.612 324.42 341.312 324.588 340.964 324.696 cv
340.616 324.792 340.232 324.852 339.812 324.852 cv
339.572 324.852 339.356 324.828 339.14 324.804 cv
338.924 324.768 338.744 324.744 338.576 324.696 cv
338.408 324.648 338.276 324.6 338.18 324.552 cv
338.072 324.504 338 324.468 337.976 324.444 cv
337.916 324.36 li
337.88 324.276 li
337.856 324.156 li
337.856 323.976 li
337.868 323.796 li
337.904 323.664 li
337.952 323.592 li
338.024 323.568 li
338.204 323.64 li
338.288 323.688 338.396 323.748 338.54 323.796 cv
338.684 323.856 338.852 323.916 339.056 323.964 cv
339.26 324.012 339.5 324.036 339.788 324.036 cv
340.052 324.036 340.292 324.012 340.508 323.94 cv
340.724 323.88 340.904 323.784 341.072 323.652 cv
341.228 323.52 341.348 323.352 341.444 323.148 cv
341.528 322.956 341.576 322.704 341.576 322.416 cv
341.576 322.176 341.528 321.96 341.456 321.768 cv
341.384 321.588 341.264 321.432 341.108 321.312 cv
340.952 321.192 340.748 321.096 340.508 321.036 cv
340.268 320.976 339.98 320.94 339.644 320.94 cv
339.404 320.94 339.188 320.952 339.02 320.976 cv
338.852 321 338.696 321.012 338.552 321.012 cv
338.432 321.012 338.36 320.988 338.312 320.94 cv
338.264 320.892 338.252 320.784 338.252 320.64 cv
338.252 317.556 li
338.252 317.436 338.276 317.34 338.336 317.268 cv
338.396 317.208 338.48 317.172 338.6 317.172 cv
341.96 317.172 li
342.044 317.208 li
342.116 317.28 li
342.164 317.412 li
342.176 317.604 li
342.176 317.748 342.152 317.868 342.116 317.94 cv
341.96 318.048 li
339.128 318.048 li
339.128 320.184 li
339.26 320.16 339.404 320.148 339.548 320.148 cv
339.692 320.148 339.848 320.136 340.04 320.136 cv
340.472 320.136 340.844 320.196 341.168 320.292 cv
341.492 320.4 341.768 320.544 341.984 320.736 cv
342.2 320.928 342.356 321.156 342.476 321.42 cv
342.584 321.696 342.644 321.996 342.644 322.32 cv
cp
f
349.016 320.952 mo
349.016 321.528 348.968 322.056 348.872 322.536 cv
348.776 323.016 348.632 323.436 348.416 323.784 cv
348.2 324.132 347.924 324.396 347.588 324.576 cv
347.24 324.756 346.82 324.852 346.316 324.852 cv
345.836 324.852 345.44 324.768 345.116 324.612 cv
344.78 324.444 344.516 324.204 344.324 323.868 cv
344.12 323.532 343.976 323.124 343.892 322.644 cv
343.808 322.164 343.772 321.612 343.772 320.988 cv
343.772 320.412 343.82 319.872 343.916 319.392 cv
344.012 318.912 344.156 318.504 344.372 318.156 cv
344.576 317.808 344.852 317.544 345.2 317.352 cv
345.536 317.16 345.968 317.064 346.472 317.064 cv
346.952 317.064 347.348 317.148 347.672 317.316 cv
347.996 317.484 348.26 317.736 348.464 318.072 cv
348.656 318.408 348.8 318.804 348.884 319.284 cv
348.968 319.764 349.016 320.328 349.016 320.952 cv
cp
347.984 321.012 mo
347.984 320.64 347.96 320.304 347.936 320.004 cv
347.912 319.704 347.864 319.44 347.816 319.2 cv
347.768 318.972 347.696 318.78 347.612 318.612 cv
347.528 318.444 347.432 318.312 347.312 318.204 cv
347.192 318.096 347.06 318.012 346.916 317.964 cv
346.76 317.916 346.592 317.892 346.412 317.892 cv
346.076 317.892 345.8 317.976 345.596 318.132 cv
345.392 318.288 345.236 318.504 345.116 318.768 cv
344.996 319.044 344.912 319.368 344.864 319.728 cv
344.816 320.1 344.804 320.496 344.804 320.916 cv
344.804 321.48 344.828 321.96 344.888 322.356 cv
344.948 322.764 345.044 323.088 345.164 323.328 cv
345.284 323.58 345.452 323.76 345.656 323.868 cv
345.848 323.988 346.088 324.036 346.376 324.036 cv
346.592 324.036 346.784 324.012 346.952 323.94 cv
347.12 323.868 347.264 323.772 347.384 323.64 cv
347.504 323.508 347.6 323.352 347.672 323.16 cv
347.744 322.98 347.816 322.776 347.864 322.56 cv
347.912 322.344 347.936 322.104 347.96 321.84 cv
347.972 321.576 347.984 321.3 347.984 321.012 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
398.164 309.6 mo
398.164 7.19998 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
398.164 309.6 mo
398.164 313.1 li
f
398.164 309.6 mo
398.164 313.1 li
@
397.69 322.296 mo
397.69 322.632 397.63 322.956 397.534 323.268 cv
397.438 323.58 397.282 323.856 397.066 324.096 cv
396.85 324.336 396.586 324.516 396.262 324.648 cv
395.938 324.78 395.554 324.852 395.122 324.852 cv
394.798 324.852 394.522 324.816 394.282 324.744 cv
394.042 324.672 393.826 324.564 393.646 324.42 cv
393.466 324.276 393.322 324.108 393.202 323.892 cv
393.082 323.676 392.986 323.436 392.914 323.16 cv
392.842 322.896 392.782 322.596 392.758 322.272 cv
392.722 321.96 392.71 321.612 392.71 321.252 cv
392.71 320.928 392.722 320.604 392.758 320.268 cv
392.794 319.932 392.854 319.62 392.95 319.308 cv
393.034 318.996 393.154 318.708 393.31 318.432 cv
393.466 318.168 393.658 317.928 393.898 317.724 cv
394.126 317.532 394.402 317.364 394.726 317.244 cv
395.05 317.124 395.434 317.064 395.866 317.064 cv
396.01 317.064 396.154 317.076 396.298 317.1 cv
396.442 317.124 396.586 317.148 396.706 317.172 cv
396.826 317.196 396.934 317.232 397.03 317.268 cv
397.198 317.352 li
397.258 317.424 li
397.294 317.508 li
397.306 317.604 li
397.318 317.736 li
397.318 317.928 li
397.294 318.048 li
397.234 318.108 li
397.15 318.132 li
396.97 318.096 li
396.898 318.072 396.802 318.036 396.706 318 cv
396.598 317.976 396.466 317.94 396.322 317.916 cv
396.166 317.892 395.998 317.868 395.806 317.868 cv
395.434 317.868 395.122 317.952 394.858 318.096 cv
394.594 318.24 394.39 318.444 394.222 318.696 cv
394.054 318.948 393.922 319.236 393.85 319.56 cv
393.766 319.896 393.718 320.232 393.718 320.592 cv
393.814 320.544 393.922 320.484 394.054 320.424 cv
394.174 320.364 394.318 320.316 394.474 320.268 cv
394.618 320.22 394.786 320.184 394.954 320.148 cv
395.122 320.124 395.302 320.1 395.494 320.1 cv
395.902 320.1 396.238 320.16 396.526 320.268 cv
396.802 320.388 397.03 320.544 397.21 320.736 cv
397.378 320.928 397.51 321.168 397.582 321.432 cv
397.654 321.696 397.69 321.984 397.69 322.296 cv
cp
396.67 322.392 mo
396.67 322.176 396.646 321.972 396.598 321.78 cv
396.55 321.6 396.478 321.444 396.382 321.312 cv
396.274 321.18 396.13 321.084 395.962 321.012 cv
395.782 320.94 395.566 320.904 395.314 320.904 cv
395.158 320.904 395.014 320.916 394.87 320.94 cv
394.726 320.964 394.582 321 394.45 321.048 cv
394.318 321.096 394.186 321.144 394.066 321.204 cv
393.946 321.264 393.826 321.324 393.73 321.396 cv
393.73 321.9 393.754 322.332 393.826 322.668 cv
393.886 323.004 393.982 323.28 394.102 323.484 cv
394.222 323.688 394.378 323.832 394.57 323.916 cv
394.75 324.012 394.966 324.048 395.218 324.048 cv
395.458 324.048 395.674 324.012 395.866 323.916 cv
396.046 323.82 396.202 323.7 396.322 323.532 cv
396.442 323.376 396.526 323.196 396.586 323.004 cv
396.634 322.812 396.67 322.608 396.67 322.392 cv
cp
f
403.834 320.952 mo
403.834 321.528 403.786 322.056 403.69 322.536 cv
403.594 323.016 403.45 323.436 403.234 323.784 cv
403.018 324.132 402.742 324.396 402.406 324.576 cv
402.058 324.756 401.638 324.852 401.134 324.852 cv
400.654 324.852 400.258 324.768 399.934 324.612 cv
399.598 324.444 399.334 324.204 399.142 323.868 cv
398.938 323.532 398.794 323.124 398.71 322.644 cv
398.626 322.164 398.59 321.612 398.59 320.988 cv
398.59 320.412 398.638 319.872 398.734 319.392 cv
398.83 318.912 398.974 318.504 399.19 318.156 cv
399.394 317.808 399.67 317.544 400.018 317.352 cv
400.354 317.16 400.786 317.064 401.29 317.064 cv
401.77 317.064 402.166 317.148 402.49 317.316 cv
402.814 317.484 403.078 317.736 403.282 318.072 cv
403.474 318.408 403.618 318.804 403.702 319.284 cv
403.786 319.764 403.834 320.328 403.834 320.952 cv
cp
402.802 321.012 mo
402.802 320.64 402.778 320.304 402.754 320.004 cv
402.73 319.704 402.682 319.44 402.634 319.2 cv
402.586 318.972 402.514 318.78 402.43 318.612 cv
402.346 318.444 402.25 318.312 402.13 318.204 cv
402.01 318.096 401.878 318.012 401.734 317.964 cv
401.578 317.916 401.41 317.892 401.23 317.892 cv
400.894 317.892 400.618 317.976 400.414 318.132 cv
400.21 318.288 400.054 318.504 399.934 318.768 cv
399.814 319.044 399.73 319.368 399.682 319.728 cv
399.634 320.1 399.622 320.496 399.622 320.916 cv
399.622 321.48 399.646 321.96 399.706 322.356 cv
399.766 322.764 399.862 323.088 399.982 323.328 cv
400.102 323.58 400.27 323.76 400.474 323.868 cv
400.666 323.988 400.906 324.036 401.194 324.036 cv
401.41 324.036 401.602 324.012 401.77 323.94 cv
401.938 323.868 402.082 323.772 402.202 323.64 cv
402.322 323.508 402.418 323.352 402.49 323.16 cv
402.562 322.98 402.634 322.776 402.682 322.56 cv
402.73 322.344 402.754 322.104 402.778 321.84 cv
402.79 321.576 402.802 321.3 402.802 321.012 cv
cp
f
219.832 338.633 mo
219.82 338.825 li
219.772 338.957 li
219.7 339.029 li
219.616 339.053 li
215.98 339.053 li
215.884 339.053 215.8 339.029 215.728 338.969 cv
215.644 338.909 215.608 338.801 215.608 338.645 cv
215.608 331.877 li
215.608 331.733 215.644 331.625 215.728 331.565 cv
215.8 331.505 215.884 331.469 215.98 331.469 cv
219.58 331.469 li
219.664 331.493 li
219.724 331.577 li
219.76 331.709 li
219.784 331.901 li
219.76 332.093 li
219.724 332.213 li
219.664 332.285 li
219.58 332.309 li
216.616 332.309 li
216.616 334.685 li
219.16 334.685 li
219.244 334.721 li
219.304 334.793 li
219.34 334.913 li
219.352 335.105 li
219.34 335.297 li
219.304 335.417 li
219.244 335.489 li
219.16 335.501 li
216.616 335.501 li
216.616 338.213 li
219.616 338.213 li
219.7 338.237 li
219.772 338.309 li
219.82 338.441 li
219.832 338.633 li
cp
f
226.204 336.185 mo
226.204 336.653 226.144 337.073 226.048 337.433 cv
225.952 337.805 225.808 338.117 225.616 338.369 cv
225.424 338.633 225.184 338.825 224.896 338.957 cv
224.608 339.077 224.284 339.149 223.924 339.149 cv
223.756 339.149 223.612 339.125 223.48 339.101 cv
223.348 339.065 223.216 339.029 223.096 338.969 cv
222.964 338.909 222.832 338.825 222.712 338.717 cv
222.592 338.621 222.46 338.501 222.316 338.357 cv
222.316 340.985 li
222.292 341.069 li
222.22 341.129 li
222.076 341.165 li
222.004 341.165 221.932 341.177 221.836 341.177 cv
221.74 341.177 221.656 341.165 221.596 341.165 cv
221.44 341.129 li
221.368 341.069 li
221.356 340.985 li
221.356 333.629 li
221.368 333.557 li
221.44 333.497 li
221.572 333.461 li
221.776 333.449 li
221.968 333.461 li
222.1 333.497 li
222.184 333.557 li
222.208 333.629 li
222.208 334.337 li
222.364 334.181 222.52 334.037 222.664 333.917 cv
222.808 333.797 222.964 333.701 223.108 333.617 cv
223.252 333.545 223.408 333.485 223.576 333.437 cv
223.732 333.389 223.9 333.365 224.08 333.365 cv
224.464 333.365 224.788 333.449 225.052 333.593 cv
225.316 333.737 225.544 333.941 225.712 334.205 cv
225.88 334.469 226 334.769 226.084 335.105 cv
226.156 335.441 226.204 335.801 226.204 336.185 cv
cp
225.184 336.305 mo
225.184 336.041 225.16 335.777 225.124 335.525 cv
225.076 335.273 225.004 335.045 224.908 334.853 cv
224.812 334.661 224.68 334.505 224.512 334.385 cv
224.344 334.265 224.128 334.205 223.888 334.205 cv
223.756 334.205 223.636 334.229 223.516 334.265 cv
223.396 334.301 223.264 334.361 223.144 334.433 cv
223.012 334.517 222.88 334.625 222.748 334.757 cv
222.604 334.889 222.46 335.045 222.316 335.237 cv
222.316 337.325 li
222.58 337.661 222.832 337.913 223.072 338.081 cv
223.312 338.249 223.564 338.333 223.828 338.333 cv
224.068 338.333 224.272 338.285 224.44 338.165 cv
224.608 338.045 224.752 337.889 224.86 337.697 cv
224.968 337.505 225.052 337.277 225.1 337.037 cv
225.148 336.797 225.184 336.545 225.184 336.305 cv
cp
f
228.616 338.909 mo
228.592 338.993 li
228.52 339.041 li
228.376 339.065 li
228.304 339.065 228.232 339.077 228.136 339.077 cv
228.04 339.077 227.956 339.065 227.896 339.065 cv
227.74 339.041 li
227.668 338.993 li
227.656 338.909 li
227.656 333.629 li
227.668 333.557 li
227.74 333.497 li
227.896 333.461 li
227.956 333.461 228.04 333.449 228.136 333.449 cv
228.232 333.449 228.304 333.461 228.376 333.461 cv
228.52 333.497 li
228.592 333.557 li
228.616 333.629 li
228.616 338.909 li
cp
228.736 331.853 mo
228.736 332.081 228.688 332.237 228.604 332.321 cv
228.508 332.405 228.352 332.441 228.124 332.441 cv
227.896 332.441 227.74 332.405 227.656 332.321 cv
227.572 332.249 227.536 332.093 227.536 331.865 cv
227.536 331.649 227.572 331.493 227.656 331.409 cv
227.74 331.325 227.896 331.277 228.136 331.277 cv
228.364 331.277 228.52 331.325 228.604 331.397 cv
228.688 331.481 228.736 331.637 228.736 331.853 cv
cp
f
233.716 337.469 mo
233.716 337.745 233.656 337.985 233.56 338.201 cv
233.464 338.417 233.32 338.585 233.14 338.729 cv
232.948 338.873 232.732 338.981 232.48 339.053 cv
232.216 339.113 231.94 339.149 231.64 339.149 cv
231.448 339.149 231.268 339.125 231.1 339.101 cv
230.932 339.077 230.776 339.053 230.644 339.005 cv
230.512 338.969 230.404 338.921 230.308 338.873 cv
230.212 338.825 230.14 338.789 230.092 338.741 cv
230.008 338.573 li
229.984 338.501 229.984 338.405 229.984 338.285 cv
229.996 338.105 li
230.02 337.973 li
230.068 337.913 li
230.14 337.889 li
230.332 337.973 li
230.416 338.021 230.524 338.081 230.644 338.141 cv
230.764 338.213 230.908 338.273 231.076 338.321 cv
231.244 338.369 231.436 338.393 231.664 338.393 cv
231.82 338.393 231.964 338.381 232.096 338.345 cv
232.228 338.309 232.348 338.261 232.444 338.189 cv
232.54 338.117 232.624 338.033 232.672 337.925 cv
232.72 337.829 232.756 337.697 232.756 337.553 cv
232.756 337.409 232.708 337.277 232.636 337.181 cv
232.564 337.085 232.456 336.989 232.336 336.905 cv
232.216 336.833 232.072 336.761 231.916 336.701 cv
231.76 336.641 231.604 336.581 231.436 336.509 cv
231.268 336.437 231.1 336.365 230.944 336.281 cv
230.788 336.197 230.644 336.089 230.524 335.969 cv
230.392 335.849 230.284 335.705 230.212 335.537 cv
230.14 335.369 230.104 335.177 230.104 334.937 cv
230.104 334.733 230.14 334.529 230.224 334.337 cv
230.296 334.145 230.416 333.989 230.584 333.845 cv
230.74 333.701 230.944 333.593 231.184 333.497 cv
231.424 333.413 231.7 333.365 232.024 333.365 cv
232.168 333.365 232.3 333.377 232.444 333.401 cv
232.588 333.425 232.708 333.461 232.828 333.497 cv
232.948 333.533 233.044 333.569 233.128 333.605 cv
233.308 333.713 li
233.38 333.797 li
233.416 333.881 li
233.428 333.989 li
233.44 334.145 li
233.428 334.313 li
233.404 334.433 li
233.344 334.505 li
233.284 334.529 li
233.128 334.469 li
233.056 334.421 232.972 334.373 232.876 334.325 cv
232.768 334.277 232.648 334.241 232.504 334.193 cv
232.36 334.145 232.192 334.121 232.012 334.121 cv
231.844 334.121 231.7 334.145 231.58 334.181 cv
231.46 334.217 231.352 334.265 231.28 334.337 cv
231.196 334.409 231.136 334.481 231.088 334.577 cv
231.04 334.673 231.028 334.781 231.028 334.877 cv
231.028 335.033 231.064 335.165 231.148 335.261 cv
231.22 335.369 231.328 335.465 231.448 335.537 cv
231.568 335.621 231.712 335.693 231.88 335.753 cv
232.036 335.813 232.204 335.873 232.372 335.945 cv
232.54 336.017 232.696 336.089 232.864 336.173 cv
233.02 336.257 233.164 336.353 233.296 336.473 cv
233.416 336.593 233.524 336.725 233.596 336.893 cv
233.668 337.061 233.716 337.253 233.716 337.469 cv
cp
f
239.992 336.209 mo
239.992 336.641 239.932 337.037 239.824 337.397 cv
239.704 337.757 239.536 338.069 239.32 338.333 cv
239.092 338.597 238.804 338.801 238.468 338.945 cv
238.132 339.077 237.736 339.149 237.304 339.149 cv
236.872 339.149 236.488 339.089 236.164 338.969 cv
235.84 338.849 235.576 338.657 235.36 338.417 cv
235.144 338.177 234.976 337.877 234.88 337.517 cv
234.772 337.169 234.724 336.773 234.724 336.317 cv
234.724 335.885 234.772 335.489 234.892 335.129 cv
235 334.769 235.168 334.457 235.396 334.193 cv
235.612 333.929 235.9 333.725 236.236 333.581 cv
236.572 333.437 236.956 333.365 237.412 333.365 cv
237.844 333.365 238.216 333.437 238.54 333.569 cv
238.864 333.701 239.14 333.893 239.356 334.133 cv
239.572 334.373 239.728 334.673 239.836 335.021 cv
239.932 335.381 239.992 335.777 239.992 336.209 cv
cp
238.972 336.281 mo
238.972 335.993 238.936 335.729 238.888 335.465 cv
238.84 335.213 238.756 334.997 238.636 334.805 cv
238.516 334.613 238.348 334.469 238.144 334.349 cv
237.928 334.241 237.676 334.181 237.376 334.181 cv
237.088 334.181 236.836 334.241 236.632 334.337 cv
236.428 334.433 236.26 334.577 236.128 334.769 cv
235.996 334.961 235.9 335.177 235.828 335.429 cv
235.756 335.681 235.732 335.957 235.732 336.257 cv
235.732 336.545 235.756 336.821 235.816 337.073 cv
235.864 337.325 235.96 337.541 236.08 337.733 cv
236.2 337.925 236.356 338.081 236.572 338.189 cv
236.776 338.297 237.04 338.345 237.352 338.345 cv
237.628 338.345 237.868 338.297 238.084 338.201 cv
238.288 338.105 238.456 337.961 238.588 337.769 cv
238.72 337.589 238.816 337.373 238.876 337.121 cv
238.936 336.869 238.972 336.593 238.972 336.281 cv
cp
f
245.932 338.909 mo
245.908 338.993 li
245.836 339.041 li
245.704 339.065 li
245.512 339.077 li
245.308 339.065 li
245.164 339.041 li
245.092 338.993 li
245.068 338.909 li
245.068 338.213 li
244.792 338.513 244.504 338.741 244.204 338.909 cv
243.904 339.065 243.58 339.149 243.232 339.149 cv
242.836 339.149 242.5 339.077 242.236 338.933 cv
241.96 338.789 241.732 338.597 241.564 338.333 cv
241.396 338.081 241.264 337.781 241.192 337.433 cv
241.12 337.085 241.084 336.713 241.084 336.329 cv
241.084 335.885 241.132 335.477 241.228 335.105 cv
241.324 334.745 241.468 334.433 241.66 334.169 cv
241.852 333.917 242.08 333.725 242.368 333.581 cv
242.656 333.437 242.98 333.365 243.352 333.365 cv
243.664 333.365 243.94 333.437 244.204 333.569 cv
244.456 333.713 244.708 333.905 244.96 334.169 cv
244.96 331.097 li
244.984 331.025 li
245.056 330.965 li
245.2 330.929 li
245.26 330.929 245.344 330.917 245.44 330.917 cv
245.536 330.917 245.608 330.929 245.68 330.929 cv
245.824 330.965 li
245.908 331.025 li
245.932 331.097 li
245.932 338.909 li
cp
244.96 335.201 mo
244.696 334.877 244.432 334.625 244.192 334.457 cv
243.952 334.289 243.7 334.205 243.436 334.205 cv
243.184 334.205 242.968 334.265 242.8 334.385 cv
242.632 334.505 242.488 334.649 242.392 334.841 cv
242.284 335.033 242.2 335.249 242.152 335.489 cv
242.104 335.729 242.08 335.981 242.08 336.233 cv
242.08 336.497 242.092 336.761 242.14 337.013 cv
242.188 337.265 242.26 337.493 242.356 337.685 cv
242.452 337.889 242.596 338.045 242.764 338.165 cv
242.932 338.285 243.136 338.333 243.4 338.333 cv
243.52 338.333 243.652 338.321 243.772 338.285 cv
243.892 338.261 244.012 338.201 244.132 338.117 cv
244.252 338.033 244.384 337.925 244.528 337.793 cv
244.66 337.661 244.804 337.493 244.96 337.301 cv
244.96 335.201 li
cp
f
252.22 336.041 mo
252.22 336.197 252.172 336.305 252.1 336.365 cv
252.028 336.437 251.932 336.461 251.836 336.461 cv
248.38 336.461 li
248.38 336.761 248.404 337.025 248.464 337.253 cv
248.524 337.493 248.62 337.685 248.764 337.853 cv
248.896 338.021 249.076 338.153 249.292 338.249 cv
249.508 338.345 249.784 338.381 250.096 338.381 cv
250.348 338.381 250.576 338.369 250.768 338.321 cv
250.96 338.285 251.128 338.237 251.272 338.189 cv
251.416 338.141 251.524 338.093 251.62 338.045 cv
251.716 338.009 251.788 337.985 251.836 337.985 cv
251.908 338.009 li
251.956 338.069 li
251.98 338.177 li
251.992 338.357 li
251.98 338.489 li
251.968 338.597 li
251.944 338.669 li
251.884 338.741 li
251.86 338.765 251.8 338.789 251.704 338.837 cv
251.596 338.885 251.464 338.933 251.296 338.981 cv
251.128 339.029 250.924 339.065 250.708 339.101 cv
250.48 339.125 250.24 339.149 250 339.149 cv
249.568 339.149 249.184 339.089 248.86 338.981 cv
248.524 338.861 248.248 338.681 248.032 338.441 cv
247.816 338.201 247.648 337.913 247.528 337.553 cv
247.408 337.193 247.36 336.773 247.36 336.293 cv
247.36 335.837 247.42 335.429 247.54 335.069 cv
247.66 334.709 247.828 334.409 248.044 334.157 cv
248.26 333.905 248.536 333.713 248.848 333.569 cv
249.16 333.437 249.508 333.365 249.892 333.365 cv
250.3 333.365 250.66 333.437 250.948 333.569 cv
251.236 333.713 251.476 333.893 251.668 334.109 cv
251.86 334.337 251.992 334.601 252.088 334.901 cv
252.172 335.201 252.22 335.525 252.22 335.861 cv
252.22 336.041 li
cp
251.248 335.753 mo
251.248 335.249 251.14 334.853 250.9 334.565 cv
250.66 334.277 250.312 334.121 249.856 334.121 cv
249.616 334.121 249.4 334.169 249.22 334.265 cv
249.04 334.361 248.896 334.481 248.776 334.625 cv
248.656 334.769 248.56 334.949 248.488 335.141 cv
248.416 335.333 248.38 335.537 248.38 335.753 cv
251.248 335.753 li
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
52.8094 268.748 mo
414.609 268.748 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 268.748 mo
49.3094 268.748 li
f
52.8094 268.748 mo
49.3094 268.748 li
@
32.951 270.39 mo
32.951 270.798 32.879 271.17 32.747 271.482 cv
32.603 271.794 32.411 272.058 32.171 272.274 cv
31.919 272.49 31.619 272.658 31.271 272.766 cv
30.923 272.862 30.539 272.922 30.119 272.922 cv
29.879 272.922 29.663 272.898 29.447 272.874 cv
29.231 272.838 29.051 272.814 28.883 272.766 cv
28.715 272.718 28.583 272.67 28.487 272.622 cv
28.379 272.574 28.307 272.538 28.283 272.514 cv
28.223 272.43 li
28.187 272.346 li
28.163 272.226 li
28.163 272.046 li
28.175 271.866 li
28.211 271.734 li
28.259 271.662 li
28.331 271.638 li
28.511 271.71 li
28.595 271.758 28.703 271.818 28.847 271.866 cv
28.991 271.926 29.159 271.986 29.363 272.034 cv
29.567 272.082 29.807 272.106 30.095 272.106 cv
30.359 272.106 30.599 272.082 30.815 272.01 cv
31.031 271.95 31.211 271.854 31.379 271.722 cv
31.535 271.59 31.655 271.422 31.751 271.218 cv
31.835 271.026 31.883 270.774 31.883 270.486 cv
31.883 270.246 31.835 270.03 31.763 269.838 cv
31.691 269.658 31.571 269.502 31.415 269.382 cv
31.259 269.262 31.055 269.166 30.815 269.106 cv
30.575 269.046 30.287 269.01 29.951 269.01 cv
29.711 269.01 29.495 269.022 29.327 269.046 cv
29.159 269.07 29.003 269.082 28.859 269.082 cv
28.739 269.082 28.667 269.058 28.619 269.01 cv
28.571 268.962 28.559 268.854 28.559 268.71 cv
28.559 265.626 li
28.559 265.506 28.583 265.41 28.643 265.338 cv
28.703 265.278 28.787 265.242 28.907 265.242 cv
32.267 265.242 li
32.351 265.278 li
32.423 265.35 li
32.471 265.482 li
32.483 265.674 li
32.483 265.818 32.459 265.938 32.423 266.01 cv
32.267 266.118 li
29.435 266.118 li
29.435 268.254 li
29.567 268.23 29.711 268.218 29.855 268.218 cv
29.999 268.218 30.155 268.206 30.347 268.206 cv
30.779 268.206 31.151 268.266 31.475 268.362 cv
31.799 268.47 32.075 268.614 32.291 268.806 cv
32.507 268.998 32.663 269.226 32.783 269.49 cv
32.891 269.766 32.951 270.066 32.951 270.39 cv
cp
f
39.323 269.022 mo
39.323 269.598 39.275 270.126 39.179 270.606 cv
39.083 271.086 38.939 271.506 38.723 271.854 cv
38.507 272.202 38.231 272.466 37.895 272.646 cv
37.547 272.826 37.127 272.922 36.623 272.922 cv
36.143 272.922 35.747 272.838 35.423 272.682 cv
35.087 272.514 34.823 272.274 34.631 271.938 cv
34.427 271.602 34.283 271.194 34.199 270.714 cv
34.115 270.234 34.079 269.682 34.079 269.058 cv
34.079 268.482 34.127 267.942 34.223 267.462 cv
34.319 266.982 34.463 266.574 34.679 266.226 cv
34.883 265.878 35.159 265.614 35.507 265.422 cv
35.843 265.23 36.275 265.134 36.779 265.134 cv
37.259 265.134 37.655 265.218 37.979 265.386 cv
38.303 265.554 38.567 265.806 38.771 266.142 cv
38.963 266.478 39.107 266.874 39.191 267.354 cv
39.275 267.834 39.323 268.398 39.323 269.022 cv
cp
38.291 269.082 mo
38.291 268.71 38.267 268.374 38.243 268.074 cv
38.219 267.774 38.171 267.51 38.123 267.27 cv
38.075 267.042 38.003 266.85 37.919 266.682 cv
37.835 266.514 37.739 266.382 37.619 266.274 cv
37.499 266.166 37.367 266.082 37.223 266.034 cv
37.067 265.986 36.899 265.962 36.719 265.962 cv
36.383 265.962 36.107 266.046 35.903 266.202 cv
35.699 266.358 35.543 266.574 35.423 266.838 cv
35.303 267.114 35.219 267.438 35.171 267.798 cv
35.123 268.17 35.111 268.566 35.111 268.986 cv
35.111 269.55 35.135 270.03 35.195 270.426 cv
35.255 270.834 35.351 271.158 35.471 271.398 cv
35.591 271.65 35.759 271.83 35.963 271.938 cv
36.155 272.058 36.395 272.106 36.683 272.106 cv
36.899 272.106 37.091 272.082 37.259 272.01 cv
37.427 271.938 37.571 271.842 37.691 271.71 cv
37.811 271.578 37.907 271.422 37.979 271.23 cv
38.051 271.05 38.123 270.846 38.171 270.63 cv
38.219 270.414 38.243 270.174 38.267 269.91 cv
38.279 269.646 38.291 269.37 38.291 269.082 cv
cp
f
45.4071 269.022 mo
45.4071 269.598 45.3591 270.126 45.2631 270.606 cv
45.1671 271.086 45.0231 271.506 44.8071 271.854 cv
44.5911 272.202 44.3151 272.466 43.9791 272.646 cv
43.6311 272.826 43.2111 272.922 42.7071 272.922 cv
42.2271 272.922 41.8311 272.838 41.5071 272.682 cv
41.1711 272.514 40.9071 272.274 40.7151 271.938 cv
40.5111 271.602 40.3671 271.194 40.2831 270.714 cv
40.1991 270.234 40.1631 269.682 40.1631 269.058 cv
40.1631 268.482 40.2111 267.942 40.3071 267.462 cv
40.4031 266.982 40.5471 266.574 40.7631 266.226 cv
40.9671 265.878 41.2431 265.614 41.5911 265.422 cv
41.9271 265.23 42.3591 265.134 42.8631 265.134 cv
43.3431 265.134 43.7391 265.218 44.0631 265.386 cv
44.3871 265.554 44.6511 265.806 44.8551 266.142 cv
45.0471 266.478 45.1911 266.874 45.2751 267.354 cv
45.3591 267.834 45.4071 268.398 45.4071 269.022 cv
cp
44.3751 269.082 mo
44.3751 268.71 44.3511 268.374 44.3271 268.074 cv
44.3031 267.774 44.2551 267.51 44.2071 267.27 cv
44.1591 267.042 44.0871 266.85 44.0031 266.682 cv
43.9191 266.514 43.8231 266.382 43.7031 266.274 cv
43.5831 266.166 43.4511 266.082 43.3071 266.034 cv
43.1511 265.986 42.9831 265.962 42.8031 265.962 cv
42.4671 265.962 42.1911 266.046 41.9871 266.202 cv
41.7831 266.358 41.6271 266.574 41.5071 266.838 cv
41.3871 267.114 41.3031 267.438 41.2551 267.798 cv
41.2071 268.17 41.1951 268.566 41.1951 268.986 cv
41.1951 269.55 41.2191 270.03 41.2791 270.426 cv
41.3391 270.834 41.4351 271.158 41.5551 271.398 cv
41.6751 271.65 41.8431 271.83 42.0471 271.938 cv
42.2391 272.058 42.4791 272.106 42.7671 272.106 cv
42.9831 272.106 43.1751 272.082 43.3431 272.01 cv
43.5111 271.938 43.6551 271.842 43.7751 271.71 cv
43.8951 271.578 43.9911 271.422 44.0631 271.23 cv
44.1351 271.05 44.2071 270.846 44.2551 270.63 cv
44.3031 270.414 44.3271 270.174 44.3511 269.91 cv
44.3631 269.646 44.3751 269.37 44.3751 269.082 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
52.8094 215.388 mo
414.609 215.388 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 215.388 mo
49.3094 215.388 li
f
52.8094 215.388 mo
49.3094 215.388 li
@
26.9329 219.07 mo
26.9089 219.262 li
26.8609 219.382 li
26.7889 219.454 li
26.7169 219.466 li
22.7569 219.466 li
22.6849 219.454 li
22.6129 219.382 li
22.5529 219.262 li
22.5409 219.07 li
22.5529 218.89 li
22.6009 218.758 li
22.6729 218.686 li
22.7569 218.662 li
24.3409 218.662 li
24.3409 212.89 li
22.8769 213.766 li
22.6849 213.838 li
22.5769 213.814 li
22.5289 213.682 li
22.5169 213.634 22.5169 213.562 22.5169 213.466 cv
22.5169 213.286 li
22.5409 213.178 li
22.6009 213.094 li
22.6849 213.022 li
24.4369 211.906 li
24.4849 211.87 li
24.5689 211.846 li
24.7009 211.834 li
24.8809 211.834 li
25.1089 211.846 li
25.2529 211.882 li
25.3249 211.93 li
25.3489 211.99 li
25.3489 218.662 li
26.7169 218.662 li
26.8009 218.686 li
26.8729 218.758 li
26.9089 218.89 li
26.9329 219.07 li
cp
f
33.2449 215.662 mo
33.2449 216.238 33.1969 216.766 33.1009 217.246 cv
33.0049 217.726 32.8609 218.146 32.6449 218.494 cv
32.4289 218.842 32.1529 219.106 31.8169 219.286 cv
31.4689 219.466 31.0489 219.562 30.5449 219.562 cv
30.0649 219.562 29.6689 219.478 29.3449 219.322 cv
29.0089 219.154 28.7449 218.914 28.5529 218.578 cv
28.3489 218.242 28.2049 217.834 28.1209 217.354 cv
28.0369 216.874 28.0009 216.322 28.0009 215.698 cv
28.0009 215.122 28.0489 214.582 28.1449 214.102 cv
28.2409 213.622 28.3849 213.214 28.6009 212.866 cv
28.8049 212.518 29.0809 212.254 29.4289 212.062 cv
29.7649 211.87 30.1969 211.774 30.7009 211.774 cv
31.1809 211.774 31.5769 211.858 31.9009 212.026 cv
32.2249 212.194 32.4889 212.446 32.6929 212.782 cv
32.8849 213.118 33.0289 213.514 33.1129 213.994 cv
33.1969 214.474 33.2449 215.038 33.2449 215.662 cv
cp
32.2129 215.722 mo
32.2129 215.35 32.1889 215.014 32.1649 214.714 cv
32.1409 214.414 32.0929 214.15 32.0449 213.91 cv
31.9969 213.682 31.9249 213.49 31.8409 213.322 cv
31.7569 213.154 31.6609 213.022 31.5409 212.914 cv
31.4209 212.806 31.2889 212.722 31.1449 212.674 cv
30.9889 212.626 30.8209 212.602 30.6409 212.602 cv
30.3049 212.602 30.0289 212.686 29.8249 212.842 cv
29.6209 212.998 29.4649 213.214 29.3449 213.478 cv
29.2249 213.754 29.1409 214.078 29.0929 214.438 cv
29.0449 214.81 29.0329 215.206 29.0329 215.626 cv
29.0329 216.19 29.0569 216.67 29.1169 217.066 cv
29.1769 217.474 29.2729 217.798 29.3929 218.038 cv
29.5129 218.29 29.6809 218.47 29.8849 218.578 cv
30.0769 218.698 30.3169 218.746 30.6049 218.746 cv
30.8209 218.746 31.0129 218.722 31.1809 218.65 cv
31.3489 218.578 31.4929 218.482 31.6129 218.35 cv
31.7329 218.218 31.8289 218.062 31.9009 217.87 cv
31.9729 217.69 32.0449 217.486 32.0929 217.27 cv
32.1409 217.054 32.1649 216.814 32.1889 216.55 cv
32.2009 216.286 32.2129 216.01 32.2129 215.722 cv
cp
f
39.329 215.662 mo
39.329 216.238 39.281 216.766 39.185 217.246 cv
39.089 217.726 38.945 218.146 38.729 218.494 cv
38.513 218.842 38.237 219.106 37.901 219.286 cv
37.553 219.466 37.133 219.562 36.629 219.562 cv
36.149 219.562 35.753 219.478 35.429 219.322 cv
35.093 219.154 34.829 218.914 34.637 218.578 cv
34.433 218.242 34.289 217.834 34.205 217.354 cv
34.121 216.874 34.085 216.322 34.085 215.698 cv
34.085 215.122 34.133 214.582 34.229 214.102 cv
34.325 213.622 34.469 213.214 34.685 212.866 cv
34.889 212.518 35.165 212.254 35.513 212.062 cv
35.849 211.87 36.281 211.774 36.785 211.774 cv
37.265 211.774 37.661 211.858 37.985 212.026 cv
38.309 212.194 38.573 212.446 38.777 212.782 cv
38.969 213.118 39.113 213.514 39.197 213.994 cv
39.281 214.474 39.329 215.038 39.329 215.662 cv
cp
38.297 215.722 mo
38.297 215.35 38.273 215.014 38.249 214.714 cv
38.225 214.414 38.177 214.15 38.129 213.91 cv
38.081 213.682 38.009 213.49 37.925 213.322 cv
37.841 213.154 37.745 213.022 37.625 212.914 cv
37.505 212.806 37.373 212.722 37.229 212.674 cv
37.073 212.626 36.905 212.602 36.725 212.602 cv
36.389 212.602 36.113 212.686 35.909 212.842 cv
35.705 212.998 35.549 213.214 35.429 213.478 cv
35.309 213.754 35.225 214.078 35.177 214.438 cv
35.129 214.81 35.117 215.206 35.117 215.626 cv
35.117 216.19 35.141 216.67 35.201 217.066 cv
35.261 217.474 35.357 217.798 35.477 218.038 cv
35.597 218.29 35.765 218.47 35.969 218.578 cv
36.161 218.698 36.401 218.746 36.689 218.746 cv
36.905 218.746 37.097 218.722 37.265 218.65 cv
37.433 218.578 37.577 218.482 37.697 218.35 cv
37.817 218.218 37.913 218.062 37.985 217.87 cv
38.057 217.69 38.129 217.486 38.177 217.27 cv
38.225 217.054 38.249 216.814 38.273 216.55 cv
38.285 216.286 38.297 216.01 38.297 215.722 cv
cp
f
45.413 215.662 mo
45.413 216.238 45.365 216.766 45.269 217.246 cv
45.173 217.726 45.029 218.146 44.813 218.494 cv
44.597 218.842 44.321 219.106 43.985 219.286 cv
43.637 219.466 43.217 219.562 42.713 219.562 cv
42.233 219.562 41.837 219.478 41.513 219.322 cv
41.177 219.154 40.913 218.914 40.721 218.578 cv
40.517 218.242 40.373 217.834 40.289 217.354 cv
40.205 216.874 40.169 216.322 40.169 215.698 cv
40.169 215.122 40.217 214.582 40.313 214.102 cv
40.409 213.622 40.553 213.214 40.769 212.866 cv
40.973 212.518 41.249 212.254 41.597 212.062 cv
41.933 211.87 42.365 211.774 42.869 211.774 cv
43.349 211.774 43.745 211.858 44.069 212.026 cv
44.393 212.194 44.657 212.446 44.861 212.782 cv
45.053 213.118 45.197 213.514 45.281 213.994 cv
45.365 214.474 45.413 215.038 45.413 215.662 cv
cp
44.381 215.722 mo
44.381 215.35 44.357 215.014 44.333 214.714 cv
44.309 214.414 44.261 214.15 44.213 213.91 cv
44.165 213.682 44.093 213.49 44.009 213.322 cv
43.925 213.154 43.829 213.022 43.709 212.914 cv
43.589 212.806 43.457 212.722 43.313 212.674 cv
43.157 212.626 42.989 212.602 42.809 212.602 cv
42.473 212.602 42.197 212.686 41.993 212.842 cv
41.789 212.998 41.633 213.214 41.513 213.478 cv
41.393 213.754 41.309 214.078 41.261 214.438 cv
41.213 214.81 41.201 215.206 41.201 215.626 cv
41.201 216.19 41.225 216.67 41.285 217.066 cv
41.345 217.474 41.441 217.798 41.561 218.038 cv
41.681 218.29 41.849 218.47 42.053 218.578 cv
42.245 218.698 42.485 218.746 42.773 218.746 cv
42.989 218.746 43.181 218.722 43.349 218.65 cv
43.517 218.578 43.661 218.482 43.781 218.35 cv
43.901 218.218 43.997 218.062 44.069 217.87 cv
44.141 217.69 44.213 217.486 44.261 217.27 cv
44.309 217.054 44.333 216.814 44.357 216.55 cv
44.369 216.286 44.381 216.01 44.381 215.722 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
52.8094 162.028 mo
414.609 162.028 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 162.028 mo
49.3094 162.028 li
f
52.8094 162.028 mo
49.3094 162.028 li
@
26.9329 165.711 mo
26.9089 165.903 li
26.8609 166.023 li
26.7889 166.095 li
26.7169 166.107 li
22.7569 166.107 li
22.6849 166.095 li
22.6129 166.023 li
22.5529 165.903 li
22.5409 165.711 li
22.5529 165.531 li
22.6009 165.399 li
22.6729 165.327 li
22.7569 165.303 li
24.3409 165.303 li
24.3409 159.531 li
22.8769 160.407 li
22.6849 160.479 li
22.5769 160.455 li
22.5289 160.323 li
22.5169 160.275 22.5169 160.203 22.5169 160.107 cv
22.5169 159.927 li
22.5409 159.819 li
22.6009 159.735 li
22.6849 159.663 li
24.4369 158.547 li
24.4849 158.511 li
24.5689 158.487 li
24.7009 158.475 li
24.8809 158.475 li
25.1089 158.487 li
25.2529 158.523 li
25.3249 158.571 li
25.3489 158.631 li
25.3489 165.303 li
26.7169 165.303 li
26.8009 165.327 li
26.8729 165.399 li
26.9089 165.531 li
26.9329 165.711 li
cp
f
32.9569 163.671 mo
32.9569 164.079 32.8849 164.451 32.7529 164.763 cv
32.6089 165.075 32.4169 165.339 32.1769 165.555 cv
31.9249 165.771 31.6249 165.939 31.2769 166.047 cv
30.9289 166.143 30.5449 166.203 30.1249 166.203 cv
29.8849 166.203 29.6689 166.179 29.4529 166.155 cv
29.2369 166.119 29.0569 166.095 28.8889 166.047 cv
28.7209 165.999 28.5889 165.951 28.4929 165.903 cv
28.3849 165.855 28.3129 165.819 28.2889 165.795 cv
28.2289 165.711 li
28.1929 165.627 li
28.1689 165.507 li
28.1689 165.327 li
28.1809 165.147 li
28.2169 165.015 li
28.2649 164.943 li
28.3369 164.919 li
28.5169 164.991 li
28.6009 165.039 28.7089 165.099 28.8529 165.147 cv
28.9969 165.207 29.1649 165.267 29.3689 165.315 cv
29.5729 165.363 29.8129 165.387 30.1009 165.387 cv
30.3649 165.387 30.6049 165.363 30.8209 165.291 cv
31.0369 165.231 31.2169 165.135 31.3849 165.003 cv
31.5409 164.871 31.6609 164.703 31.7569 164.499 cv
31.8409 164.307 31.8889 164.055 31.8889 163.767 cv
31.8889 163.527 31.8409 163.311 31.7689 163.119 cv
31.6969 162.939 31.5769 162.783 31.4209 162.663 cv
31.2649 162.543 31.0609 162.447 30.8209 162.387 cv
30.5809 162.327 30.2929 162.291 29.9569 162.291 cv
29.7169 162.291 29.5009 162.303 29.3329 162.327 cv
29.1649 162.351 29.0089 162.363 28.8649 162.363 cv
28.7449 162.363 28.6729 162.339 28.6249 162.291 cv
28.5769 162.243 28.5649 162.135 28.5649 161.991 cv
28.5649 158.907 li
28.5649 158.787 28.5889 158.691 28.6489 158.619 cv
28.7089 158.559 28.7929 158.523 28.9129 158.523 cv
32.2729 158.523 li
32.3569 158.559 li
32.4289 158.631 li
32.4769 158.763 li
32.4889 158.955 li
32.4889 159.099 32.4649 159.219 32.4289 159.291 cv
32.2729 159.399 li
29.4409 159.399 li
29.4409 161.535 li
29.5729 161.511 29.7169 161.499 29.8609 161.499 cv
30.0049 161.499 30.1609 161.487 30.3529 161.487 cv
30.7849 161.487 31.1569 161.547 31.4809 161.643 cv
31.8049 161.751 32.0809 161.895 32.2969 162.087 cv
32.5129 162.279 32.6689 162.507 32.7889 162.771 cv
32.8969 163.047 32.9569 163.347 32.9569 163.671 cv
cp
f
39.329 162.303 mo
39.329 162.879 39.281 163.407 39.185 163.887 cv
39.089 164.367 38.945 164.787 38.729 165.135 cv
38.513 165.483 38.237 165.747 37.901 165.927 cv
37.553 166.107 37.133 166.203 36.629 166.203 cv
36.149 166.203 35.753 166.119 35.429 165.963 cv
35.093 165.795 34.829 165.555 34.637 165.219 cv
34.433 164.883 34.289 164.475 34.205 163.995 cv
34.121 163.515 34.085 162.963 34.085 162.339 cv
34.085 161.763 34.133 161.223 34.229 160.743 cv
34.325 160.263 34.469 159.855 34.685 159.507 cv
34.889 159.159 35.165 158.895 35.513 158.703 cv
35.849 158.511 36.281 158.415 36.785 158.415 cv
37.265 158.415 37.661 158.499 37.985 158.667 cv
38.309 158.835 38.573 159.087 38.777 159.423 cv
38.969 159.759 39.113 160.155 39.197 160.635 cv
39.281 161.115 39.329 161.679 39.329 162.303 cv
cp
38.297 162.363 mo
38.297 161.991 38.273 161.655 38.249 161.355 cv
38.225 161.055 38.177 160.791 38.129 160.551 cv
38.081 160.323 38.009 160.131 37.925 159.963 cv
37.841 159.795 37.745 159.663 37.625 159.555 cv
37.505 159.447 37.373 159.363 37.229 159.315 cv
37.073 159.267 36.905 159.243 36.725 159.243 cv
36.389 159.243 36.113 159.327 35.909 159.483 cv
35.705 159.639 35.549 159.855 35.429 160.119 cv
35.309 160.395 35.225 160.719 35.177 161.079 cv
35.129 161.451 35.117 161.847 35.117 162.267 cv
35.117 162.831 35.141 163.311 35.201 163.707 cv
35.261 164.115 35.357 164.439 35.477 164.679 cv
35.597 164.931 35.765 165.111 35.969 165.219 cv
36.161 165.339 36.401 165.387 36.689 165.387 cv
36.905 165.387 37.097 165.363 37.265 165.291 cv
37.433 165.219 37.577 165.123 37.697 164.991 cv
37.817 164.859 37.913 164.703 37.985 164.511 cv
38.057 164.331 38.129 164.127 38.177 163.911 cv
38.225 163.695 38.249 163.455 38.273 163.191 cv
38.285 162.927 38.297 162.651 38.297 162.363 cv
cp
f
45.413 162.303 mo
45.413 162.879 45.365 163.407 45.269 163.887 cv
45.173 164.367 45.029 164.787 44.813 165.135 cv
44.597 165.483 44.321 165.747 43.985 165.927 cv
43.637 166.107 43.217 166.203 42.713 166.203 cv
42.233 166.203 41.837 166.119 41.513 165.963 cv
41.177 165.795 40.913 165.555 40.721 165.219 cv
40.517 164.883 40.373 164.475 40.289 163.995 cv
40.205 163.515 40.169 162.963 40.169 162.339 cv
40.169 161.763 40.217 161.223 40.313 160.743 cv
40.409 160.263 40.553 159.855 40.769 159.507 cv
40.973 159.159 41.249 158.895 41.597 158.703 cv
41.933 158.511 42.365 158.415 42.869 158.415 cv
43.349 158.415 43.745 158.499 44.069 158.667 cv
44.393 158.835 44.657 159.087 44.861 159.423 cv
45.053 159.759 45.197 160.155 45.281 160.635 cv
45.365 161.115 45.413 161.679 45.413 162.303 cv
cp
44.381 162.363 mo
44.381 161.991 44.357 161.655 44.333 161.355 cv
44.309 161.055 44.261 160.791 44.213 160.551 cv
44.165 160.323 44.093 160.131 44.009 159.963 cv
43.925 159.795 43.829 159.663 43.709 159.555 cv
43.589 159.447 43.457 159.363 43.313 159.315 cv
43.157 159.267 42.989 159.243 42.809 159.243 cv
42.473 159.243 42.197 159.327 41.993 159.483 cv
41.789 159.639 41.633 159.855 41.513 160.119 cv
41.393 160.395 41.309 160.719 41.261 161.079 cv
41.213 161.451 41.201 161.847 41.201 162.267 cv
41.201 162.831 41.225 163.311 41.285 163.707 cv
41.345 164.115 41.441 164.439 41.561 164.679 cv
41.681 164.931 41.849 165.111 42.053 165.219 cv
42.245 165.339 42.485 165.387 42.773 165.387 cv
42.989 165.387 43.181 165.363 43.349 165.291 cv
43.517 165.219 43.661 165.123 43.781 164.991 cv
43.901 164.859 43.997 164.703 44.069 164.511 cv
44.141 164.331 44.213 164.127 44.261 163.911 cv
44.309 163.695 44.333 163.455 44.357 163.191 cv
44.369 162.927 44.381 162.651 44.381 162.363 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
52.8094 108.669 mo
414.609 108.669 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 108.669 mo
49.3094 108.669 li
f
52.8094 108.669 mo
49.3094 108.669 li
@
26.9089 112.315 mo
26.8969 112.507 li
26.8489 112.639 li
26.7769 112.723 li
26.6929 112.747 li
22.4929 112.747 li
22.3489 112.735 li
22.2409 112.663 li
22.1809 112.531 li
22.1689 112.471 22.1689 112.399 22.1689 112.303 cv
22.1689 112.111 li
22.2049 111.955 li
22.2769 111.823 li
22.3969 111.667 li
23.8729 110.107 li
24.2089 109.747 24.4729 109.435 24.6889 109.147 cv
24.8929 108.859 25.0489 108.607 25.1569 108.367 cv
25.2649 108.127 25.3369 107.923 25.3729 107.731 cv
25.4089 107.539 25.4329 107.359 25.4329 107.191 cv
25.4329 107.023 25.3969 106.867 25.3489 106.711 cv
25.2889 106.567 25.2049 106.435 25.1089 106.315 cv
25.0129 106.207 24.8809 106.123 24.7249 106.051 cv
24.5689 105.979 24.3889 105.943 24.1849 105.943 cv
23.9449 105.943 23.7289 105.979 23.5369 106.051 cv
23.3449 106.123 23.1889 106.195 23.0449 106.267 cv
22.9009 106.339 22.7809 106.411 22.6849 106.483 cv
22.5889 106.555 22.5169 106.579 22.4809 106.579 cv
22.3969 106.555 li
22.3489 106.483 li
22.3129 106.339 li
22.3009 106.123 li
22.3009 105.979 li
22.3249 105.859 li
22.3729 105.775 li
22.4569 105.679 li
22.5049 105.631 22.5769 105.583 22.6969 105.511 cv
22.8169 105.439 22.9609 105.379 23.1409 105.307 cv
23.3089 105.235 23.5009 105.175 23.7169 105.127 cv
23.9209 105.079 24.1369 105.055 24.3769 105.055 cv
24.7369 105.055 25.0609 105.115 25.3369 105.211 cv
25.6009 105.319 25.8289 105.463 26.0209 105.643 cv
26.2009 105.823 26.3329 106.027 26.4289 106.267 cv
26.5129 106.507 26.5609 106.759 26.5609 107.023 cv
26.5609 107.263 26.5369 107.503 26.5009 107.743 cv
26.4529 107.983 26.3689 108.247 26.2249 108.523 cv
26.0809 108.811 25.8889 109.123 25.6249 109.459 cv
25.3609 109.807 25.0129 110.203 24.5809 110.635 cv
23.3809 111.895 li
26.6809 111.895 li
26.7649 111.919 li
26.8489 112.003 li
26.8969 112.135 li
26.9089 112.315 li
cp
f
33.2449 108.943 mo
33.2449 109.519 33.1969 110.047 33.1009 110.527 cv
33.0049 111.007 32.8609 111.427 32.6449 111.775 cv
32.4289 112.123 32.1529 112.387 31.8169 112.567 cv
31.4689 112.747 31.0489 112.843 30.5449 112.843 cv
30.0649 112.843 29.6689 112.759 29.3449 112.603 cv
29.0089 112.435 28.7449 112.195 28.5529 111.859 cv
28.3489 111.523 28.2049 111.115 28.1209 110.635 cv
28.0369 110.155 28.0009 109.603 28.0009 108.979 cv
28.0009 108.403 28.0489 107.863 28.1449 107.383 cv
28.2409 106.903 28.3849 106.495 28.6009 106.147 cv
28.8049 105.799 29.0809 105.535 29.4289 105.343 cv
29.7649 105.151 30.1969 105.055 30.7009 105.055 cv
31.1809 105.055 31.5769 105.139 31.9009 105.307 cv
32.2249 105.475 32.4889 105.727 32.6929 106.063 cv
32.8849 106.399 33.0289 106.795 33.1129 107.275 cv
33.1969 107.755 33.2449 108.319 33.2449 108.943 cv
cp
32.2129 109.003 mo
32.2129 108.631 32.1889 108.295 32.1649 107.995 cv
32.1409 107.695 32.0929 107.431 32.0449 107.191 cv
31.9969 106.963 31.9249 106.771 31.8409 106.603 cv
31.7569 106.435 31.6609 106.303 31.5409 106.195 cv
31.4209 106.087 31.2889 106.003 31.1449 105.955 cv
30.9889 105.907 30.8209 105.883 30.6409 105.883 cv
30.3049 105.883 30.0289 105.967 29.8249 106.123 cv
29.6209 106.279 29.4649 106.495 29.3449 106.759 cv
29.2249 107.035 29.1409 107.359 29.0929 107.719 cv
29.0449 108.091 29.0329 108.487 29.0329 108.907 cv
29.0329 109.471 29.0569 109.951 29.1169 110.347 cv
29.1769 110.755 29.2729 111.079 29.3929 111.319 cv
29.5129 111.571 29.6809 111.751 29.8849 111.859 cv
30.0769 111.979 30.3169 112.027 30.6049 112.027 cv
30.8209 112.027 31.0129 112.003 31.1809 111.931 cv
31.3489 111.859 31.4929 111.763 31.6129 111.631 cv
31.7329 111.499 31.8289 111.343 31.9009 111.151 cv
31.9729 110.971 32.0449 110.767 32.0929 110.551 cv
32.1409 110.335 32.1649 110.095 32.1889 109.831 cv
32.2009 109.567 32.2129 109.291 32.2129 109.003 cv
cp
f
39.329 108.943 mo
39.329 109.519 39.281 110.047 39.185 110.527 cv
39.089 111.007 38.945 111.427 38.729 111.775 cv
38.513 112.123 38.237 112.387 37.901 112.567 cv
37.553 112.747 37.133 112.843 36.629 112.843 cv
36.149 112.843 35.753 112.759 35.429 112.603 cv
35.093 112.435 34.829 112.195 34.637 111.859 cv
34.433 111.523 34.289 111.115 34.205 110.635 cv
34.121 110.155 34.085 109.603 34.085 108.979 cv
34.085 108.403 34.133 107.863 34.229 107.383 cv
34.325 106.903 34.469 106.495 34.685 106.147 cv
34.889 105.799 35.165 105.535 35.513 105.343 cv
35.849 105.151 36.281 105.055 36.785 105.055 cv
37.265 105.055 37.661 105.139 37.985 105.307 cv
38.309 105.475 38.573 105.727 38.777 106.063 cv
38.969 106.399 39.113 106.795 39.197 107.275 cv
39.281 107.755 39.329 108.319 39.329 108.943 cv
cp
38.297 109.003 mo
38.297 108.631 38.273 108.295 38.249 107.995 cv
38.225 107.695 38.177 107.431 38.129 107.191 cv
38.081 106.963 38.009 106.771 37.925 106.603 cv
37.841 106.435 37.745 106.303 37.625 106.195 cv
37.505 106.087 37.373 106.003 37.229 105.955 cv
37.073 105.907 36.905 105.883 36.725 105.883 cv
36.389 105.883 36.113 105.967 35.909 106.123 cv
35.705 106.279 35.549 106.495 35.429 106.759 cv
35.309 107.035 35.225 107.359 35.177 107.719 cv
35.129 108.091 35.117 108.487 35.117 108.907 cv
35.117 109.471 35.141 109.951 35.201 110.347 cv
35.261 110.755 35.357 111.079 35.477 111.319 cv
35.597 111.571 35.765 111.751 35.969 111.859 cv
36.161 111.979 36.401 112.027 36.689 112.027 cv
36.905 112.027 37.097 112.003 37.265 111.931 cv
37.433 111.859 37.577 111.763 37.697 111.631 cv
37.817 111.499 37.913 111.343 37.985 111.151 cv
38.057 110.971 38.129 110.767 38.177 110.551 cv
38.225 110.335 38.249 110.095 38.273 109.831 cv
38.285 109.567 38.297 109.291 38.297 109.003 cv
cp
f
45.413 108.943 mo
45.413 109.519 45.365 110.047 45.269 110.527 cv
45.173 111.007 45.029 111.427 44.813 111.775 cv
44.597 112.123 44.321 112.387 43.985 112.567 cv
43.637 112.747 43.217 112.843 42.713 112.843 cv
42.233 112.843 41.837 112.759 41.513 112.603 cv
41.177 112.435 40.913 112.195 40.721 111.859 cv
40.517 111.523 40.373 111.115 40.289 110.635 cv
40.205 110.155 40.169 109.603 40.169 108.979 cv
40.169 108.403 40.217 107.863 40.313 107.383 cv
40.409 106.903 40.553 106.495 40.769 106.147 cv
40.973 105.799 41.249 105.535 41.597 105.343 cv
41.933 105.151 42.365 105.055 42.869 105.055 cv
43.349 105.055 43.745 105.139 44.069 105.307 cv
44.393 105.475 44.657 105.727 44.861 106.063 cv
45.053 106.399 45.197 106.795 45.281 107.275 cv
45.365 107.755 45.413 108.319 45.413 108.943 cv
cp
44.381 109.003 mo
44.381 108.631 44.357 108.295 44.333 107.995 cv
44.309 107.695 44.261 107.431 44.213 107.191 cv
44.165 106.963 44.093 106.771 44.009 106.603 cv
43.925 106.435 43.829 106.303 43.709 106.195 cv
43.589 106.087 43.457 106.003 43.313 105.955 cv
43.157 105.907 42.989 105.883 42.809 105.883 cv
42.473 105.883 42.197 105.967 41.993 106.123 cv
41.789 106.279 41.633 106.495 41.513 106.759 cv
41.393 107.035 41.309 107.359 41.261 107.719 cv
41.213 108.091 41.201 108.487 41.201 108.907 cv
41.201 109.471 41.225 109.951 41.285 110.347 cv
41.345 110.755 41.441 111.079 41.561 111.319 cv
41.681 111.571 41.849 111.751 42.053 111.859 cv
42.245 111.979 42.485 112.027 42.773 112.027 cv
42.989 112.027 43.181 112.003 43.349 111.931 cv
43.517 111.859 43.661 111.763 43.781 111.631 cv
43.901 111.499 43.997 111.343 44.069 111.151 cv
44.141 110.971 44.213 110.767 44.261 110.551 cv
44.309 110.335 44.333 110.095 44.357 109.831 cv
44.369 109.567 44.381 109.291 44.381 109.003 cv
cp
f
gsave
52.8094 309.6 mo
414.609 309.6 li
414.609 7.19993 li
52.8094 7.19993 li
52.8094 309.6 li
clp
2 lc
52.8094 55.3091 mo
414.609 55.3091 li
1 /0 /CSD get_res sepcs
.309804 sep
@
grestore
52.8094 55.3091 mo
49.3094 55.3091 li
f
52.8094 55.3091 mo
49.3094 55.3091 li
@
26.9089 58.9552 mo
26.8969 59.1472 li
26.8489 59.2792 li
26.7769 59.3632 li
26.6929 59.3872 li
22.4929 59.3872 li
22.3489 59.3752 li
22.2409 59.3032 li
22.1809 59.1712 li
22.1689 59.1112 22.1689 59.0392 22.1689 58.9432 cv
22.1689 58.7512 li
22.2049 58.5952 li
22.2769 58.4632 li
22.3969 58.3072 li
23.8729 56.7472 li
24.2089 56.3872 24.4729 56.0752 24.6889 55.7872 cv
24.8929 55.4992 25.0489 55.2472 25.1569 55.0072 cv
25.2649 54.7672 25.3369 54.5632 25.3729 54.3712 cv
25.4089 54.1792 25.4329 53.9992 25.4329 53.8312 cv
25.4329 53.6632 25.3969 53.5072 25.3489 53.3512 cv
25.2889 53.2072 25.2049 53.0752 25.1089 52.9552 cv
25.0129 52.8472 24.8809 52.7632 24.7249 52.6912 cv
24.5689 52.6192 24.3889 52.5832 24.1849 52.5832 cv
23.9449 52.5832 23.7289 52.6192 23.5369 52.6912 cv
23.3449 52.7632 23.1889 52.8352 23.0449 52.9072 cv
22.9009 52.9792 22.7809 53.0512 22.6849 53.1232 cv
22.5889 53.1952 22.5169 53.2192 22.4809 53.2192 cv
22.3969 53.1952 li
22.3489 53.1232 li
22.3129 52.9792 li
22.3009 52.7632 li
22.3009 52.6192 li
22.3249 52.4992 li
22.3729 52.4152 li
22.4569 52.3192 li
22.5049 52.2712 22.5769 52.2232 22.6969 52.1512 cv
22.8169 52.0792 22.9609 52.0192 23.1409 51.9472 cv
23.3089 51.8752 23.5009 51.8152 23.7169 51.7672 cv
23.9209 51.7192 24.1369 51.6952 24.3769 51.6952 cv
24.7369 51.6952 25.0609 51.7552 25.3369 51.8512 cv
25.6009 51.9592 25.8289 52.1032 26.0209 52.2832 cv
26.2009 52.4632 26.3329 52.6672 26.4289 52.9072 cv
26.5129 53.1472 26.5609 53.3992 26.5609 53.6632 cv
26.5609 53.9032 26.5369 54.1432 26.5009 54.3832 cv
26.4529 54.6232 26.3689 54.8872 26.2249 55.1632 cv
26.0809 55.4512 25.8889 55.7632 25.6249 56.0992 cv
25.3609 56.4472 25.0129 56.8432 24.5809 57.2752 cv
23.3809 58.5352 li
26.6809 58.5352 li
26.7649 58.5592 li
26.8489 58.6432 li
26.8969 58.7752 li
26.9089 58.9552 li
cp
f
32.9569 56.9512 mo
32.9569 57.3592 32.8849 57.7312 32.7529 58.0432 cv
32.6089 58.3552 32.4169 58.6192 32.1769 58.8352 cv
31.9249 59.0512 31.6249 59.2192 31.2769 59.3272 cv
30.9289 59.4232 30.5449 59.4832 30.1249 59.4832 cv
29.8849 59.4832 29.6689 59.4592 29.4529 59.4352 cv
29.2369 59.3992 29.0569 59.3752 28.8889 59.3272 cv
28.7209 59.2792 28.5889 59.2312 28.4929 59.1832 cv
28.3849 59.1352 28.3129 59.0992 28.2889 59.0752 cv
28.2289 58.9912 li
28.1929 58.9072 li
28.1689 58.7872 li
28.1689 58.6072 li
28.1809 58.4272 li
28.2169 58.2952 li
28.2649 58.2232 li
28.3369 58.1992 li
28.5169 58.2712 li
28.6009 58.3192 28.7089 58.3792 28.8529 58.4272 cv
28.9969 58.4872 29.1649 58.5472 29.3689 58.5952 cv
29.5729 58.6432 29.8129 58.6672 30.1009 58.6672 cv
30.3649 58.6672 30.6049 58.6432 30.8209 58.5712 cv
31.0369 58.5112 31.2169 58.4152 31.3849 58.2832 cv
31.5409 58.1512 31.6609 57.9832 31.7569 57.7792 cv
31.8409 57.5872 31.8889 57.3352 31.8889 57.0472 cv
31.8889 56.8072 31.8409 56.5912 31.7689 56.3992 cv
31.6969 56.2192 31.5769 56.0632 31.4209 55.9432 cv
31.2649 55.8232 31.0609 55.7272 30.8209 55.6672 cv
30.5809 55.6072 30.2929 55.5712 29.9569 55.5712 cv
29.7169 55.5712 29.5009 55.5832 29.3329 55.6072 cv
29.1649 55.6312 29.0089 55.6432 28.8649 55.6432 cv
28.7449 55.6432 28.6729 55.6192 28.6249 55.5712 cv
28.5769 55.5232 28.5649 55.4152 28.5649 55.2712 cv
28.5649 52.1872 li
28.5649 52.0672 28.5889 51.9712 28.6489 51.8992 cv
28.7089 51.8392 28.7929 51.8032 28.9129 51.8032 cv
32.2729 51.8032 li
32.3569 51.8392 li
32.4289 51.9112 li
32.4769 52.0432 li
32.4889 52.2352 li
32.4889 52.3792 32.4649 52.4992 32.4289 52.5712 cv
32.2729 52.6792 li
29.4409 52.6792 li
29.4409 54.8152 li
29.5729 54.7912 29.7169 54.7792 29.8609 54.7792 cv
30.0049 54.7792 30.1609 54.7672 30.3529 54.7672 cv
30.7849 54.7672 31.1569 54.8272 31.4809 54.9232 cv
31.8049 55.0312 32.0809 55.1752 32.2969 55.3672 cv
32.5129 55.5592 32.6689 55.7872 32.7889 56.0512 cv
32.8969 56.3272 32.9569 56.6272 32.9569 56.9512 cv
cp
f
39.329 55.5832 mo
39.329 56.1592 39.281 56.6872 39.185 57.1672 cv
39.089 57.6472 38.945 58.0672 38.729 58.4152 cv
38.513 58.7632 38.237 59.0272 37.901 59.2072 cv
37.553 59.3872 37.133 59.4832 36.629 59.4832 cv
36.149 59.4832 35.753 59.3992 35.429 59.2432 cv
35.093 59.0752 34.829 58.8352 34.637 58.4992 cv
34.433 58.1632 34.289 57.7552 34.205 57.2752 cv
34.121 56.7952 34.085 56.2432 34.085 55.6192 cv
34.085 55.0432 34.133 54.5032 34.229 54.0232 cv
34.325 53.5432 34.469 53.1352 34.685 52.7872 cv
34.889 52.4392 35.165 52.1752 35.513 51.9832 cv
35.849 51.7912 36.281 51.6952 36.785 51.6952 cv
37.265 51.6952 37.661 51.7792 37.985 51.9472 cv
38.309 52.1152 38.573 52.3672 38.777 52.7032 cv
38.969 53.0392 39.113 53.4352 39.197 53.9152 cv
39.281 54.3952 39.329 54.9592 39.329 55.5832 cv
cp
38.297 55.6432 mo
38.297 55.2712 38.273 54.9352 38.249 54.6352 cv
38.225 54.3352 38.177 54.0712 38.129 53.8312 cv
38.081 53.6032 38.009 53.4112 37.925 53.2432 cv
37.841 53.0752 37.745 52.9432 37.625 52.8352 cv
37.505 52.7272 37.373 52.6432 37.229 52.5952 cv
37.073 52.5472 36.905 52.5232 36.725 52.5232 cv
36.389 52.5232 36.113 52.6072 35.909 52.7632 cv
35.705 52.9192 35.549 53.1352 35.429 53.3992 cv
35.309 53.6752 35.225 53.9992 35.177 54.3592 cv
35.129 54.7312 35.117 55.1272 35.117 55.5472 cv
35.117 56.1112 35.141 56.5912 35.201 56.9872 cv
35.261 57.3952 35.357 57.7192 35.477 57.9592 cv
35.597 58.2112 35.765 58.3912 35.969 58.4992 cv
36.161 58.6192 36.401 58.6672 36.689 58.6672 cv
36.905 58.6672 37.097 58.6432 37.265 58.5712 cv
37.433 58.4992 37.577 58.4032 37.697 58.2712 cv
37.817 58.1392 37.913 57.9832 37.985 57.7912 cv
38.057 57.6112 38.129 57.4072 38.177 57.1912 cv
38.225 56.9752 38.249 56.7352 38.273 56.4712 cv
38.285 56.2072 38.297 55.9312 38.297 55.6432 cv
cp
f
45.413 55.5832 mo
45.413 56.1592 45.365 56.6872 45.269 57.1672 cv
45.173 57.6472 45.029 58.0672 44.813 58.4152 cv
44.597 58.7632 44.321 59.0272 43.985 59.2072 cv
43.637 59.3872 43.217 59.4832 42.713 59.4832 cv
42.233 59.4832 41.837 59.3992 41.513 59.2432 cv
41.177 59.0752 40.913 58.8352 40.721 58.4992 cv
40.517 58.1632 40.373 57.7552 40.289 57.2752 cv
40.205 56.7952 40.169 56.2432 40.169 55.6192 cv
40.169 55.0432 40.217 54.5032 40.313 54.0232 cv
40.409 53.5432 40.553 53.1352 40.769 52.7872 cv
40.973 52.4392 41.249 52.1752 41.597 51.9832 cv
41.933 51.7912 42.365 51.6952 42.869 51.6952 cv
43.349 51.6952 43.745 51.7792 44.069 51.9472 cv
44.393 52.1152 44.657 52.3672 44.861 52.7032 cv
45.053 53.0392 45.197 53.4352 45.281 53.9152 cv
45.365 54.3952 45.413 54.9592 45.413 55.5832 cv
cp
44.381 55.6432 mo
44.381 55.2712 44.357 54.9352 44.333 54.6352 cv
44.309 54.3352 44.261 54.0712 44.213 53.8312 cv
44.165 53.6032 44.093 53.4112 44.009 53.2432 cv
43.925 53.0752 43.829 52.9432 43.709 52.8352 cv
43.589 52.7272 43.457 52.6432 43.313 52.5952 cv
43.157 52.5472 42.989 52.5232 42.809 52.5232 cv
42.473 52.5232 42.197 52.6072 41.993 52.7632 cv
41.789 52.9192 41.633 53.1352 41.513 53.3992 cv
41.393 53.6752 41.309 53.9992 41.261 54.3592 cv
41.213 54.7312 41.201 55.1272 41.201 55.5472 cv
41.201 56.1112 41.225 56.5912 41.285 56.9872 cv
41.345 57.3952 41.441 57.7192 41.561 57.9592 cv
41.681 58.2112 41.849 58.3912 42.053 58.4992 cv
42.245 58.6192 42.485 58.6672 42.773 58.6672 cv
42.989 58.6672 43.181 58.6432 43.349 58.5712 cv
43.517 58.4992 43.661 58.4032 43.781 58.2712 cv
43.901 58.1392 43.997 57.9832 44.069 57.7912 cv
44.141 57.6112 44.213 57.4072 44.261 57.1912 cv
44.309 56.9752 44.333 56.7352 44.357 56.4712 cv
44.369 56.2072 44.381 55.9312 44.381 55.6432 cv
cp
f
14.2882 192.898 mo
14.4443 192.91 li
14.5763 192.934 li
14.6722 192.97 li
14.7682 193.042 li
14.8162 193.09 14.8762 193.174 14.9482 193.294 cv
15.0322 193.414 15.1163 193.57 15.1882 193.762 cv
15.2603 193.954 15.3202 194.158 15.3682 194.398 cv
15.4163 194.638 15.4402 194.902 15.4402 195.19 cv
15.4402 195.682 15.3562 196.126 15.2002 196.522 cv
15.0442 196.918 14.8042 197.254 14.4802 197.53 cv
14.1683 197.818 13.7723 198.034 13.2922 198.178 cv
12.8242 198.334 12.2843 198.406 11.6602 198.406 cv
11.0362 198.406 10.4842 198.334 9.99225 198.166 cv
9.50025 197.998 9.08025 197.77 8.73225 197.482 cv
8.39625 197.194 8.13225 196.834 7.95225 196.426 cv
7.77225 196.018 7.67625 195.574 7.67625 195.07 cv
7.67625 194.854 7.70025 194.638 7.74825 194.434 cv
7.79625 194.23 7.84425 194.038 7.90425 193.858 cv
7.96425 193.69 8.03625 193.534 8.12025 193.39 cv
8.20425 193.258 8.27625 193.162 8.32425 193.102 cv
8.44425 192.994 li
8.54025 192.958 li
8.67225 192.946 li
8.85225 192.934 li
9.04425 192.946 li
9.18825 192.982 li
9.27225 193.03 li
9.29625 193.114 li
9.29625 193.174 9.26025 193.246 9.18825 193.342 cv
9.11625 193.438 9.03225 193.57 8.93625 193.726 cv
8.84025 193.882 8.75625 194.074 8.68425 194.29 cv
8.61225 194.506 8.56425 194.77 8.56425 195.07 cv
8.56425 195.406 8.63625 195.718 8.76825 195.994 cv
8.90025 196.27 9.09225 196.51 9.35625 196.702 cv
9.62025 196.894 9.94425 197.05 10.3162 197.158 cv
10.7002 197.266 11.1322 197.314 11.6122 197.314 cv
12.0922 197.314 12.5243 197.266 12.8842 197.158 cv
13.2563 197.062 13.5682 196.906 13.8082 196.714 cv
14.0602 196.522 14.2522 196.294 14.3722 196.006 cv
14.5042 195.718 14.5642 195.406 14.5642 195.046 cv
14.5642 194.746 14.5282 194.482 14.4563 194.254 cv
14.3842 194.038 14.3003 193.846 14.2043 193.69 cv
14.1082 193.534 14.0243 193.402 13.9522 193.294 cv
13.8802 193.198 13.8442 193.114 13.8442 193.054 cv
13.8562 192.982 li
13.9282 192.946 li
14.0602 192.91 li
14.1202 192.91 14.1922 192.898 14.2882 192.898 cv
cp
f
12.5122 186.778 mo
12.9443 186.778 13.3403 186.838 13.7002 186.946 cv
14.0602 187.066 14.3722 187.234 14.6362 187.45 cv
14.9002 187.678 15.1042 187.966 15.2483 188.302 cv
15.3802 188.638 15.4522 189.034 15.4522 189.466 cv
15.4522 189.898 15.3923 190.282 15.2723 190.606 cv
15.1523 190.93 14.9602 191.194 14.7203 191.41 cv
14.4802 191.626 14.1803 191.794 13.8202 191.89 cv
13.4722 191.998 13.0763 192.046 12.6202 192.046 cv
12.1882 192.046 11.7922 191.998 11.4323 191.878 cv
11.0723 191.77 10.7603 191.602 10.4963 191.374 cv
10.2323 191.158 10.0282 190.87 9.88425 190.534 cv
9.74025 190.198 9.66825 189.814 9.66825 189.358 cv
9.66825 188.926 9.74025 188.554 9.87225 188.23 cv
10.0042 187.906 10.1962 187.63 10.4362 187.414 cv
10.6763 187.198 10.9762 187.042 11.3242 186.934 cv
11.6842 186.838 12.0802 186.778 12.5122 186.778 cv
cp
12.5842 187.798 mo
12.2962 187.798 12.0322 187.834 11.7682 187.882 cv
11.5162 187.93 11.3002 188.014 11.1082 188.134 cv
10.9163 188.254 10.7722 188.422 10.6523 188.626 cv
10.5442 188.842 10.4842 189.094 10.4842 189.394 cv
10.4842 189.682 10.5442 189.934 10.6402 190.138 cv
10.7362 190.342 10.8802 190.51 11.0723 190.642 cv
11.2642 190.774 11.4802 190.87 11.7323 190.942 cv
11.9843 191.014 12.2603 191.038 12.5602 191.038 cv
12.8482 191.038 13.1242 191.014 13.3762 190.954 cv
13.6283 190.906 13.8442 190.81 14.0363 190.69 cv
14.2282 190.57 14.3842 190.414 14.4922 190.198 cv
14.6003 189.994 14.6482 189.73 14.6482 189.418 cv
14.6482 189.142 14.6003 188.902 14.5042 188.686 cv
14.4082 188.482 14.2642 188.314 14.0722 188.182 cv
13.8923 188.05 13.6762 187.954 13.4242 187.894 cv
13.1722 187.834 12.8962 187.798 12.5842 187.798 cv
cp
f
15.2122 184.39 mo
15.2962 184.414 li
15.3442 184.486 li
15.3682 184.63 li
15.3682 184.702 15.3802 184.774 15.3802 184.87 cv
15.3802 184.966 15.3682 185.05 15.3682 185.11 cv
15.3442 185.266 li
15.2962 185.338 li
15.2122 185.35 li
7.37625 185.35 li
7.30425 185.338 li
7.24425 185.266 li
7.20825 185.11 li
7.20825 185.05 7.19625 184.966 7.19625 184.87 cv
7.19625 184.774 7.20825 184.702 7.20825 184.63 cv
7.24425 184.486 li
7.30425 184.414 li
7.37625 184.39 li
15.2122 184.39 li
cp
f
15.2122 181.642 mo
15.2962 181.666 li
15.3442 181.738 li
15.3682 181.882 li
15.3682 181.954 15.3802 182.026 15.3802 182.122 cv
15.3802 182.218 15.3682 182.302 15.3682 182.362 cv
15.3442 182.518 li
15.2962 182.59 li
15.2122 182.602 li
7.37625 182.602 li
7.30425 182.59 li
7.24425 182.518 li
7.20825 182.362 li
7.20825 182.302 7.19625 182.218 7.19625 182.122 cv
7.19625 182.026 7.20825 181.954 7.20825 181.882 cv
7.24425 181.738 li
7.30425 181.666 li
7.37625 181.642 li
15.2122 181.642 li
cp
f
12.3442 175.354 mo
12.5002 175.354 12.6082 175.402 12.6683 175.474 cv
12.7402 175.546 12.7642 175.642 12.7642 175.738 cv
12.7642 179.194 li
13.0642 179.194 13.3282 179.17 13.5562 179.11 cv
13.7962 179.05 13.9882 178.954 14.1563 178.81 cv
14.3242 178.678 14.4563 178.498 14.5522 178.282 cv
14.6482 178.066 14.6842 177.79 14.6842 177.478 cv
14.6842 177.226 14.6722 176.998 14.6242 176.806 cv
14.5883 176.614 14.5402 176.446 14.4922 176.302 cv
14.4443 176.158 14.3962 176.05 14.3482 175.954 cv
14.3123 175.858 14.2882 175.786 14.2882 175.738 cv
14.3123 175.666 li
14.3722 175.618 li
14.4802 175.594 li
14.6602 175.582 li
14.7922 175.594 li
14.9002 175.606 li
14.9722 175.63 li
15.0442 175.69 li
15.0682 175.714 15.0922 175.774 15.1403 175.87 cv
15.1882 175.978 15.2362 176.11 15.2843 176.278 cv
15.3322 176.446 15.3682 176.65 15.4043 176.866 cv
15.4282 177.094 15.4522 177.334 15.4522 177.574 cv
15.4522 178.006 15.3923 178.39 15.2843 178.714 cv
15.1642 179.05 14.9843 179.326 14.7442 179.542 cv
14.5042 179.758 14.2162 179.926 13.8562 180.046 cv
13.4963 180.166 13.0763 180.214 12.5962 180.214 cv
12.1402 180.214 11.7323 180.154 11.3722 180.034 cv
11.0122 179.914 10.7122 179.746 10.4602 179.53 cv
10.2083 179.314 10.0162 179.038 9.87225 178.726 cv
9.74025 178.414 9.66825 178.066 9.66825 177.682 cv
9.66825 177.274 9.74025 176.914 9.87225 176.626 cv
10.0162 176.338 10.1962 176.098 10.4122 175.906 cv
10.6402 175.714 10.9042 175.582 11.2043 175.486 cv
11.5042 175.402 11.8282 175.354 12.1642 175.354 cv
12.3442 175.354 li
cp
12.0562 176.326 mo
11.5522 176.326 11.1563 176.434 10.8682 176.674 cv
10.5802 176.914 10.4242 177.262 10.4242 177.718 cv
10.4242 177.958 10.4722 178.174 10.5682 178.354 cv
10.6642 178.534 10.7843 178.678 10.9282 178.798 cv
11.0723 178.918 11.2522 179.014 11.4443 179.086 cv
11.6362 179.158 11.8403 179.194 12.0562 179.194 cv
12.0562 176.326 li
cp
f
14.4082 170.086 mo
14.5763 170.098 li
14.7083 170.122 li
14.7922 170.158 li
14.9002 170.242 li
14.9482 170.29 15.0083 170.374 15.0802 170.494 cv
15.1523 170.614 15.2242 170.746 15.2723 170.89 cv
15.3322 171.034 15.3682 171.202 15.4043 171.37 cv
15.4282 171.538 15.4522 171.718 15.4522 171.898 cv
15.4522 172.282 15.3923 172.63 15.2723 172.918 cv
15.1523 173.206 14.9722 173.458 14.7323 173.65 cv
14.4922 173.842 14.2043 173.998 13.8562 174.094 cv
13.5082 174.202 13.1003 174.25 12.6322 174.25 cv
12.1163 174.25 11.6722 174.19 11.3002 174.058 cv
10.9282 173.938 10.6283 173.758 10.3883 173.542 cv
10.1482 173.326 9.98025 173.062 9.86025 172.762 cv
9.74025 172.462 9.68025 172.138 9.68025 171.79 cv
9.68025 171.622 9.70425 171.466 9.72825 171.298 cv
9.76425 171.142 9.80025 170.998 9.84825 170.866 cv
9.89625 170.734 9.95625 170.614 10.0282 170.506 cv
10.1003 170.41 10.1482 170.338 10.1962 170.29 cv
10.3162 170.194 li
10.4122 170.146 li
10.5322 170.122 li
10.7002 170.11 li
10.8562 170.11 10.9642 170.134 11.0243 170.17 cv
11.1082 170.29 li
11.0122 170.506 li
10.9522 170.578 10.8802 170.674 10.8083 170.794 cv
10.7362 170.914 10.6642 171.046 10.5922 171.214 cv
10.5322 171.382 10.4963 171.586 10.4963 171.802 cv
10.4963 172.27 10.6763 172.63 11.0362 172.87 cv
11.3962 173.122 11.9122 173.242 12.5842 173.242 cv
12.9323 173.242 13.2323 173.218 13.4843 173.146 cv
13.7362 173.086 13.9522 172.99 14.1202 172.87 cv
14.2882 172.75 14.4202 172.594 14.5042 172.402 cv
14.5883 172.222 14.6242 172.018 14.6242 171.778 cv
14.6242 171.562 14.6003 171.358 14.5282 171.19 cv
14.4563 171.022 14.3842 170.878 14.3003 170.758 cv
14.2162 170.638 14.1442 170.53 14.0722 170.446 cv
13.9642 170.254 li
13.9882 170.182 li
14.0722 170.134 li
14.2043 170.098 li
14.4082 170.086 li
cp
f
14.8282 166.066 mo
14.9482 166.066 15.0322 166.078 15.0922 166.09 cv
15.2362 166.162 li
15.3202 166.294 li
15.3802 166.51 li
15.3923 166.594 15.4043 166.678 15.4163 166.774 cv
15.4282 166.87 15.4402 166.954 15.4402 167.038 cv
15.4402 167.314 15.4043 167.554 15.3442 167.746 cv
15.2723 167.938 15.1642 168.106 15.0202 168.226 cv
14.8762 168.346 14.6962 168.442 14.4683 168.49 cv
14.2402 168.55 13.9762 168.574 13.6642 168.574 cv
10.5922 168.574 li
10.5922 169.318 li
10.4963 169.462 li
10.4362 169.498 10.3282 169.51 10.1842 169.51 cv
10.0042 169.498 li
9.87225 169.462 li
9.81225 169.402 li
9.78825 169.306 li
9.78825 168.574 li
8.52825 168.574 li
8.45625 168.562 li
8.39625 168.49 li
8.36025 168.334 li
8.36025 168.274 8.34825 168.19 8.34825 168.094 cv
8.34825 167.998 8.36025 167.926 8.36025 167.854 cv
8.39625 167.71 li
8.45625 167.638 li
8.52825 167.614 li
9.78825 167.614 li
9.78825 166.258 li
9.81225 166.174 li
9.87225 166.114 li
10.0042 166.078 li
10.1842 166.066 li
10.3282 166.066 10.4362 166.09 10.4963 166.126 cv
10.5922 166.258 li
10.5922 167.614 li
13.5322 167.614 li
13.8923 167.614 14.1683 167.566 14.3482 167.458 cv
14.5402 167.35 14.6242 167.158 14.6242 166.87 cv
14.6003 166.63 li
14.5522 166.45 li
14.4922 166.306 li
14.4683 166.198 li
14.4802 166.15 li
14.5402 166.102 li
14.6482 166.078 li
14.8282 166.066 li
cp
f
15.2122 163.822 mo
15.2962 163.846 li
15.3442 163.918 li
15.3682 164.062 li
15.3682 164.134 15.3802 164.206 15.3802 164.302 cv
15.3802 164.398 15.3682 164.482 15.3682 164.542 cv
15.3442 164.698 li
15.2962 164.77 li
15.2122 164.782 li
9.93225 164.782 li
9.86025 164.77 li
9.80025 164.698 li
9.76425 164.542 li
9.76425 164.482 9.75225 164.398 9.75225 164.302 cv
9.75225 164.206 9.76425 164.134 9.76425 164.062 cv
9.80025 163.918 li
9.86025 163.846 li
9.93225 163.822 li
15.2122 163.822 li
cp
8.15625 163.702 mo
8.38425 163.702 8.54025 163.75 8.62425 163.834 cv
8.70825 163.93 8.74425 164.086 8.74425 164.314 cv
8.74425 164.542 8.70825 164.698 8.62425 164.782 cv
8.55225 164.866 8.39625 164.902 8.16825 164.902 cv
7.95225 164.902 7.79625 164.866 7.71225 164.782 cv
7.62825 164.698 7.58025 164.542 7.58025 164.302 cv
7.58025 164.074 7.62825 163.918 7.70025 163.834 cv
7.78425 163.75 7.94025 163.702 8.15625 163.702 cv
cp
f
9.92025 157.714 mo
9.98025 157.714 li
10.0402 157.726 li
10.1003 157.738 li
10.1722 157.762 li
15.1762 159.562 li
15.2962 159.622 li
15.3442 159.742 li
15.3682 159.934 li
15.3682 160.006 15.3802 160.102 15.3802 160.222 cv
15.3802 160.342 15.3682 160.45 15.3682 160.522 cv
15.3442 160.702 li
15.2843 160.822 li
15.1762 160.882 li
10.1722 162.682 li
10.0522 162.718 li
9.96825 162.73 li
9.92025 162.73 li
9.84825 162.706 li
9.78825 162.634 li
9.76425 162.49 li
9.76425 162.43 9.75225 162.358 9.75225 162.262 cv
9.75225 162.154 9.76425 162.07 9.76425 161.998 cv
9.80025 161.83 li
9.86025 161.746 li
9.94425 161.698 li
14.2882 160.21 li
14.3602 160.186 li
14.2882 160.174 li
9.94425 158.698 li
9.86025 158.662 li
9.80025 158.578 li
9.76425 158.422 li
9.76425 158.362 9.75225 158.278 9.75225 158.17 cv
9.75225 158.074 9.76425 158.002 9.76425 157.942 cv
9.78825 157.81 li
9.84825 157.738 li
9.92025 157.714 li
cp
f
12.3442 152.11 mo
12.5002 152.11 12.6082 152.158 12.6683 152.23 cv
12.7402 152.302 12.7642 152.398 12.7642 152.494 cv
12.7642 155.95 li
13.0642 155.95 13.3282 155.926 13.5562 155.866 cv
13.7962 155.806 13.9882 155.71 14.1563 155.566 cv
14.3242 155.434 14.4563 155.254 14.5522 155.038 cv
14.6482 154.822 14.6842 154.546 14.6842 154.234 cv
14.6842 153.982 14.6722 153.754 14.6242 153.562 cv
14.5883 153.37 14.5402 153.202 14.4922 153.058 cv
14.4443 152.914 14.3962 152.806 14.3482 152.71 cv
14.3123 152.614 14.2882 152.542 14.2882 152.494 cv
14.3123 152.422 li
14.3722 152.374 li
14.4802 152.35 li
14.6602 152.338 li
14.7922 152.35 li
14.9002 152.362 li
14.9722 152.386 li
15.0442 152.446 li
15.0682 152.47 15.0922 152.53 15.1403 152.626 cv
15.1882 152.734 15.2362 152.866 15.2843 153.034 cv
15.3322 153.202 15.3682 153.406 15.4043 153.622 cv
15.4282 153.85 15.4522 154.09 15.4522 154.33 cv
15.4522 154.762 15.3923 155.146 15.2843 155.47 cv
15.1642 155.806 14.9843 156.082 14.7442 156.298 cv
14.5042 156.514 14.2162 156.682 13.8562 156.802 cv
13.4963 156.922 13.0763 156.97 12.5962 156.97 cv
12.1402 156.97 11.7323 156.91 11.3722 156.79 cv
11.0122 156.67 10.7122 156.502 10.4602 156.286 cv
10.2083 156.07 10.0162 155.794 9.87225 155.482 cv
9.74025 155.17 9.66825 154.822 9.66825 154.438 cv
9.66825 154.03 9.74025 153.67 9.87225 153.382 cv
10.0162 153.094 10.1962 152.854 10.4122 152.662 cv
10.6402 152.47 10.9042 152.338 11.2043 152.242 cv
11.5042 152.158 11.8282 152.11 12.1642 152.11 cv
12.3442 152.11 li
cp
12.0562 153.082 mo
11.5522 153.082 11.1563 153.19 10.8682 153.43 cv
10.5802 153.67 10.4242 154.018 10.4242 154.474 cv
10.4242 154.714 10.4722 154.93 10.5682 155.11 cv
10.6642 155.29 10.7843 155.434 10.9282 155.554 cv
11.0723 155.674 11.2522 155.77 11.4443 155.842 cv
11.6362 155.914 11.8403 155.95 12.0562 155.95 cv
12.0562 153.082 li
cp
f
10.2802 144.838 mo
10.3762 144.838 10.4482 144.85 10.5082 144.85 cv
10.6402 144.874 li
10.7122 144.922 li
10.7362 144.994 li
10.7122 145.114 li
10.6642 145.258 li
10.6162 145.45 li
10.5922 145.678 li
10.5922 145.774 10.6162 145.87 10.6523 145.966 cv
10.6882 146.062 10.7483 146.158 10.8442 146.254 cv
10.9403 146.362 11.0602 146.47 11.2043 146.59 cv
11.3482 146.71 11.5282 146.83 11.7442 146.962 cv
15.2122 146.962 li
15.2962 146.986 li
15.3442 147.058 li
15.3682 147.202 li
15.3682 147.274 15.3802 147.346 15.3802 147.442 cv
15.3802 147.538 15.3682 147.622 15.3682 147.682 cv
15.3442 147.838 li
15.2962 147.91 li
15.2122 147.922 li
9.93225 147.922 li
9.86025 147.91 li
9.80025 147.838 li
9.76425 147.706 li
9.76425 147.658 9.75225 147.586 9.75225 147.49 cv
9.76425 147.274 li
9.80025 147.142 li
9.86025 147.082 li
9.93225 147.058 li
10.7002 147.058 li
10.4963 146.914 10.3282 146.77 10.1962 146.65 cv
10.0642 146.53 9.95625 146.41 9.88425 146.29 cv
9.81225 146.17 9.75225 146.062 9.71625 145.954 cv
9.69225 145.846 9.66825 145.726 9.66825 145.606 cv
9.68025 145.438 li
9.71625 145.234 li
9.77625 145.042 li
9.83625 144.922 li
9.88425 144.874 li
9.95625 144.862 li
10.0763 144.85 li
10.2802 144.838 li
cp
f
12.3442 139.234 mo
12.5002 139.234 12.6082 139.282 12.6683 139.354 cv
12.7402 139.426 12.7642 139.522 12.7642 139.618 cv
12.7642 143.074 li
13.0642 143.074 13.3282 143.05 13.5562 142.99 cv
13.7962 142.93 13.9882 142.834 14.1563 142.69 cv
14.3242 142.558 14.4563 142.378 14.5522 142.162 cv
14.6482 141.946 14.6842 141.67 14.6842 141.358 cv
14.6842 141.106 14.6722 140.878 14.6242 140.686 cv
14.5883 140.494 14.5402 140.326 14.4922 140.182 cv
14.4443 140.038 14.3962 139.93 14.3482 139.834 cv
14.3123 139.738 14.2882 139.666 14.2882 139.618 cv
14.3123 139.546 li
14.3722 139.498 li
14.4802 139.474 li
14.6602 139.462 li
14.7922 139.474 li
14.9002 139.486 li
14.9722 139.51 li
15.0442 139.57 li
15.0682 139.594 15.0922 139.654 15.1403 139.75 cv
15.1882 139.858 15.2362 139.99 15.2843 140.158 cv
15.3322 140.326 15.3682 140.53 15.4043 140.746 cv
15.4282 140.974 15.4522 141.214 15.4522 141.454 cv
15.4522 141.886 15.3923 142.27 15.2843 142.594 cv
15.1642 142.93 14.9843 143.206 14.7442 143.422 cv
14.5042 143.638 14.2162 143.806 13.8562 143.926 cv
13.4963 144.046 13.0763 144.094 12.5962 144.094 cv
12.1402 144.094 11.7323 144.034 11.3722 143.914 cv
11.0122 143.794 10.7122 143.626 10.4602 143.41 cv
10.2083 143.194 10.0162 142.918 9.87225 142.606 cv
9.74025 142.294 9.66825 141.946 9.66825 141.562 cv
9.66825 141.154 9.74025 140.794 9.87225 140.506 cv
10.0162 140.218 10.1962 139.978 10.4122 139.786 cv
10.6402 139.594 10.9042 139.462 11.2043 139.366 cv
11.5042 139.282 11.8282 139.234 12.1642 139.234 cv
12.3442 139.234 li
cp
12.0562 140.206 mo
11.5522 140.206 11.1563 140.314 10.8682 140.554 cv
10.5802 140.794 10.4242 141.142 10.4242 141.598 cv
10.4242 141.838 10.4722 142.054 10.5682 142.234 cv
10.6642 142.414 10.7843 142.558 10.9282 142.678 cv
11.0723 142.798 11.2522 142.894 11.4443 142.966 cv
11.6362 143.038 11.8403 143.074 12.0562 143.074 cv
12.0562 140.206 li
cp
f
14.8282 135.022 mo
14.9482 135.022 15.0322 135.034 15.0922 135.046 cv
15.2362 135.118 li
15.3202 135.25 li
15.3802 135.466 li
15.3923 135.55 15.4043 135.634 15.4163 135.73 cv
15.4282 135.826 15.4402 135.91 15.4402 135.994 cv
15.4402 136.27 15.4043 136.51 15.3442 136.702 cv
15.2723 136.894 15.1642 137.062 15.0202 137.182 cv
14.8762 137.302 14.6962 137.398 14.4683 137.446 cv
14.2402 137.506 13.9762 137.53 13.6642 137.53 cv
10.5922 137.53 li
10.5922 138.274 li
10.4963 138.418 li
10.4362 138.454 10.3282 138.466 10.1842 138.466 cv
10.0042 138.454 li
9.87225 138.418 li
9.81225 138.358 li
9.78825 138.262 li
9.78825 137.53 li
8.52825 137.53 li
8.45625 137.518 li
8.39625 137.446 li
8.36025 137.29 li
8.36025 137.23 8.34825 137.146 8.34825 137.05 cv
8.34825 136.954 8.36025 136.882 8.36025 136.81 cv
8.39625 136.666 li
8.45625 136.594 li
8.52825 136.57 li
9.78825 136.57 li
9.78825 135.214 li
9.81225 135.13 li
9.87225 135.07 li
10.0042 135.034 li
10.1842 135.022 li
10.3282 135.022 10.4362 135.046 10.4963 135.082 cv
10.5922 135.214 li
10.5922 136.57 li
13.5322 136.57 li
13.8923 136.57 14.1683 136.522 14.3482 136.414 cv
14.5402 136.306 14.6242 136.114 14.6242 135.826 cv
14.6003 135.586 li
14.5522 135.406 li
14.4922 135.262 li
14.4683 135.154 li
14.4802 135.106 li
14.5402 135.058 li
14.6482 135.034 li
14.8282 135.022 li
cp
f
15.2122 129.226 mo
15.2962 129.25 li
15.3442 129.322 li
15.3682 129.454 li
15.3802 129.658 li
15.3802 129.754 15.3682 129.838 15.3682 129.886 cv
15.3442 130.018 li
15.2962 130.09 li
15.2122 130.102 li
14.5162 130.102 li
14.8523 130.414 15.0922 130.714 15.2362 131.002 cv
15.3802 131.29 15.4522 131.59 15.4522 131.89 cv
15.4522 132.238 15.3923 132.538 15.2843 132.778 cv
15.1762 133.018 15.0202 133.222 14.8162 133.366 cv
14.6242 133.51 14.3842 133.618 14.1202 133.678 cv
13.8562 133.75 13.5203 133.774 13.1362 133.774 cv
9.93225 133.774 li
9.86025 133.75 li
9.80025 133.678 li
9.76425 133.522 li
9.76425 133.462 9.75225 133.378 9.75225 133.282 cv
9.75225 133.186 9.76425 133.114 9.76425 133.054 cv
9.80025 132.91 li
9.86025 132.826 li
9.93225 132.802 li
13.0042 132.802 li
13.3162 132.802 13.5682 132.778 13.7483 132.73 cv
13.9402 132.682 14.0962 132.622 14.2282 132.526 cv
14.3602 132.43 14.4563 132.322 14.5282 132.178 cv
14.6003 132.034 14.6362 131.878 14.6362 131.686 cv
14.6362 131.446 14.5522 131.206 14.3842 130.966 cv
14.2162 130.726 13.9522 130.474 13.6163 130.198 cv
9.93225 130.198 li
9.86025 130.174 li
9.80025 130.102 li
9.76425 129.958 li
9.76425 129.898 9.75225 129.814 9.75225 129.706 cv
9.76425 129.478 li
9.80025 129.334 li
9.86025 129.25 li
9.93225 129.226 li
15.2122 129.226 li
cp
f
10.2802 124.354 mo
10.3762 124.354 10.4482 124.366 10.5082 124.366 cv
10.6402 124.39 li
10.7122 124.438 li
10.7362 124.51 li
10.7122 124.63 li
10.6642 124.774 li
10.6162 124.966 li
10.5922 125.194 li
10.5922 125.29 10.6162 125.386 10.6523 125.482 cv
10.6882 125.578 10.7483 125.674 10.8442 125.77 cv
10.9403 125.878 11.0602 125.986 11.2043 126.106 cv
11.3482 126.226 11.5282 126.346 11.7442 126.478 cv
15.2122 126.478 li
15.2962 126.502 li
15.3442 126.574 li
15.3682 126.718 li
15.3682 126.79 15.3802 126.862 15.3802 126.958 cv
15.3802 127.054 15.3682 127.138 15.3682 127.198 cv
15.3442 127.354 li
15.2962 127.426 li
15.2122 127.438 li
9.93225 127.438 li
9.86025 127.426 li
9.80025 127.354 li
9.76425 127.222 li
9.76425 127.174 9.75225 127.102 9.75225 127.006 cv
9.76425 126.79 li
9.80025 126.658 li
9.86025 126.598 li
9.93225 126.574 li
10.7002 126.574 li
10.4963 126.43 10.3282 126.286 10.1962 126.166 cv
10.0642 126.046 9.95625 125.926 9.88425 125.806 cv
9.81225 125.686 9.75225 125.578 9.71625 125.47 cv
9.69225 125.362 9.66825 125.242 9.66825 125.122 cv
9.68025 124.954 li
9.71625 124.75 li
9.77625 124.558 li
9.83625 124.438 li
9.88425 124.39 li
9.95625 124.378 li
10.0763 124.366 li
10.2802 124.354 li
cp
f
15.2122 118.714 mo
15.2962 118.738 li
15.3442 118.822 li
15.3682 118.966 li
15.3682 119.026 15.3802 119.098 15.3802 119.194 cv
15.3802 119.29 15.3682 119.374 15.3682 119.434 cv
15.3442 119.59 li
15.2962 119.662 li
15.2122 119.674 li
12.1163 119.674 li
11.8282 119.674 11.5882 119.698 11.3962 119.746 cv
11.2162 119.794 11.0602 119.866 10.9282 119.962 cv
10.7962 120.058 10.6882 120.166 10.6162 120.31 cv
10.5442 120.454 10.5082 120.61 10.5082 120.802 cv
10.5082 121.042 10.6042 121.294 10.7722 121.534 cv
10.9403 121.774 11.1922 122.026 11.5282 122.29 cv
15.2122 122.29 li
15.2962 122.314 li
15.3442 122.386 li
15.3682 122.53 li
15.3682 122.602 15.3802 122.674 15.3802 122.77 cv
15.3802 122.866 15.3682 122.95 15.3682 123.01 cv
15.3442 123.166 li
15.2962 123.238 li
15.2122 123.25 li
9.93225 123.25 li
9.86025 123.238 li
9.80025 123.166 li
9.76425 123.034 li
9.76425 122.986 9.75225 122.914 9.75225 122.818 cv
9.76425 122.602 li
9.80025 122.47 li
9.86025 122.41 li
9.93225 122.386 li
10.6283 122.386 li
10.3042 122.086 10.0642 121.786 9.90825 121.498 cv
9.75225 121.21 9.66825 120.91 9.66825 120.598 cv
9.66825 120.25 9.72825 119.95 9.84825 119.71 cv
9.96825 119.47 10.1362 119.278 10.3282 119.134 cv
10.5322 118.99 10.7722 118.882 11.0362 118.81 cv
11.3002 118.75 11.6242 118.714 11.9963 118.714 cv
15.2122 118.714 li
cp
f
1.1 lw
2 lc
69.2548 252.74 mo
74.7366 234.598 li
80.2185 206.744 li
85.7003 187.748 li
91.1821 136.629 li
96.6639 162.349 li
102.146 135.562 li
107.628 133.001 li
113.109 91.0601 li
118.591 85.6174 li
124.073 70.0363 li
129.555 81.8822 li
135.037 67.4751 li
140.518 76.9731 li
146 54.4553 li
151.482 69.9296 li
156.964 70.7834 li
162.446 51.0403 li
167.928 73.1312 li
173.409 58.1905 li
178.891 66.0877 li
184.373 55.3091 li
189.855 64.3802 li
195.337 52.1075 li
200.818 57.8703 li
206.3 60.0047 li
211.782 65.4474 li
217.264 54.4553 li
222.746 57.5502 li
228.228 73.4514 li
233.709 53.4948 li
239.191 54.4553 li
244.673 84.8703 li
250.155 80.6016 li
255.637 49.2261 li
261.118 88.819 li
266.6 62.8861 li
272.082 77.1866 li
277.564 64.3802 li
283.046 87.0047 li
288.528 65.1273 li
294.009 59.0443 li
299.491 94.6885 li
304.973 75.1589 li
310.455 50.4 li
315.937 55.3091 li
321.418 50.8269 li
326.9 83.1628 li
332.382 73.1312 li
337.864 40.1549 li
343.346 49.9731 li
348.828 57.8703 li
354.309 62.566 li
359.791 70.3565 li
365.273 68.4355 li
370.755 58.1905 li
376.237 54.0284 li
381.718 45.8111 li
387.2 52.2142 li
392.682 50.8269 li
398.164 55.4158 li
.930816 .793027 0 0 cmyk
@
69.2548 276.645 mo
74.7366 253.06 li
80.2185 227.661 li
85.7003 216.028 li
91.1821 181.665 li
96.6639 145.167 li
102.146 146.127 li
107.628 182.945 li
113.109 181.024 li
118.591 160.855 li
124.073 146.234 li
129.555 144.1 li
135.037 191.91 li
140.518 165.443 li
146 149.115 li
151.482 166.831 li
156.964 181.985 li
162.446 130.973 li
167.928 194.364 li
173.409 159.36 li
178.891 169.072 li
184.373 180.277 li
189.855 140.151 li
195.337 166.831 li
200.818 143.673 li
206.3 170.886 li
211.782 174.408 li
217.264 144.74 li
222.746 167.898 li
228.228 152.424 li
233.709 163.096 li
239.191 159.787 li
244.673 157.546 li
250.155 165.017 li
255.637 156.692 li
261.118 171.847 li
266.6 176.329 li
272.082 176.862 li
277.564 163.629 li
283.046 163.523 li
288.528 155.519 li
294.009 170.353 li
299.491 166.404 li
304.973 162.669 li
310.455 169.499 li
315.937 168.005 li
321.418 154.345 li
326.9 158.507 li
332.382 157.119 li
337.864 162.775 li
343.346 158.293 li
348.828 163.523 li
354.309 154.985 li
359.791 166.404 li
365.273 167.044 li
370.755 170.139 li
376.237 171.633 li
381.718 156.266 li
387.2 165.337 li
392.682 174.408 li
398.164 154.772 li
.634058 1 .171328 .0925002 cmyk
@
69.2548 244.096 mo
74.7366 234.918 li
80.2185 222.645 li
85.7003 225.74 li
91.1821 229.689 li
96.6639 235.345 li
102.146 234.598 li
107.628 238.333 li
113.109 229.689 li
118.591 224.673 li
124.073 232.997 li
129.555 232.357 li
135.037 233.424 li
140.518 247.724 li
146 232.036 li
151.482 226.807 li
156.964 231.076 li
162.446 211.866 li
167.928 239.507 li
173.409 225.953 li
178.891 227.447 li
184.373 232.997 li
189.855 234.918 li
195.337 231.289 li
200.818 232.997 li
206.3 223.392 li
211.782 227.341 li
217.264 225.1 li
222.746 213.894 li
228.228 233.424 li
233.709 228.515 li
239.191 240.36 li
244.673 225.526 li
250.155 227.874 li
255.637 225.42 li
261.118 224.566 li
266.6 231.93 li
272.082 239.187 li
277.564 214.748 li
283.046 216.135 li
288.528 229.795 li
294.009 225.847 li
299.491 233.637 li
304.973 239.08 li
310.455 225.847 li
315.937 233.104 li
321.418 223.392 li
326.9 235.131 li
332.382 238.226 li
337.864 216.028 li
343.346 217.736 li
348.828 209.839 li
354.309 210.479 li
359.791 243.775 li
365.273 244.523 li
370.755 237.799 li
376.237 222.325 li
381.718 234.918 li
387.2 218.803 li
392.682 224.032 li
398.164 241.428 li
.884581 .536797 .613733 .453285 cmyk
@
.8 lw
0 lj
52.8094 309.6 mo
52.8094 7.19998 li
1 /0 /CSD get_res sepcs
1 sep
@
414.609 309.6 mo
414.609 7.19998 li
@
52.8094 309.6 mo
414.609 309.6 li
@
52.8094 7.19998 mo
414.609 7.19998 li
@
531.743 309.1 mo
420.227 309.1 li
419.638 309.098 419.29 308.956 419.081 308.746 cv
418.872 308.537 418.729 308.19 418.727 307.6 cv
418.727 267.256 li
418.729 266.666 418.871 266.319 419.081 266.11 cv
419.29 265.9 419.638 265.758 420.227 265.756 cv
531.743 265.756 li
532.333 265.758 532.68 265.9 532.89 266.11 cv
533.099 266.319 533.241 266.666 533.243 267.256 cv
533.243 307.6 li
533.241 308.19 533.099 308.537 532.89 308.746 cv
532.68 308.956 532.333 309.098 531.743 309.1 cv
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
531.753 310.1 mo
531.75 310.1 531.746 310.1 531.743 310.1 cv
420.227 310.1 li
420.224 310.1 420.221 310.1 420.217 310.1 cv
419.478 310.1 418.829 309.909 418.374 309.454 cv
417.917 308.996 417.726 308.343 417.727 307.6 cv
417.727 267.256 li
417.726 266.513 417.917 265.86 418.374 265.403 cv
418.829 264.948 419.478 264.756 420.217 264.756 cv
420.221 264.756 420.224 264.756 420.227 264.756 cv
531.743 264.756 li
531.746 264.756 531.75 264.756 531.753 264.756 cv
532.492 264.756 533.141 264.948 533.597 265.403 cv
534.054 265.86 534.245 266.513 534.243 267.256 cv
534.243 307.6 li
534.245 308.343 534.054 308.996 533.597 309.454 cv
533.141 309.909 532.492 310.1 531.753 310.1 cv
420.227 309.1 mo
531.743 309.1 li
532.333 309.098 532.68 308.956 532.89 308.746 cv
533.099 308.537 533.241 308.19 533.243 307.6 cv
533.243 267.256 li
533.241 266.666 533.099 266.319 532.89 266.11 cv
532.68 265.9 532.333 265.758 531.743 265.756 cv
420.227 265.756 li
419.638 265.758 419.29 265.9 419.081 266.11 cv
418.871 266.319 418.729 266.666 418.727 267.256 cv
418.727 307.6 li
418.729 308.19 418.872 308.537 419.081 308.746 cv
419.29 308.956 419.638 309.098 420.227 309.1 cv
420.227 309.1 li
1 /1 /CSD get_res sepcs
.160784 sep
f
1.1 lw
1 lj
422.227 272.756 mo
442.227 272.756 li
.930816 .793027 0 0 cmyk
@
455.617 276.126 mo
455.597 276.196 li
455.527 276.246 li
455.397 276.266 li
455.207 276.276 li
454.997 276.266 li
454.867 276.246 li
454.797 276.196 li
454.787 276.126 li
454.787 273.326 li
451.907 273.326 li
451.907 276.126 li
451.887 276.196 li
451.817 276.246 li
451.687 276.266 li
451.487 276.276 li
451.287 276.266 li
451.157 276.246 li
451.087 276.196 li
451.067 276.126 li
451.067 270.066 li
451.087 269.996 li
451.157 269.956 li
451.287 269.926 li
451.487 269.906 li
451.687 269.926 li
451.817 269.956 li
451.887 269.996 li
451.907 270.066 li
451.907 272.596 li
454.787 272.596 li
454.787 270.066 li
454.797 269.996 li
454.867 269.956 li
454.997 269.926 li
455.207 269.906 li
455.397 269.926 li
455.527 269.956 li
455.597 269.996 li
455.617 270.066 li
455.617 276.126 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
460.957 273.746 mo
460.957 273.876 460.917 273.966 460.857 274.016 cv
460.637 274.096 li
457.757 274.096 li
457.757 274.346 457.777 274.566 457.827 274.756 cv
457.877 274.956 457.957 275.116 458.077 275.256 cv
458.187 275.396 458.337 275.506 458.517 275.586 cv
458.697 275.666 458.927 275.696 459.187 275.696 cv
459.397 275.696 459.587 275.686 459.747 275.646 cv
459.907 275.616 460.047 275.576 460.167 275.536 cv
460.287 275.496 460.377 275.456 460.457 275.416 cv
460.637 275.366 li
460.697 275.386 li
460.737 275.436 li
460.757 275.526 li
460.767 275.676 li
460.757 275.786 li
460.747 275.876 li
460.727 275.936 li
460.677 275.996 li
460.527 276.076 li
460.437 276.116 460.327 276.156 460.187 276.196 cv
460.047 276.236 459.877 276.266 459.697 276.296 cv
459.507 276.316 459.307 276.336 459.107 276.336 cv
458.747 276.336 458.427 276.286 458.157 276.196 cv
457.877 276.096 457.647 275.946 457.467 275.746 cv
457.287 275.546 457.147 275.306 457.047 275.006 cv
456.947 274.706 456.907 274.356 456.907 273.956 cv
456.907 273.576 456.957 273.236 457.057 272.936 cv
457.157 272.636 457.297 272.386 457.477 272.176 cv
457.657 271.966 457.887 271.806 458.147 271.686 cv
458.407 271.576 458.697 271.516 459.017 271.516 cv
459.357 271.516 459.657 271.576 459.897 271.686 cv
460.137 271.806 460.337 271.956 460.497 272.136 cv
460.657 272.326 460.767 272.546 460.847 272.796 cv
460.917 273.046 460.957 273.316 460.957 273.596 cv
460.957 273.746 li
cp
460.147 273.506 mo
460.147 273.086 460.057 272.756 459.857 272.516 cv
459.657 272.276 459.367 272.146 458.987 272.146 cv
458.787 272.146 458.607 272.186 458.457 272.266 cv
458.307 272.346 458.187 272.446 458.087 272.566 cv
457.987 272.686 457.907 272.836 457.847 272.996 cv
457.787 273.156 457.757 273.326 457.757 273.506 cv
460.147 273.506 li
cp
f
464.467 275.816 mo
464.467 275.916 464.457 275.986 464.447 276.036 cv
464.387 276.156 li
464.277 276.226 li
464.097 276.276 li
463.877 276.306 li
463.657 276.326 li
463.427 276.326 463.227 276.296 463.067 276.246 cv
462.907 276.186 462.767 276.096 462.667 275.976 cv
462.567 275.856 462.487 275.706 462.447 275.516 cv
462.397 275.326 462.377 275.106 462.377 274.846 cv
462.377 272.286 li
461.757 272.286 li
461.637 272.206 li
461.607 272.156 461.597 272.066 461.597 271.946 cv
461.607 271.796 li
461.637 271.686 li
461.687 271.636 li
461.767 271.616 li
462.377 271.616 li
462.377 270.566 li
462.387 270.506 li
462.447 270.456 li
462.577 270.426 li
462.777 270.416 li
462.977 270.426 li
463.097 270.456 li
463.157 270.506 li
463.177 270.566 li
463.177 271.616 li
464.307 271.616 li
464.377 271.636 li
464.427 271.686 li
464.457 271.796 li
464.467 271.946 li
464.467 272.066 464.447 272.156 464.417 272.206 cv
464.307 272.286 li
463.177 272.286 li
463.177 274.736 li
463.177 275.036 463.217 275.266 463.307 275.416 cv
463.397 275.576 463.557 275.646 463.797 275.646 cv
463.997 275.626 li
464.147 275.586 li
464.267 275.536 li
464.357 275.516 li
464.397 275.526 li
464.437 275.576 li
464.457 275.666 li
464.467 275.816 li
cp
f
469.287 273.746 mo
469.287 273.876 469.247 273.966 469.187 274.016 cv
468.967 274.096 li
466.087 274.096 li
466.087 274.346 466.107 274.566 466.157 274.756 cv
466.207 274.956 466.287 275.116 466.407 275.256 cv
466.517 275.396 466.667 275.506 466.847 275.586 cv
467.027 275.666 467.257 275.696 467.517 275.696 cv
467.727 275.696 467.917 275.686 468.077 275.646 cv
468.237 275.616 468.377 275.576 468.497 275.536 cv
468.617 275.496 468.707 275.456 468.787 275.416 cv
468.967 275.366 li
469.027 275.386 li
469.067 275.436 li
469.087 275.526 li
469.097 275.676 li
469.087 275.786 li
469.077 275.876 li
469.057 275.936 li
469.007 275.996 li
468.857 276.076 li
468.767 276.116 468.657 276.156 468.517 276.196 cv
468.377 276.236 468.207 276.266 468.027 276.296 cv
467.837 276.316 467.637 276.336 467.437 276.336 cv
467.077 276.336 466.757 276.286 466.487 276.196 cv
466.207 276.096 465.977 275.946 465.797 275.746 cv
465.617 275.546 465.477 275.306 465.377 275.006 cv
465.277 274.706 465.237 274.356 465.237 273.956 cv
465.237 273.576 465.287 273.236 465.387 272.936 cv
465.487 272.636 465.627 272.386 465.807 272.176 cv
465.987 271.966 466.217 271.806 466.477 271.686 cv
466.737 271.576 467.027 271.516 467.347 271.516 cv
467.687 271.516 467.987 271.576 468.227 271.686 cv
468.467 271.806 468.667 271.956 468.827 272.136 cv
468.987 272.326 469.097 272.546 469.177 272.796 cv
469.247 273.046 469.287 273.316 469.287 273.596 cv
469.287 273.746 li
cp
468.477 273.506 mo
468.477 273.086 468.387 272.756 468.187 272.516 cv
467.987 272.276 467.697 272.146 467.317 272.146 cv
467.117 272.146 466.937 272.186 466.787 272.266 cv
466.637 272.346 466.517 272.446 466.417 272.566 cv
466.317 272.686 466.237 272.836 466.177 272.996 cv
466.117 273.156 466.087 273.326 466.087 273.506 cv
468.477 273.506 li
cp
f
473.087 272.026 mo
473.077 272.216 li
473.057 272.326 li
473.017 272.386 li
472.957 272.406 li
472.857 272.386 li
472.737 272.346 li
472.577 272.306 li
472.387 272.286 li
472.147 272.336 li
471.908 272.496 li
471.817 272.576 471.727 272.676 471.627 272.796 cv
471.527 272.916 471.427 273.066 471.317 273.246 cv
471.317 276.136 li
471.297 276.206 li
471.237 276.246 li
471.117 276.266 li
470.917 276.276 li
470.717 276.266 li
470.587 276.246 li
470.527 276.206 li
470.517 276.136 li
470.517 271.736 li
470.527 271.676 li
470.587 271.626 li
470.697 271.596 li
470.877 271.586 li
471.057 271.596 li
471.167 271.626 li
471.217 271.676 li
471.237 271.736 li
471.237 272.376 li
471.357 272.206 471.477 272.066 471.577 271.956 cv
471.677 271.846 471.777 271.756 471.877 271.696 cv
471.977 271.636 472.067 271.586 472.158 271.556 cv
472.247 271.536 472.347 271.516 472.447 271.516 cv
472.587 271.526 li
472.757 271.556 li
472.917 271.606 li
473.017 271.656 li
473.057 271.696 li
473.067 271.756 li
473.077 271.856 li
473.087 272.026 li
cp
f
478.087 273.886 mo
478.087 274.246 478.037 274.576 477.947 274.876 cv
477.847 275.176 477.707 275.436 477.527 275.656 cv
477.337 275.876 477.097 276.046 476.817 276.166 cv
476.537 276.276 476.207 276.336 475.847 276.336 cv
475.487 276.336 475.167 276.286 474.897 276.186 cv
474.627 276.086 474.407 275.926 474.227 275.726 cv
474.047 275.526 473.907 275.276 473.827 274.976 cv
473.737 274.686 473.697 274.356 473.697 273.976 cv
473.697 273.616 473.737 273.286 473.837 272.986 cv
473.927 272.686 474.067 272.426 474.257 272.206 cv
474.437 271.986 474.677 271.816 474.957 271.696 cv
475.237 271.576 475.557 271.516 475.937 271.516 cv
476.297 271.516 476.607 271.576 476.877 271.686 cv
477.147 271.796 477.377 271.956 477.557 272.156 cv
477.737 272.356 477.867 272.606 477.957 272.896 cv
478.037 273.196 478.087 273.526 478.087 273.886 cv
cp
477.237 273.946 mo
477.237 273.706 477.207 273.486 477.167 273.266 cv
477.127 273.056 477.057 272.876 476.957 272.716 cv
476.857 272.556 476.717 272.436 476.547 272.336 cv
476.367 272.246 476.157 272.196 475.907 272.196 cv
475.667 272.196 475.457 272.246 475.287 272.326 cv
475.117 272.406 474.977 272.526 474.867 272.686 cv
474.757 272.846 474.677 273.026 474.617 273.236 cv
474.557 273.446 474.537 273.676 474.537 273.926 cv
474.537 274.166 474.557 274.396 474.607 274.606 cv
474.647 274.816 474.727 274.996 474.827 275.156 cv
474.927 275.316 475.057 275.446 475.237 275.536 cv
475.407 275.626 475.627 275.666 475.887 275.666 cv
476.117 275.666 476.317 275.626 476.497 275.546 cv
476.667 275.466 476.807 275.346 476.917 275.186 cv
477.027 275.036 477.107 274.856 477.157 274.646 cv
477.207 274.436 477.237 274.206 477.237 273.946 cv
cp
f
482.947 271.936 mo
482.947 272.056 482.927 272.136 482.897 272.186 cv
482.777 272.266 li
482.147 272.266 li
482.257 272.386 482.337 272.516 482.387 272.656 cv
482.427 272.796 482.457 272.946 482.457 273.096 cv
482.457 273.356 482.417 273.576 482.337 273.766 cv
482.257 273.966 482.137 274.126 481.987 274.266 cv
481.827 274.406 481.647 274.506 481.447 274.576 cv
481.237 274.646 481.007 274.676 480.757 274.676 cv
480.577 274.676 480.397 274.656 480.237 274.606 cv
480.077 274.566 479.947 274.506 479.867 274.426 cv
479.717 274.636 li
479.667 274.886 li
479.667 275.006 479.717 275.096 479.827 275.176 cv
479.927 275.256 480.067 275.296 480.247 275.296 cv
481.397 275.346 li
481.617 275.356 481.817 275.386 481.997 275.436 cv
482.177 275.496 482.337 275.566 482.477 275.666 cv
482.607 275.766 482.707 275.896 482.787 276.036 cv
482.857 276.176 482.897 276.336 482.897 276.526 cv
482.897 276.726 482.847 276.916 482.767 277.096 cv
482.687 277.276 482.557 277.436 482.377 277.576 cv
482.197 277.716 481.977 277.826 481.707 277.906 cv
481.437 277.986 481.117 278.026 480.757 278.026 cv
480.397 278.026 480.097 277.996 479.847 277.936 cv
479.597 277.876 479.397 277.786 479.237 277.686 cv
479.077 277.586 478.957 277.456 478.887 277.316 cv
478.817 277.166 478.787 277.006 478.787 276.846 cv
478.787 276.736 478.797 276.636 478.827 276.536 cv
478.847 276.436 478.887 276.336 478.947 276.256 cv
479.147 275.996 li
479.227 275.916 479.317 275.826 479.417 275.746 cv
479.257 275.666 479.137 275.566 479.057 275.446 cv
478.977 275.326 478.947 275.186 478.947 275.036 cv
478.947 274.846 478.987 274.676 479.067 274.516 cv
479.147 274.356 479.257 274.216 479.377 274.086 cv
479.277 273.966 479.197 273.836 479.137 273.686 cv
479.077 273.536 479.047 273.346 479.047 273.126 cv
479.047 272.886 479.087 272.656 479.177 272.456 cv
479.257 272.256 479.377 272.096 479.527 271.956 cv
479.677 271.816 479.857 271.716 480.067 271.636 cv
480.277 271.566 480.507 271.526 480.757 271.526 cv
480.887 271.526 481.007 271.536 481.127 271.556 cv
481.237 271.576 481.347 271.596 481.447 271.616 cv
482.777 271.616 li
482.907 271.696 li
482.927 271.756 482.947 271.836 482.947 271.936 cv
cp
481.687 273.096 mo
481.687 272.796 481.597 272.566 481.437 272.396 cv
481.277 272.236 481.037 272.146 480.737 272.146 cv
480.577 272.146 480.447 272.176 480.327 272.226 cv
480.207 272.276 480.117 272.346 480.037 272.436 cv
479.957 272.536 479.907 272.636 479.867 272.756 cv
479.827 272.876 479.817 272.996 479.817 273.126 cv
479.817 273.416 479.897 273.646 480.057 273.806 cv
480.217 273.976 480.457 274.056 480.757 274.056 cv
480.917 274.056 481.047 274.036 481.167 273.986 cv
481.287 273.936 481.377 273.866 481.457 273.776 cv
481.537 273.686 481.587 273.586 481.627 273.466 cv
481.667 273.346 481.687 273.226 481.687 273.096 cv
cp
482.087 276.566 mo
482.087 276.376 482.007 276.236 481.857 276.136 cv
481.697 276.036 481.497 275.986 481.237 275.976 cv
480.097 275.936 li
479.987 276.016 479.897 276.096 479.837 276.166 cv
479.677 276.366 li
479.597 276.566 li
479.577 276.766 li
479.577 276.976 479.677 277.136 479.897 277.246 cv
480.107 277.356 480.407 277.416 480.797 277.416 cv
481.037 277.416 481.247 277.386 481.407 277.346 cv
481.567 277.296 481.707 277.236 481.807 277.156 cv
481.907 277.076 481.977 276.986 482.017 276.886 cv
482.057 276.786 482.087 276.676 482.087 276.566 cv
cp
f
487.737 273.746 mo
487.737 273.876 487.697 273.966 487.637 274.016 cv
487.417 274.096 li
484.537 274.096 li
484.537 274.346 484.557 274.566 484.607 274.756 cv
484.657 274.956 484.737 275.116 484.857 275.256 cv
484.967 275.396 485.117 275.506 485.297 275.586 cv
485.477 275.666 485.707 275.696 485.967 275.696 cv
486.177 275.696 486.367 275.686 486.527 275.646 cv
486.687 275.616 486.827 275.576 486.947 275.536 cv
487.067 275.496 487.157 275.456 487.237 275.416 cv
487.417 275.366 li
487.477 275.386 li
487.517 275.436 li
487.537 275.526 li
487.547 275.676 li
487.537 275.786 li
487.527 275.876 li
487.507 275.936 li
487.457 275.996 li
487.307 276.076 li
487.217 276.116 487.107 276.156 486.967 276.196 cv
486.827 276.236 486.657 276.266 486.477 276.296 cv
486.287 276.316 486.087 276.336 485.887 276.336 cv
485.527 276.336 485.207 276.286 484.937 276.196 cv
484.657 276.096 484.427 275.946 484.247 275.746 cv
484.067 275.546 483.927 275.306 483.827 275.006 cv
483.727 274.706 483.687 274.356 483.687 273.956 cv
483.687 273.576 483.737 273.236 483.837 272.936 cv
483.937 272.636 484.077 272.386 484.257 272.176 cv
484.437 271.966 484.667 271.806 484.927 271.686 cv
485.187 271.576 485.477 271.516 485.797 271.516 cv
486.137 271.516 486.437 271.576 486.677 271.686 cv
486.917 271.806 487.117 271.956 487.277 272.136 cv
487.437 272.326 487.547 272.546 487.627 272.796 cv
487.697 273.046 487.737 273.316 487.737 273.596 cv
487.737 273.746 li
cp
486.927 273.506 mo
486.927 273.086 486.837 272.756 486.637 272.516 cv
486.437 272.276 486.147 272.146 485.767 272.146 cv
485.567 272.146 485.387 272.186 485.237 272.266 cv
485.087 272.346 484.967 272.446 484.867 272.566 cv
484.767 272.686 484.687 272.836 484.627 272.996 cv
484.567 273.156 484.537 273.326 484.537 273.506 cv
486.927 273.506 li
cp
f
492.747 276.136 mo
492.727 276.206 li
492.657 276.246 li
492.537 276.266 li
492.347 276.276 li
492.147 276.266 li
492.017 276.246 li
491.957 276.206 li
491.947 276.136 li
491.947 273.556 li
491.947 273.316 491.927 273.116 491.887 272.956 cv
491.847 272.806 491.787 272.676 491.707 272.566 cv
491.627 272.456 491.537 272.366 491.417 272.306 cv
491.297 272.246 491.167 272.216 491.007 272.216 cv
490.807 272.216 490.597 272.296 490.397 272.436 cv
490.197 272.576 489.987 272.786 489.767 273.066 cv
489.767 276.136 li
489.747 276.206 li
489.687 276.246 li
489.567 276.266 li
489.367 276.276 li
489.167 276.266 li
489.037 276.246 li
488.977 276.206 li
488.967 276.136 li
488.967 271.736 li
488.977 271.676 li
489.037 271.626 li
489.147 271.596 li
489.327 271.586 li
489.507 271.596 li
489.617 271.626 li
489.667 271.676 li
489.687 271.736 li
489.687 272.316 li
489.937 272.046 490.187 271.846 490.427 271.716 cv
490.667 271.586 490.917 271.516 491.177 271.516 cv
491.467 271.516 491.717 271.566 491.917 271.666 cv
492.117 271.766 492.277 271.906 492.397 272.066 cv
492.517 272.236 492.607 272.436 492.667 272.656 cv
492.717 272.876 492.747 273.146 492.747 273.456 cv
492.747 276.136 li
cp
f
497.967 273.746 mo
497.967 273.876 497.927 273.966 497.867 274.016 cv
497.647 274.096 li
494.767 274.096 li
494.767 274.346 494.787 274.566 494.837 274.756 cv
494.887 274.956 494.967 275.116 495.087 275.256 cv
495.197 275.396 495.347 275.506 495.527 275.586 cv
495.707 275.666 495.937 275.696 496.197 275.696 cv
496.407 275.696 496.597 275.686 496.757 275.646 cv
496.917 275.616 497.057 275.576 497.177 275.536 cv
497.297 275.496 497.387 275.456 497.467 275.416 cv
497.647 275.366 li
497.707 275.386 li
497.747 275.436 li
497.767 275.526 li
497.777 275.676 li
497.767 275.786 li
497.757 275.876 li
497.737 275.936 li
497.687 275.996 li
497.537 276.076 li
497.447 276.116 497.337 276.156 497.197 276.196 cv
497.057 276.236 496.887 276.266 496.707 276.296 cv
496.517 276.316 496.317 276.336 496.117 276.336 cv
495.757 276.336 495.437 276.286 495.167 276.196 cv
494.887 276.096 494.657 275.946 494.477 275.746 cv
494.297 275.546 494.157 275.306 494.057 275.006 cv
493.957 274.706 493.917 274.356 493.917 273.956 cv
493.917 273.576 493.967 273.236 494.067 272.936 cv
494.167 272.636 494.307 272.386 494.487 272.176 cv
494.667 271.966 494.897 271.806 495.157 271.686 cv
495.417 271.576 495.707 271.516 496.027 271.516 cv
496.367 271.516 496.667 271.576 496.907 271.686 cv
497.147 271.806 497.347 271.956 497.507 272.136 cv
497.667 272.326 497.777 272.546 497.857 272.796 cv
497.927 273.046 497.967 273.316 497.967 273.596 cv
497.967 273.746 li
cp
497.157 273.506 mo
497.157 273.086 497.067 272.756 496.867 272.516 cv
496.667 272.276 496.377 272.146 495.997 272.146 cv
495.797 272.146 495.617 272.186 495.467 272.266 cv
495.317 272.346 495.197 272.446 495.097 272.566 cv
494.997 272.686 494.917 272.836 494.857 272.996 cv
494.797 273.156 494.767 273.326 494.767 273.506 cv
497.157 273.506 li
cp
f
503.277 273.886 mo
503.277 274.246 503.227 274.576 503.137 274.876 cv
503.037 275.176 502.897 275.436 502.717 275.656 cv
502.527 275.876 502.287 276.046 502.007 276.166 cv
501.727 276.276 501.397 276.336 501.037 276.336 cv
500.677 276.336 500.357 276.286 500.087 276.186 cv
499.817 276.086 499.597 275.926 499.417 275.726 cv
499.237 275.526 499.097 275.276 499.017 274.976 cv
498.927 274.686 498.887 274.356 498.887 273.976 cv
498.887 273.616 498.927 273.286 499.027 272.986 cv
499.117 272.686 499.257 272.426 499.447 272.206 cv
499.627 271.986 499.867 271.816 500.147 271.696 cv
500.427 271.576 500.747 271.516 501.127 271.516 cv
501.487 271.516 501.797 271.576 502.067 271.686 cv
502.337 271.796 502.567 271.956 502.747 272.156 cv
502.927 272.356 503.057 272.606 503.147 272.896 cv
503.227 273.196 503.277 273.526 503.277 273.886 cv
cp
502.427 273.946 mo
502.427 273.706 502.397 273.486 502.357 273.266 cv
502.317 273.056 502.247 272.876 502.147 272.716 cv
502.047 272.556 501.907 272.436 501.737 272.336 cv
501.557 272.246 501.347 272.196 501.097 272.196 cv
500.857 272.196 500.647 272.246 500.477 272.326 cv
500.307 272.406 500.167 272.526 500.057 272.686 cv
499.947 272.846 499.867 273.026 499.807 273.236 cv
499.747 273.446 499.727 273.676 499.727 273.926 cv
499.727 274.166 499.747 274.396 499.797 274.606 cv
499.837 274.816 499.917 274.996 500.017 275.156 cv
500.117 275.316 500.247 275.446 500.427 275.536 cv
500.597 275.626 500.817 275.666 501.077 275.666 cv
501.307 275.666 501.507 275.626 501.687 275.546 cv
501.857 275.466 501.997 275.346 502.107 275.186 cv
502.217 275.036 502.297 274.856 502.347 274.646 cv
502.397 274.436 502.427 274.206 502.427 273.946 cv
cp
f
508.227 276.136 mo
508.207 276.206 li
508.147 276.246 li
508.037 276.266 li
507.867 276.276 li
507.677 276.266 li
507.567 276.246 li
507.507 276.206 li
507.497 276.136 li
507.497 275.556 li
507.237 275.836 506.987 276.036 506.747 276.156 cv
506.507 276.276 506.257 276.336 506.007 276.336 cv
505.717 276.336 505.467 276.286 505.267 276.196 cv
505.067 276.106 504.897 275.976 504.777 275.806 cv
504.657 275.646 504.567 275.446 504.517 275.226 cv
504.457 275.006 504.437 274.726 504.437 274.406 cv
504.437 271.736 li
504.457 271.676 li
504.517 271.626 li
504.647 271.596 li
504.847 271.586 li
505.037 271.596 li
505.157 271.626 li
505.227 271.676 li
505.247 271.736 li
505.247 274.296 li
505.247 274.556 505.267 274.766 505.307 274.916 cv
505.347 275.076 505.397 275.206 505.477 275.316 cv
505.557 275.426 505.647 275.506 505.767 275.566 cv
505.887 275.626 506.017 275.656 506.177 275.656 cv
506.377 275.656 506.577 275.586 506.777 275.446 cv
506.977 275.306 507.187 275.086 507.417 274.806 cv
507.417 271.736 li
507.437 271.676 li
507.497 271.626 li
507.617 271.596 li
507.827 271.586 li
508.017 271.596 li
508.137 271.626 li
508.207 271.676 li
508.227 271.736 li
508.227 276.136 li
cp
f
512.477 274.936 mo
512.477 275.166 512.427 275.366 512.347 275.546 cv
512.267 275.726 512.147 275.866 511.997 275.986 cv
511.837 276.106 511.657 276.196 511.447 276.256 cv
511.227 276.306 510.997 276.336 510.747 276.336 cv
510.587 276.336 510.437 276.316 510.297 276.296 cv
510.157 276.276 510.027 276.256 509.917 276.216 cv
509.807 276.186 509.717 276.146 509.637 276.106 cv
509.457 275.996 li
509.387 275.856 li
509.367 275.796 509.367 275.716 509.367 275.616 cv
509.377 275.466 li
509.397 275.356 li
509.437 275.306 li
509.497 275.286 li
509.657 275.356 li
509.727 275.396 509.817 275.446 509.917 275.496 cv
510.017 275.556 510.137 275.606 510.277 275.646 cv
510.417 275.686 510.577 275.706 510.767 275.706 cv
510.897 275.706 511.017 275.696 511.127 275.666 cv
511.237 275.636 511.337 275.596 511.417 275.536 cv
511.607 275.316 li
511.647 275.236 511.677 275.126 511.677 275.006 cv
511.677 274.886 511.637 274.776 511.577 274.696 cv
511.517 274.616 511.427 274.536 511.327 274.466 cv
511.227 274.406 511.107 274.346 510.977 274.296 cv
510.847 274.246 510.717 274.196 510.577 274.136 cv
510.437 274.076 510.297 274.016 510.167 273.946 cv
510.037 273.876 509.917 273.786 509.817 273.686 cv
509.707 273.586 509.617 273.466 509.557 273.326 cv
509.497 273.186 509.467 273.026 509.467 272.826 cv
509.467 272.656 509.497 272.486 509.567 272.326 cv
509.627 272.166 509.727 272.036 509.867 271.916 cv
509.997 271.796 510.167 271.706 510.367 271.626 cv
510.567 271.556 510.797 271.516 511.067 271.516 cv
511.187 271.516 511.297 271.526 511.417 271.546 cv
511.537 271.566 511.637 271.596 511.737 271.626 cv
511.837 271.656 511.917 271.686 511.987 271.716 cv
512.137 271.806 li
512.197 271.876 li
512.227 271.946 li
512.237 272.036 li
512.247 272.166 li
512.237 272.306 li
512.217 272.406 li
512.167 272.466 li
512.117 272.486 li
511.987 272.436 li
511.777 272.316 li
511.687 272.276 511.587 272.246 511.467 272.206 cv
511.347 272.166 511.207 272.146 511.057 272.146 cv
510.917 272.146 510.797 272.166 510.697 272.196 cv
510.597 272.226 510.507 272.266 510.447 272.326 cv
510.287 272.526 li
510.237 272.776 li
510.237 272.906 510.267 273.016 510.337 273.096 cv
510.397 273.186 510.487 273.266 510.587 273.326 cv
510.687 273.396 510.807 273.456 510.947 273.506 cv
511.077 273.556 511.217 273.606 511.357 273.666 cv
511.497 273.726 511.627 273.786 511.767 273.856 cv
511.897 273.926 512.017 274.006 512.127 274.106 cv
512.227 274.206 512.317 274.316 512.377 274.456 cv
512.437 274.596 512.477 274.756 512.477 274.936 cv
cp
f
422.227 286.537 mo
442.227 286.537 li
.634058 1 .171328 .0925002 cmyk
@
454.387 284.077 mo
454.377 284.247 li
454.337 284.357 li
454.287 284.417 li
454.217 284.427 li
451.907 284.427 li
451.907 286.577 li
454.097 286.577 li
454.157 286.597 li
454.207 286.657 li
454.247 286.767 li
454.257 286.927 li
454.247 287.087 li
454.207 287.197 li
454.157 287.257 li
454.097 287.277 li
451.907 287.277 li
451.907 289.907 li
451.887 289.977 li
451.817 290.027 li
451.687 290.047 li
451.487 290.057 li
451.287 290.047 li
451.157 290.027 li
451.087 289.977 li
451.067 289.907 li
451.067 284.057 li
451.067 283.937 451.097 283.847 451.167 283.797 cv
451.377 283.717 li
454.217 283.717 li
454.287 283.737 li
454.337 283.807 li
454.377 283.917 li
454.387 284.077 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
456.367 289.917 mo
456.347 289.987 li
456.287 290.027 li
456.167 290.047 li
455.967 290.057 li
455.767 290.047 li
455.637 290.027 li
455.577 289.987 li
455.567 289.917 li
455.567 285.517 li
455.577 285.457 li
455.637 285.407 li
455.767 285.377 li
455.967 285.367 li
456.167 285.377 li
456.287 285.407 li
456.347 285.457 li
456.367 285.517 li
456.367 289.917 li
cp
456.467 284.037 mo
456.467 284.227 456.427 284.357 456.357 284.427 cv
456.277 284.497 456.147 284.527 455.957 284.527 cv
455.767 284.527 455.637 284.497 455.567 284.427 cv
455.497 284.367 455.467 284.237 455.467 284.047 cv
455.467 283.867 455.497 283.737 455.567 283.667 cv
455.637 283.597 455.767 283.557 455.967 283.557 cv
456.157 283.557 456.287 283.597 456.357 283.657 cv
456.427 283.727 456.467 283.857 456.467 284.037 cv
cp
f
461.187 289.827 mo
461.227 289.937 li
461.177 290.017 li
461.027 290.047 li
460.967 290.047 460.887 290.057 460.787 290.057 cv
460.687 290.057 460.617 290.047 460.557 290.047 cv
460.417 290.027 li
460.337 289.997 li
460.297 289.927 li
459.237 288.187 li
458.187 289.927 li
458.137 289.997 li
458.067 290.027 li
457.927 290.047 li
457.717 290.057 li
457.617 290.057 457.537 290.047 457.477 290.047 cv
457.347 290.017 li
457.307 289.937 li
457.357 289.827 li
458.727 287.677 li
457.427 285.617 li
457.387 285.507 li
457.427 285.427 li
457.567 285.377 li
457.627 285.377 457.717 285.367 457.827 285.367 cv
458.047 285.377 li
458.187 285.407 li
458.257 285.437 li
458.307 285.497 li
459.307 287.127 li
460.317 285.497 li
460.357 285.447 li
460.427 285.407 li
460.547 285.377 li
460.757 285.367 li
460.987 285.377 li
461.117 285.417 li
461.157 285.497 li
461.107 285.617 li
459.827 287.657 li
461.187 289.827 li
cp
f
465.937 287.527 mo
465.937 287.657 465.897 287.747 465.837 287.797 cv
465.617 287.877 li
462.737 287.877 li
462.737 288.127 462.757 288.347 462.807 288.537 cv
462.857 288.737 462.937 288.897 463.057 289.037 cv
463.167 289.177 463.317 289.287 463.497 289.367 cv
463.677 289.447 463.907 289.477 464.167 289.477 cv
464.377 289.477 464.567 289.467 464.727 289.427 cv
464.887 289.397 465.027 289.357 465.147 289.317 cv
465.267 289.277 465.357 289.237 465.437 289.197 cv
465.617 289.147 li
465.677 289.167 li
465.717 289.217 li
465.737 289.307 li
465.747 289.457 li
465.737 289.567 li
465.727 289.657 li
465.707 289.717 li
465.657 289.777 li
465.507 289.857 li
465.417 289.897 465.307 289.937 465.167 289.977 cv
465.027 290.017 464.857 290.047 464.677 290.077 cv
464.487 290.097 464.287 290.117 464.087 290.117 cv
463.727 290.117 463.407 290.067 463.137 289.977 cv
462.857 289.877 462.627 289.727 462.447 289.527 cv
462.267 289.327 462.127 289.087 462.027 288.787 cv
461.927 288.487 461.887 288.137 461.887 287.737 cv
461.887 287.357 461.937 287.017 462.037 286.717 cv
462.137 286.417 462.277 286.167 462.457 285.957 cv
462.637 285.747 462.867 285.587 463.127 285.467 cv
463.387 285.357 463.677 285.297 463.997 285.297 cv
464.337 285.297 464.637 285.357 464.877 285.467 cv
465.117 285.587 465.317 285.737 465.477 285.917 cv
465.637 286.107 465.747 286.327 465.827 286.577 cv
465.897 286.827 465.937 287.097 465.937 287.377 cv
465.937 287.527 li
cp
465.127 287.287 mo
465.127 286.867 465.037 286.537 464.837 286.297 cv
464.637 286.057 464.347 285.927 463.967 285.927 cv
463.767 285.927 463.587 285.967 463.437 286.047 cv
463.287 286.127 463.167 286.227 463.067 286.347 cv
462.967 286.467 462.887 286.617 462.827 286.777 cv
462.767 286.937 462.737 287.107 462.737 287.287 cv
465.127 287.287 li
cp
f
470.927 289.917 mo
470.907 289.987 li
470.847 290.027 li
470.737 290.047 li
470.577 290.057 li
470.407 290.047 li
470.287 290.027 li
470.227 289.987 li
470.207 289.917 li
470.207 289.337 li
469.977 289.587 469.737 289.777 469.487 289.917 cv
469.237 290.047 468.967 290.117 468.677 290.117 cv
468.347 290.117 468.067 290.057 467.847 289.937 cv
467.617 289.817 467.427 289.657 467.287 289.437 cv
467.147 289.227 467.037 288.977 466.977 288.687 cv
466.917 288.397 466.887 288.087 466.887 287.767 cv
466.887 287.397 466.927 287.057 467.007 286.747 cv
467.087 286.447 467.207 286.187 467.367 285.967 cv
467.527 285.757 467.717 285.597 467.957 285.477 cv
468.197 285.357 468.467 285.297 468.777 285.297 cv
469.037 285.297 469.267 285.357 469.487 285.467 cv
469.697 285.587 469.907 285.747 470.117 285.967 cv
470.117 283.407 li
470.137 283.347 li
470.197 283.297 li
470.317 283.267 li
470.517 283.257 li
470.717 283.267 li
470.837 283.297 li
470.907 283.347 li
470.927 283.407 li
470.927 289.917 li
cp
470.117 286.827 mo
469.897 286.557 469.677 286.347 469.477 286.207 cv
469.277 286.067 469.067 285.997 468.847 285.997 cv
468.637 285.997 468.457 286.047 468.317 286.147 cv
468.177 286.247 468.057 286.367 467.977 286.527 cv
467.887 286.687 467.817 286.867 467.777 287.067 cv
467.737 287.267 467.717 287.477 467.717 287.687 cv
467.717 287.907 467.727 288.127 467.767 288.337 cv
467.807 288.547 467.867 288.737 467.947 288.897 cv
468.027 289.067 468.147 289.197 468.287 289.297 cv
468.427 289.397 468.597 289.437 468.817 289.437 cv
468.917 289.437 469.027 289.427 469.127 289.397 cv
469.227 289.377 469.327 289.327 469.427 289.257 cv
469.527 289.187 469.637 289.097 469.757 288.987 cv
469.867 288.877 469.987 288.737 470.117 288.577 cv
470.117 286.827 li
cp
f
478.047 289.667 mo
478.037 289.837 li
477.997 289.947 li
477.947 290.017 li
477.877 290.037 li
475.077 290.037 li
474.867 289.967 li
474.797 289.917 474.767 289.827 474.767 289.697 cv
474.767 283.847 li
474.787 283.777 li
474.857 283.737 li
474.987 283.707 li
475.187 283.687 li
475.387 283.707 li
475.517 283.737 li
475.587 283.777 li
475.607 283.847 li
475.607 289.307 li
477.877 289.307 li
477.947 289.337 li
477.997 289.397 li
478.037 289.507 li
478.047 289.667 li
cp
f
482.627 287.527 mo
482.627 287.657 482.587 287.747 482.527 287.797 cv
482.307 287.877 li
479.427 287.877 li
479.427 288.127 479.447 288.347 479.497 288.537 cv
479.547 288.737 479.627 288.897 479.747 289.037 cv
479.857 289.177 480.007 289.287 480.187 289.367 cv
480.367 289.447 480.597 289.477 480.857 289.477 cv
481.067 289.477 481.257 289.467 481.417 289.427 cv
481.577 289.397 481.717 289.357 481.837 289.317 cv
481.957 289.277 482.047 289.237 482.127 289.197 cv
482.307 289.147 li
482.367 289.167 li
482.407 289.217 li
482.427 289.307 li
482.437 289.457 li
482.427 289.567 li
482.417 289.657 li
482.397 289.717 li
482.347 289.777 li
482.197 289.857 li
482.107 289.897 481.997 289.937 481.857 289.977 cv
481.717 290.017 481.547 290.047 481.367 290.077 cv
481.177 290.097 480.977 290.117 480.777 290.117 cv
480.417 290.117 480.097 290.067 479.827 289.977 cv
479.547 289.877 479.317 289.727 479.137 289.527 cv
478.957 289.327 478.817 289.087 478.717 288.787 cv
478.617 288.487 478.577 288.137 478.577 287.737 cv
478.577 287.357 478.627 287.017 478.727 286.717 cv
478.827 286.417 478.967 286.167 479.147 285.957 cv
479.327 285.747 479.557 285.587 479.817 285.467 cv
480.077 285.357 480.367 285.297 480.687 285.297 cv
481.027 285.297 481.327 285.357 481.567 285.467 cv
481.807 285.587 482.007 285.737 482.167 285.917 cv
482.327 286.107 482.437 286.327 482.517 286.577 cv
482.587 286.827 482.627 287.097 482.627 287.377 cv
482.627 287.527 li
cp
481.817 287.287 mo
481.817 286.867 481.727 286.537 481.527 286.297 cv
481.327 286.057 481.037 285.927 480.657 285.927 cv
480.457 285.927 480.277 285.967 480.127 286.047 cv
479.977 286.127 479.857 286.227 479.757 286.347 cv
479.657 286.467 479.577 286.617 479.517 286.777 cv
479.457 286.937 479.427 287.107 479.427 287.287 cv
481.817 287.287 li
cp
f
487.167 289.917 mo
487.127 290.007 li
487.017 290.047 li
486.817 290.057 li
486.607 290.047 li
486.497 290.007 li
486.467 289.917 li
486.467 289.477 li
486.277 289.687 486.067 289.847 485.827 289.957 cv
485.587 290.057 485.337 290.117 485.077 290.117 cv
484.847 290.117 484.637 290.087 484.447 290.037 cv
484.257 289.977 484.097 289.897 483.967 289.777 cv
483.837 289.667 483.737 289.527 483.667 289.357 cv
483.587 289.197 483.557 289.007 483.557 288.787 cv
483.557 288.547 483.607 288.327 483.707 288.147 cv
483.807 287.967 483.947 287.817 484.137 287.697 cv
484.327 287.577 484.557 287.487 484.837 287.427 cv
485.107 287.367 485.417 287.327 485.757 287.327 cv
486.367 287.327 li
486.367 286.987 li
486.367 286.827 486.347 286.677 486.307 286.547 cv
486.267 286.417 486.217 286.307 486.137 286.217 cv
486.057 286.137 485.947 286.067 485.827 286.027 cv
485.697 285.987 485.537 285.957 485.357 285.957 cv
485.157 285.957 484.977 285.987 484.817 286.027 cv
484.657 286.077 484.527 286.127 484.407 286.187 cv
484.287 286.247 484.187 286.297 484.107 286.337 cv
483.937 286.407 li
483.867 286.387 li
483.807 286.327 li
483.777 286.227 li
483.767 286.097 li
483.787 285.907 li
483.867 285.777 li
483.907 285.737 483.987 285.687 484.097 285.627 cv
484.197 285.567 484.327 285.517 484.467 285.467 cv
484.607 285.427 484.757 285.387 484.927 285.347 cv
485.087 285.317 485.257 285.297 485.427 285.297 cv
485.747 285.297 486.017 285.337 486.237 285.407 cv
486.457 285.487 486.627 285.587 486.767 285.727 cv
486.907 285.867 487.007 286.037 487.067 286.237 cv
487.127 286.447 487.167 286.687 487.167 286.957 cv
487.167 289.917 li
cp
486.367 287.917 mo
485.677 287.917 li
485.457 287.917 485.257 287.937 485.097 287.977 cv
484.937 288.017 484.797 288.067 484.697 288.137 cv
484.587 288.217 484.507 288.307 484.457 288.407 cv
484.397 288.507 484.377 288.627 484.377 288.757 cv
484.377 288.987 484.447 289.167 484.597 289.297 cv
484.737 289.437 484.947 289.497 485.207 289.497 cv
485.417 289.497 485.617 289.447 485.797 289.337 cv
485.977 289.237 486.167 289.067 486.367 288.847 cv
486.367 287.917 li
cp
f
491.217 285.807 mo
491.207 285.997 li
491.187 286.107 li
491.147 286.167 li
491.087 286.187 li
490.987 286.167 li
490.867 286.127 li
490.707 286.087 li
490.517 286.067 li
490.277 286.117 li
490.037 286.277 li
489.947 286.357 489.857 286.457 489.757 286.577 cv
489.657 286.697 489.557 286.847 489.447 287.027 cv
489.447 289.917 li
489.427 289.987 li
489.367 290.027 li
489.247 290.047 li
489.047 290.057 li
488.847 290.047 li
488.717 290.027 li
488.657 289.987 li
488.647 289.917 li
488.647 285.517 li
488.657 285.457 li
488.717 285.407 li
488.827 285.377 li
489.007 285.367 li
489.187 285.377 li
489.297 285.407 li
489.347 285.457 li
489.367 285.517 li
489.367 286.157 li
489.487 285.987 489.607 285.847 489.707 285.737 cv
489.807 285.627 489.907 285.537 490.007 285.477 cv
490.107 285.417 490.197 285.367 490.287 285.337 cv
490.377 285.317 490.477 285.297 490.577 285.297 cv
490.717 285.307 li
490.887 285.337 li
491.047 285.387 li
491.147 285.437 li
491.187 285.477 li
491.197 285.537 li
491.207 285.637 li
491.217 285.807 li
cp
f
495.917 289.917 mo
495.897 289.987 li
495.827 290.027 li
495.707 290.047 li
495.517 290.057 li
495.317 290.047 li
495.187 290.027 li
495.127 289.987 li
495.117 289.917 li
495.117 287.337 li
495.117 287.097 495.097 286.897 495.057 286.737 cv
495.017 286.587 494.957 286.457 494.877 286.347 cv
494.797 286.237 494.707 286.147 494.587 286.087 cv
494.467 286.027 494.337 285.997 494.177 285.997 cv
493.977 285.997 493.767 286.077 493.567 286.217 cv
493.367 286.357 493.157 286.567 492.937 286.847 cv
492.937 289.917 li
492.917 289.987 li
492.857 290.027 li
492.737 290.047 li
492.537 290.057 li
492.337 290.047 li
492.207 290.027 li
492.147 289.987 li
492.137 289.917 li
492.137 285.517 li
492.147 285.457 li
492.207 285.407 li
492.317 285.377 li
492.497 285.367 li
492.677 285.377 li
492.787 285.407 li
492.837 285.457 li
492.857 285.517 li
492.857 286.097 li
493.107 285.827 493.357 285.627 493.597 285.497 cv
493.837 285.367 494.087 285.297 494.347 285.297 cv
494.637 285.297 494.887 285.347 495.087 285.447 cv
495.287 285.547 495.447 285.687 495.567 285.847 cv
495.687 286.017 495.777 286.217 495.837 286.437 cv
495.887 286.657 495.917 286.927 495.917 287.237 cv
495.917 289.917 li
cp
f
498.187 289.917 mo
498.167 289.987 li
498.107 290.027 li
497.987 290.047 li
497.787 290.057 li
497.587 290.047 li
497.457 290.027 li
497.397 289.987 li
497.387 289.917 li
497.387 285.517 li
497.397 285.457 li
497.457 285.407 li
497.587 285.377 li
497.787 285.367 li
497.987 285.377 li
498.107 285.407 li
498.167 285.457 li
498.187 285.517 li
498.187 289.917 li
cp
498.287 284.037 mo
498.287 284.227 498.247 284.357 498.177 284.427 cv
498.097 284.497 497.967 284.527 497.777 284.527 cv
497.587 284.527 497.457 284.497 497.387 284.427 cv
497.317 284.367 497.287 284.237 497.287 284.047 cv
497.287 283.867 497.317 283.737 497.387 283.667 cv
497.457 283.597 497.587 283.557 497.787 283.557 cv
497.977 283.557 498.107 283.597 498.177 283.657 cv
498.247 283.727 498.287 283.857 498.287 284.037 cv
cp
f
503.457 289.917 mo
503.437 289.987 li
503.367 290.027 li
503.247 290.047 li
503.057 290.057 li
502.857 290.047 li
502.727 290.027 li
502.667 289.987 li
502.657 289.917 li
502.657 287.337 li
502.657 287.097 502.637 286.897 502.597 286.737 cv
502.557 286.587 502.497 286.457 502.417 286.347 cv
502.337 286.237 502.247 286.147 502.127 286.087 cv
502.007 286.027 501.877 285.997 501.717 285.997 cv
501.517 285.997 501.307 286.077 501.107 286.217 cv
500.907 286.357 500.697 286.567 500.477 286.847 cv
500.477 289.917 li
500.457 289.987 li
500.397 290.027 li
500.277 290.047 li
500.077 290.057 li
499.877 290.047 li
499.747 290.027 li
499.687 289.987 li
499.677 289.917 li
499.677 285.517 li
499.687 285.457 li
499.747 285.407 li
499.857 285.377 li
500.037 285.367 li
500.217 285.377 li
500.327 285.407 li
500.377 285.457 li
500.397 285.517 li
500.397 286.097 li
500.647 285.827 500.897 285.627 501.137 285.497 cv
501.377 285.367 501.627 285.297 501.887 285.297 cv
502.177 285.297 502.427 285.347 502.627 285.447 cv
502.827 285.547 502.987 285.687 503.107 285.847 cv
503.227 286.017 503.317 286.217 503.377 286.437 cv
503.427 286.657 503.457 286.927 503.457 287.237 cv
503.457 289.917 li
cp
f
508.597 285.717 mo
508.597 285.837 508.577 285.917 508.547 285.967 cv
508.427 286.047 li
507.797 286.047 li
507.907 286.167 507.987 286.297 508.037 286.437 cv
508.077 286.577 508.107 286.727 508.107 286.877 cv
508.107 287.137 508.067 287.357 507.987 287.547 cv
507.907 287.747 507.787 287.907 507.637 288.047 cv
507.477 288.187 507.297 288.287 507.097 288.357 cv
506.887 288.427 506.657 288.457 506.407 288.457 cv
506.227 288.457 506.047 288.437 505.887 288.387 cv
505.727 288.347 505.597 288.287 505.517 288.207 cv
505.367 288.417 li
505.317 288.667 li
505.317 288.787 505.367 288.877 505.477 288.957 cv
505.577 289.037 505.717 289.077 505.897 289.077 cv
507.047 289.127 li
507.267 289.137 507.467 289.167 507.647 289.217 cv
507.827 289.277 507.987 289.347 508.127 289.447 cv
508.257 289.547 508.357 289.677 508.437 289.817 cv
508.507 289.957 508.547 290.117 508.547 290.307 cv
508.547 290.507 508.497 290.697 508.417 290.877 cv
508.337 291.057 508.207 291.217 508.027 291.357 cv
507.847 291.497 507.627 291.607 507.357 291.687 cv
507.087 291.767 506.767 291.807 506.407 291.807 cv
506.047 291.807 505.747 291.777 505.497 291.717 cv
505.247 291.657 505.047 291.567 504.887 291.467 cv
504.727 291.367 504.607 291.237 504.537 291.097 cv
504.467 290.947 504.437 290.787 504.437 290.627 cv
504.437 290.517 504.447 290.417 504.477 290.317 cv
504.497 290.217 504.537 290.117 504.597 290.037 cv
504.797 289.777 li
504.877 289.697 504.967 289.607 505.067 289.527 cv
504.907 289.447 504.787 289.347 504.707 289.227 cv
504.627 289.107 504.597 288.967 504.597 288.817 cv
504.597 288.627 504.637 288.457 504.717 288.297 cv
504.797 288.137 504.907 287.997 505.027 287.867 cv
504.927 287.747 504.847 287.617 504.787 287.467 cv
504.727 287.317 504.697 287.127 504.697 286.907 cv
504.697 286.667 504.737 286.437 504.827 286.237 cv
504.907 286.037 505.027 285.877 505.177 285.737 cv
505.327 285.597 505.507 285.497 505.717 285.417 cv
505.927 285.347 506.157 285.307 506.407 285.307 cv
506.537 285.307 506.657 285.317 506.777 285.337 cv
506.887 285.357 506.997 285.377 507.097 285.397 cv
508.427 285.397 li
508.557 285.477 li
508.577 285.537 508.597 285.617 508.597 285.717 cv
cp
507.337 286.877 mo
507.337 286.577 507.247 286.347 507.087 286.177 cv
506.927 286.017 506.687 285.927 506.387 285.927 cv
506.227 285.927 506.097 285.957 505.977 286.007 cv
505.857 286.057 505.767 286.127 505.687 286.217 cv
505.607 286.317 505.557 286.417 505.517 286.537 cv
505.477 286.657 505.467 286.777 505.467 286.907 cv
505.467 287.197 505.547 287.427 505.707 287.587 cv
505.867 287.757 506.107 287.837 506.407 287.837 cv
506.567 287.837 506.697 287.817 506.817 287.767 cv
506.937 287.717 507.027 287.647 507.107 287.557 cv
507.187 287.467 507.237 287.367 507.277 287.247 cv
507.317 287.127 507.337 287.007 507.337 286.877 cv
cp
507.737 290.347 mo
507.737 290.157 507.657 290.017 507.507 289.917 cv
507.347 289.817 507.147 289.767 506.887 289.757 cv
505.747 289.717 li
505.637 289.797 505.547 289.877 505.487 289.947 cv
505.327 290.147 li
505.247 290.347 li
505.227 290.547 li
505.227 290.757 505.327 290.917 505.547 291.027 cv
505.757 291.137 506.057 291.197 506.447 291.197 cv
506.687 291.197 506.897 291.167 507.057 291.127 cv
507.217 291.077 507.357 291.017 507.457 290.937 cv
507.557 290.857 507.627 290.767 507.667 290.667 cv
507.707 290.567 507.737 290.457 507.737 290.347 cv
cp
f
516.197 289.907 mo
516.177 289.977 li
516.117 290.027 li
515.987 290.047 li
515.927 290.047 515.847 290.057 515.747 290.057 cv
515.547 290.047 li
515.417 290.027 li
515.337 289.967 li
515.297 289.867 li
514.707 288.377 li
514.637 288.217 514.567 288.057 514.497 287.917 cv
514.417 287.777 514.337 287.647 514.237 287.547 cv
514.137 287.447 514.017 287.367 513.877 287.307 cv
513.737 287.247 513.577 287.217 513.387 287.217 cv
512.827 287.217 li
512.827 289.907 li
512.807 289.977 li
512.737 290.027 li
512.607 290.047 li
512.407 290.057 li
512.207 290.047 li
512.077 290.027 li
512.007 289.977 li
511.987 289.907 li
511.987 284.057 li
511.987 283.937 512.017 283.847 512.087 283.797 cv
512.297 283.717 li
513.647 283.717 li
513.797 283.717 513.927 283.727 514.037 283.737 cv
514.137 283.747 514.237 283.757 514.327 283.757 cv
514.567 283.797 514.777 283.867 514.967 283.957 cv
515.157 284.057 515.317 284.167 515.447 284.307 cv
515.567 284.447 515.667 284.607 515.727 284.787 cv
515.787 284.967 515.827 285.167 515.827 285.387 cv
515.827 285.597 515.797 285.787 515.737 285.957 cv
515.677 286.127 515.597 286.277 515.487 286.397 cv
515.377 286.527 515.247 286.637 515.107 286.737 cv
514.957 286.837 514.787 286.907 514.607 286.967 cv
514.707 287.017 514.797 287.077 514.887 287.147 cv
514.967 287.217 515.047 287.297 515.127 287.397 cv
515.197 287.497 515.267 287.607 515.327 287.737 cv
515.387 287.867 515.457 288.007 515.527 288.157 cv
516.097 289.557 li
516.137 289.677 516.157 289.757 516.177 289.797 cv
516.197 289.907 li
cp
514.937 285.467 mo
514.937 285.227 514.877 285.017 514.767 284.847 cv
514.657 284.677 514.477 284.557 514.217 284.477 cv
514.127 284.457 514.037 284.437 513.937 284.427 cv
513.837 284.417 513.697 284.407 513.537 284.407 cv
512.827 284.407 li
512.827 286.537 li
513.647 286.537 li
513.867 286.537 514.057 286.517 514.217 286.457 cv
514.377 286.407 514.517 286.337 514.627 286.237 cv
514.727 286.137 514.807 286.027 514.857 285.897 cv
514.907 285.767 514.937 285.627 514.937 285.467 cv
cp
f
520.637 289.917 mo
520.597 290.007 li
520.487 290.047 li
520.287 290.057 li
520.197 290.057 520.127 290.047 520.077 290.047 cv
519.967 290.007 li
519.937 289.917 li
519.937 289.477 li
519.747 289.687 519.537 289.847 519.297 289.957 cv
519.057 290.057 518.807 290.117 518.547 290.117 cv
518.317 290.117 518.107 290.087 517.917 290.037 cv
517.727 289.977 517.567 289.897 517.437 289.777 cv
517.307 289.667 517.207 289.527 517.137 289.357 cv
517.057 289.197 517.027 289.007 517.027 288.787 cv
517.027 288.547 517.077 288.327 517.177 288.147 cv
517.277 287.967 517.417 287.817 517.607 287.697 cv
517.797 287.577 518.027 287.487 518.307 287.427 cv
518.577 287.367 518.887 287.327 519.227 287.327 cv
519.837 287.327 li
519.837 286.987 li
519.837 286.827 519.817 286.677 519.777 286.547 cv
519.737 286.417 519.687 286.307 519.607 286.217 cv
519.527 286.137 519.417 286.067 519.297 286.027 cv
519.167 285.987 519.007 285.957 518.827 285.957 cv
518.627 285.957 518.447 285.987 518.287 286.027 cv
518.127 286.077 517.997 286.127 517.877 286.187 cv
517.757 286.247 517.657 286.297 517.577 286.337 cv
517.407 286.407 li
517.337 286.387 li
517.277 286.327 li
517.247 286.227 li
517.237 286.097 li
517.257 285.907 li
517.337 285.777 li
517.377 285.737 517.457 285.687 517.567 285.627 cv
517.667 285.567 517.797 285.517 517.937 285.467 cv
518.077 285.427 518.227 285.387 518.397 285.347 cv
518.557 285.317 518.727 285.297 518.897 285.297 cv
519.217 285.297 519.487 285.337 519.707 285.407 cv
519.927 285.487 520.097 285.587 520.237 285.727 cv
520.377 285.867 520.477 286.037 520.537 286.237 cv
520.597 286.447 520.637 286.687 520.637 286.957 cv
520.637 289.917 li
cp
519.837 287.917 mo
519.147 287.917 li
518.927 287.917 518.727 287.937 518.567 287.977 cv
518.407 288.017 518.267 288.067 518.167 288.137 cv
518.057 288.217 517.977 288.307 517.927 288.407 cv
517.867 288.507 517.847 288.627 517.847 288.757 cv
517.847 288.987 517.917 289.167 518.067 289.297 cv
518.207 289.437 518.417 289.497 518.677 289.497 cv
518.887 289.497 519.087 289.447 519.267 289.337 cv
519.447 289.237 519.637 289.067 519.837 288.847 cv
519.837 287.917 li
cp
f
524.397 289.597 mo
524.397 289.697 524.387 289.767 524.377 289.817 cv
524.317 289.937 li
524.207 290.007 li
524.027 290.057 li
523.807 290.087 li
523.587 290.107 li
523.357 290.107 523.157 290.077 522.997 290.027 cv
522.837 289.967 522.697 289.877 522.597 289.757 cv
522.497 289.637 522.417 289.487 522.377 289.297 cv
522.327 289.107 522.307 288.887 522.307 288.627 cv
522.307 286.067 li
521.687 286.067 li
521.567 285.987 li
521.537 285.937 521.527 285.847 521.527 285.727 cv
521.537 285.577 li
521.567 285.467 li
521.617 285.417 li
521.697 285.397 li
522.307 285.397 li
522.307 284.347 li
522.317 284.287 li
522.377 284.237 li
522.507 284.207 li
522.707 284.197 li
522.907 284.207 li
523.027 284.237 li
523.087 284.287 li
523.107 284.347 li
523.107 285.397 li
524.237 285.397 li
524.307 285.417 li
524.357 285.467 li
524.387 285.577 li
524.397 285.727 li
524.397 285.847 524.377 285.937 524.347 285.987 cv
524.237 286.067 li
523.107 286.067 li
523.107 288.517 li
523.107 288.817 523.147 289.047 523.237 289.197 cv
523.327 289.357 523.487 289.427 523.727 289.427 cv
523.927 289.407 li
524.077 289.367 li
524.197 289.317 li
524.287 289.297 li
524.327 289.307 li
524.367 289.357 li
524.387 289.447 li
524.397 289.597 li
cp
f
529.217 287.527 mo
529.217 287.657 529.177 287.747 529.117 287.797 cv
528.897 287.877 li
526.017 287.877 li
526.017 288.127 526.037 288.347 526.087 288.537 cv
526.137 288.737 526.217 288.897 526.337 289.037 cv
526.447 289.177 526.597 289.287 526.777 289.367 cv
526.957 289.447 527.187 289.477 527.447 289.477 cv
527.657 289.477 527.847 289.467 528.007 289.427 cv
528.167 289.397 528.307 289.357 528.427 289.317 cv
528.547 289.277 528.637 289.237 528.717 289.197 cv
528.897 289.147 li
528.957 289.167 li
528.997 289.217 li
529.017 289.307 li
529.027 289.457 li
529.017 289.567 li
529.007 289.657 li
528.987 289.717 li
528.937 289.777 li
528.787 289.857 li
528.697 289.897 528.587 289.937 528.447 289.977 cv
528.307 290.017 528.137 290.047 527.957 290.077 cv
527.767 290.097 527.567 290.117 527.367 290.117 cv
527.007 290.117 526.687 290.067 526.417 289.977 cv
526.137 289.877 525.907 289.727 525.727 289.527 cv
525.547 289.327 525.407 289.087 525.307 288.787 cv
525.207 288.487 525.167 288.137 525.167 287.737 cv
525.167 287.357 525.217 287.017 525.317 286.717 cv
525.417 286.417 525.557 286.167 525.737 285.957 cv
525.917 285.747 526.147 285.587 526.407 285.467 cv
526.667 285.357 526.957 285.297 527.277 285.297 cv
527.617 285.297 527.917 285.357 528.157 285.467 cv
528.397 285.587 528.597 285.737 528.757 285.917 cv
528.917 286.107 529.027 286.327 529.107 286.577 cv
529.177 286.827 529.217 287.097 529.217 287.377 cv
529.217 287.527 li
cp
528.407 287.287 mo
528.407 286.867 528.317 286.537 528.117 286.297 cv
527.917 286.057 527.627 285.927 527.247 285.927 cv
527.047 285.927 526.867 285.967 526.717 286.047 cv
526.567 286.127 526.447 286.227 526.347 286.347 cv
526.247 286.467 526.167 286.617 526.107 286.777 cv
526.047 286.937 526.017 287.107 526.017 287.287 cv
528.407 287.287 li
cp
f
422.227 300.319 mo
442.227 300.319 li
.884581 .536797 .613733 .453285 cmyk
@
455.277 303.689 mo
455.257 303.759 li
455.197 303.809 li
455.067 303.829 li
455.007 303.829 454.927 303.839 454.827 303.839 cv
454.627 303.829 li
454.497 303.809 li
454.417 303.749 li
454.377 303.649 li
453.787 302.159 li
453.717 301.999 453.647 301.839 453.577 301.699 cv
453.497 301.559 453.417 301.429 453.317 301.329 cv
453.217 301.229 453.097 301.149 452.957 301.089 cv
452.817 301.029 452.657 300.999 452.467 300.999 cv
451.907 300.999 li
451.907 303.689 li
451.887 303.759 li
451.817 303.809 li
451.687 303.829 li
451.487 303.839 li
451.287 303.829 li
451.157 303.809 li
451.087 303.759 li
451.067 303.689 li
451.067 297.839 li
451.067 297.719 451.097 297.629 451.167 297.579 cv
451.377 297.499 li
452.727 297.499 li
452.877 297.499 453.007 297.509 453.117 297.519 cv
453.217 297.529 453.317 297.539 453.407 297.539 cv
453.647 297.579 453.857 297.649 454.047 297.739 cv
454.237 297.839 454.397 297.949 454.527 298.089 cv
454.647 298.229 454.747 298.389 454.807 298.569 cv
454.867 298.749 454.907 298.949 454.907 299.169 cv
454.907 299.379 454.877 299.569 454.817 299.739 cv
454.757 299.909 454.677 300.059 454.567 300.179 cv
454.457 300.309 454.327 300.419 454.187 300.519 cv
454.037 300.619 453.867 300.689 453.687 300.749 cv
453.787 300.799 453.877 300.859 453.967 300.929 cv
454.047 300.999 454.127 301.079 454.207 301.179 cv
454.277 301.279 454.347 301.389 454.407 301.519 cv
454.467 301.649 454.537 301.789 454.607 301.939 cv
455.177 303.339 li
455.217 303.459 455.237 303.539 455.257 303.579 cv
455.277 303.689 li
cp
454.017 299.249 mo
454.017 299.009 453.957 298.799 453.847 298.629 cv
453.737 298.459 453.557 298.339 453.297 298.259 cv
453.207 298.239 453.117 298.219 453.017 298.209 cv
452.917 298.199 452.777 298.189 452.617 298.189 cv
451.907 298.189 li
451.907 300.319 li
452.727 300.319 li
452.947 300.319 453.137 300.299 453.297 300.239 cv
453.457 300.189 453.597 300.119 453.707 300.019 cv
453.807 299.919 453.887 299.809 453.937 299.679 cv
453.987 299.549 454.017 299.409 454.017 299.249 cv
cp
1 /0 /CSD get_res sepcs
1 sep
f
459.717 303.699 mo
459.677 303.789 li
459.567 303.829 li
459.367 303.839 li
459.157 303.829 li
459.047 303.789 li
459.017 303.699 li
459.017 303.259 li
458.827 303.469 458.617 303.629 458.377 303.739 cv
458.137 303.839 457.887 303.899 457.627 303.899 cv
457.397 303.899 457.187 303.869 456.997 303.819 cv
456.807 303.759 456.647 303.679 456.517 303.559 cv
456.387 303.449 456.287 303.309 456.217 303.139 cv
456.137 302.979 456.107 302.789 456.107 302.569 cv
456.107 302.329 456.157 302.109 456.257 301.929 cv
456.357 301.749 456.497 301.599 456.687 301.479 cv
456.877 301.359 457.107 301.269 457.387 301.209 cv
457.657 301.149 457.967 301.109 458.307 301.109 cv
458.917 301.109 li
458.917 300.769 li
458.917 300.609 458.897 300.459 458.857 300.329 cv
458.817 300.199 458.767 300.089 458.687 299.999 cv
458.607 299.919 458.497 299.849 458.377 299.809 cv
458.247 299.769 458.087 299.739 457.907 299.739 cv
457.707 299.739 457.527 299.769 457.367 299.809 cv
457.207 299.859 457.077 299.909 456.957 299.969 cv
456.837 300.029 456.737 300.079 456.657 300.119 cv
456.487 300.189 li
456.417 300.169 li
456.357 300.109 li
456.327 300.009 li
456.317 299.879 li
456.337 299.689 li
456.417 299.559 li
456.457 299.519 456.537 299.469 456.647 299.409 cv
456.747 299.349 456.877 299.299 457.017 299.249 cv
457.157 299.209 457.307 299.169 457.477 299.129 cv
457.637 299.099 457.807 299.079 457.977 299.079 cv
458.297 299.079 458.567 299.119 458.787 299.189 cv
459.007 299.269 459.177 299.369 459.317 299.509 cv
459.457 299.649 459.557 299.819 459.617 300.019 cv
459.677 300.229 459.717 300.469 459.717 300.739 cv
459.717 303.699 li
cp
458.917 301.699 mo
458.227 301.699 li
458.007 301.699 457.807 301.719 457.647 301.759 cv
457.487 301.799 457.347 301.849 457.247 301.919 cv
457.137 301.999 457.057 302.089 457.007 302.189 cv
456.947 302.289 456.927 302.409 456.927 302.539 cv
456.927 302.769 456.997 302.949 457.147 303.079 cv
457.287 303.219 457.497 303.279 457.757 303.279 cv
457.967 303.279 458.167 303.229 458.347 303.119 cv
458.527 303.019 458.717 302.849 458.917 302.629 cv
458.917 301.699 li
cp
f
464.977 303.699 mo
464.957 303.769 li
464.887 303.809 li
464.767 303.829 li
464.577 303.839 li
464.377 303.829 li
464.247 303.809 li
464.187 303.769 li
464.177 303.699 li
464.177 301.119 li
464.177 300.879 464.157 300.679 464.117 300.519 cv
464.077 300.369 464.017 300.239 463.937 300.129 cv
463.857 300.019 463.767 299.929 463.647 299.869 cv
463.527 299.809 463.397 299.779 463.237 299.779 cv
463.037 299.779 462.827 299.859 462.627 299.999 cv
462.427 300.139 462.217 300.349 461.997 300.629 cv
461.997 303.699 li
461.977 303.769 li
461.917 303.809 li
461.797 303.829 li
461.597 303.839 li
461.397 303.829 li
461.267 303.809 li
461.207 303.769 li
461.197 303.699 li
461.197 299.299 li
461.207 299.239 li
461.267 299.189 li
461.377 299.159 li
461.557 299.149 li
461.737 299.159 li
461.847 299.189 li
461.897 299.239 li
461.917 299.299 li
461.917 299.879 li
462.167 299.609 462.417 299.409 462.657 299.279 cv
462.897 299.149 463.147 299.079 463.407 299.079 cv
463.697 299.079 463.947 299.129 464.147 299.229 cv
464.347 299.329 464.507 299.469 464.627 299.629 cv
464.747 299.799 464.837 299.999 464.897 300.219 cv
464.947 300.439 464.977 300.709 464.977 301.019 cv
464.977 303.699 li
cp
f
470.207 303.699 mo
470.187 303.769 li
470.127 303.809 li
470.017 303.829 li
469.857 303.839 li
469.687 303.829 li
469.567 303.809 li
469.507 303.769 li
469.487 303.699 li
469.487 303.119 li
469.257 303.369 469.017 303.559 468.767 303.699 cv
468.517 303.829 468.247 303.899 467.957 303.899 cv
467.627 303.899 467.347 303.839 467.127 303.719 cv
466.897 303.599 466.707 303.439 466.567 303.219 cv
466.427 303.009 466.317 302.759 466.257 302.469 cv
466.197 302.179 466.167 301.869 466.167 301.549 cv
466.167 301.179 466.207 300.839 466.287 300.529 cv
466.367 300.229 466.487 299.969 466.647 299.749 cv
466.807 299.539 466.997 299.379 467.237 299.259 cv
467.477 299.139 467.747 299.079 468.057 299.079 cv
468.317 299.079 468.547 299.139 468.767 299.249 cv
468.977 299.369 469.187 299.529 469.397 299.749 cv
469.397 297.189 li
469.417 297.129 li
469.477 297.079 li
469.597 297.049 li
469.797 297.039 li
469.997 297.049 li
470.117 297.079 li
470.187 297.129 li
470.207 297.189 li
470.207 303.699 li
cp
469.397 300.609 mo
469.177 300.339 468.957 300.129 468.757 299.989 cv
468.557 299.849 468.347 299.779 468.127 299.779 cv
467.917 299.779 467.737 299.829 467.597 299.929 cv
467.457 300.029 467.337 300.149 467.257 300.309 cv
467.167 300.469 467.097 300.649 467.057 300.849 cv
467.017 301.049 466.997 301.259 466.997 301.469 cv
466.997 301.689 467.007 301.909 467.047 302.119 cv
467.087 302.329 467.147 302.519 467.227 302.679 cv
467.307 302.849 467.427 302.979 467.567 303.079 cv
467.707 303.179 467.877 303.219 468.097 303.219 cv
468.197 303.219 468.307 303.209 468.407 303.179 cv
468.507 303.159 468.607 303.109 468.707 303.039 cv
468.807 302.969 468.917 302.879 469.037 302.769 cv
469.147 302.659 469.267 302.519 469.397 302.359 cv
469.397 300.609 li
cp
f
475.777 301.449 mo
475.777 301.809 475.727 302.139 475.637 302.439 cv
475.537 302.739 475.397 302.999 475.217 303.219 cv
475.027 303.439 474.787 303.609 474.507 303.729 cv
474.227 303.839 473.897 303.899 473.537 303.899 cv
473.177 303.899 472.857 303.849 472.587 303.749 cv
472.317 303.649 472.097 303.489 471.917 303.289 cv
471.737 303.089 471.597 302.839 471.517 302.539 cv
471.427 302.249 471.387 301.919 471.387 301.539 cv
471.387 301.179 471.427 300.849 471.527 300.549 cv
471.617 300.249 471.757 299.989 471.947 299.769 cv
472.127 299.549 472.367 299.379 472.647 299.259 cv
472.927 299.139 473.247 299.079 473.627 299.079 cv
473.987 299.079 474.297 299.139 474.567 299.249 cv
474.837 299.359 475.067 299.519 475.247 299.719 cv
475.427 299.919 475.557 300.169 475.647 300.459 cv
475.727 300.759 475.777 301.089 475.777 301.449 cv
cp
474.927 301.509 mo
474.927 301.269 474.897 301.049 474.857 300.829 cv
474.817 300.619 474.747 300.439 474.647 300.279 cv
474.547 300.119 474.407 299.999 474.237 299.899 cv
474.057 299.809 473.847 299.759 473.597 299.759 cv
473.357 299.759 473.147 299.809 472.977 299.889 cv
472.807 299.969 472.667 300.089 472.557 300.249 cv
472.447 300.409 472.367 300.589 472.307 300.799 cv
472.247 301.009 472.227 301.239 472.227 301.489 cv
472.227 301.729 472.247 301.959 472.297 302.169 cv
472.337 302.379 472.417 302.559 472.517 302.719 cv
472.617 302.879 472.747 303.009 472.927 303.099 cv
473.097 303.189 473.317 303.229 473.577 303.229 cv
473.807 303.229 474.007 303.189 474.187 303.109 cv
474.357 303.029 474.497 302.909 474.607 302.749 cv
474.717 302.599 474.797 302.419 474.847 302.209 cv
474.897 301.999 474.927 301.769 474.927 301.509 cv
cp
f
483.487 303.699 mo
483.467 303.769 li
483.397 303.809 li
483.277 303.829 li
483.087 303.839 li
482.877 303.829 li
482.757 303.809 li
482.687 303.769 li
482.677 303.699 li
482.677 301.029 li
482.677 300.849 482.657 300.679 482.627 300.519 cv
482.587 300.369 482.537 300.239 482.467 300.129 cv
482.387 300.019 482.297 299.929 482.187 299.869 cv
482.077 299.809 481.947 299.779 481.807 299.779 cv
481.617 299.779 481.427 299.859 481.247 299.999 cv
481.057 300.139 480.847 300.349 480.627 300.629 cv
480.627 303.699 li
480.607 303.769 li
480.537 303.809 li
480.417 303.829 li
480.217 303.839 li
480.027 303.829 li
479.897 303.809 li
479.837 303.769 li
479.817 303.699 li
479.817 301.029 li
479.817 300.849 479.797 300.679 479.767 300.519 cv
479.727 300.369 479.677 300.239 479.607 300.129 cv
479.527 300.019 479.437 299.929 479.327 299.869 cv
479.217 299.809 479.087 299.779 478.947 299.779 cv
478.757 299.779 478.567 299.859 478.377 299.999 cv
478.187 300.139 477.987 300.349 477.767 300.629 cv
477.767 303.699 li
477.747 303.769 li
477.687 303.809 li
477.567 303.829 li
477.367 303.839 li
477.167 303.829 li
477.037 303.809 li
476.977 303.769 li
476.967 303.699 li
476.967 299.299 li
476.977 299.239 li
477.037 299.189 li
477.147 299.159 li
477.327 299.149 li
477.507 299.159 li
477.617 299.189 li
477.667 299.239 li
477.687 299.299 li
477.687 299.879 li
477.937 299.609 478.177 299.409 478.407 299.279 cv
478.637 299.149 478.877 299.079 479.117 299.079 cv
479.297 299.079 479.457 299.109 479.607 299.149 cv
479.747 299.189 479.877 299.249 479.987 299.329 cv
480.097 299.409 480.187 299.499 480.267 299.599 cv
480.347 299.709 480.407 299.829 480.467 299.949 cv
480.607 299.789 480.747 299.659 480.887 299.549 cv
481.017 299.439 481.147 299.349 481.267 299.279 cv
481.387 299.219 481.497 299.169 481.617 299.129 cv
481.737 299.099 481.857 299.079 481.977 299.079 cv
482.257 299.079 482.487 299.129 482.687 299.229 cv
482.877 299.329 483.027 299.469 483.147 299.629 cv
483.267 299.799 483.347 299.999 483.407 300.219 cv
483.457 300.439 483.487 300.679 483.487 300.919 cv
483.487 303.699 li
cp
f
492.037 303.519 mo
492.077 303.699 li
492.047 303.789 li
491.917 303.829 li
491.857 303.829 491.767 303.839 491.667 303.839 cv
491.567 303.839 491.487 303.829 491.427 303.829 cv
491.287 303.809 li
491.227 303.769 li
491.187 303.699 li
490.637 302.159 li
488.017 302.159 li
487.497 303.679 li
487.457 303.759 li
487.387 303.809 li
487.247 303.829 li
487.037 303.839 li
486.937 303.839 486.857 303.829 486.797 303.829 cv
486.667 303.789 li
486.637 303.689 li
486.677 303.519 li
488.797 297.649 li
488.847 297.559 li
488.947 297.509 li
489.097 297.479 li
489.157 297.479 489.247 297.469 489.347 297.469 cv
489.447 297.469 489.527 297.479 489.597 297.479 cv
489.767 297.509 li
489.857 297.569 li
489.917 297.649 li
492.037 303.519 li
cp
489.317 298.339 mo
489.317 298.339 li
488.227 301.489 li
490.427 301.489 li
489.317 298.339 li
cp
f
496.167 303.029 mo
496.157 303.169 li
496.137 303.279 li
496.107 303.349 li
496.037 303.439 li
495.997 303.479 495.927 303.529 495.827 303.589 cv
495.727 303.649 495.617 303.709 495.497 303.749 cv
495.377 303.799 495.237 303.829 495.097 303.859 cv
494.957 303.879 494.807 303.899 494.657 303.899 cv
494.337 303.899 494.047 303.849 493.807 303.749 cv
493.567 303.649 493.357 303.499 493.197 303.299 cv
493.037 303.099 492.907 302.859 492.827 302.569 cv
492.737 302.279 492.697 301.939 492.697 301.549 cv
492.697 301.119 492.747 300.749 492.857 300.439 cv
492.957 300.129 493.107 299.879 493.287 299.679 cv
493.467 299.479 493.687 299.339 493.937 299.239 cv
494.187 299.139 494.457 299.089 494.747 299.089 cv
494.887 299.089 495.017 299.109 495.157 299.129 cv
495.287 299.159 495.407 299.189 495.517 299.229 cv
495.627 299.269 495.727 299.319 495.817 299.379 cv
495.997 299.519 li
496.077 299.619 li
496.117 299.699 li
496.137 299.799 li
496.147 299.939 li
496.147 300.069 496.127 300.159 496.097 300.209 cv
495.997 300.279 li
495.817 300.199 li
495.757 300.149 495.677 300.089 495.577 300.029 cv
495.477 299.969 495.367 299.909 495.227 299.849 cv
495.087 299.799 494.917 299.769 494.737 299.769 cv
494.347 299.769 494.047 299.919 493.847 300.219 cv
493.637 300.519 493.537 300.949 493.537 301.509 cv
493.537 301.799 493.557 302.049 493.617 302.259 cv
493.667 302.469 493.747 302.649 493.847 302.789 cv
493.947 302.929 494.077 303.039 494.237 303.109 cv
494.387 303.179 494.557 303.209 494.757 303.209 cv
494.937 303.209 495.107 303.189 495.247 303.129 cv
495.387 303.069 495.507 303.009 495.607 302.939 cv
495.707 302.869 495.797 302.809 495.867 302.749 cv
496.027 302.659 li
496.087 302.679 li
496.127 302.749 li
496.157 302.859 li
496.167 303.029 li
cp
f
499.517 303.379 mo
499.517 303.479 499.507 303.549 499.497 303.599 cv
499.437 303.719 li
499.327 303.789 li
499.147 303.839 li
498.927 303.869 li
498.707 303.889 li
498.477 303.889 498.277 303.859 498.117 303.809 cv
497.957 303.749 497.817 303.659 497.717 303.539 cv
497.617 303.419 497.537 303.269 497.497 303.079 cv
497.447 302.889 497.427 302.669 497.427 302.409 cv
497.427 299.849 li
496.807 299.849 li
496.687 299.769 li
496.657 299.719 496.647 299.629 496.647 299.509 cv
496.657 299.359 li
496.687 299.249 li
496.737 299.199 li
496.817 299.179 li
497.427 299.179 li
497.427 298.129 li
497.437 298.069 li
497.497 298.019 li
497.627 297.989 li
497.827 297.979 li
498.027 297.989 li
498.147 298.019 li
498.207 298.069 li
498.227 298.129 li
498.227 299.179 li
499.357 299.179 li
499.427 299.199 li
499.477 299.249 li
499.507 299.359 li
499.517 299.509 li
499.517 299.629 499.497 299.719 499.467 299.769 cv
499.357 299.849 li
498.227 299.849 li
498.227 302.299 li
498.227 302.599 498.267 302.829 498.357 302.979 cv
498.447 303.139 498.607 303.209 498.847 303.209 cv
499.047 303.189 li
499.197 303.149 li
499.317 303.099 li
499.407 303.079 li
499.447 303.089 li
499.487 303.139 li
499.507 303.229 li
499.517 303.379 li
cp
f
501.387 303.699 mo
501.367 303.769 li
501.307 303.809 li
501.187 303.829 li
500.987 303.839 li
500.787 303.829 li
500.657 303.809 li
500.597 303.769 li
500.587 303.699 li
500.587 299.299 li
500.597 299.239 li
500.657 299.189 li
500.787 299.159 li
500.987 299.149 li
501.187 299.159 li
501.307 299.189 li
501.367 299.239 li
501.387 299.299 li
501.387 303.699 li
cp
501.487 297.819 mo
501.487 298.009 501.447 298.139 501.377 298.209 cv
501.297 298.279 501.167 298.309 500.977 298.309 cv
500.787 298.309 500.657 298.279 500.587 298.209 cv
500.517 298.149 500.487 298.019 500.487 297.829 cv
500.487 297.649 500.517 297.519 500.587 297.449 cv
500.657 297.379 500.787 297.339 500.987 297.339 cv
501.177 297.339 501.307 297.379 501.377 297.439 cv
501.447 297.509 501.487 297.639 501.487 297.819 cv
cp
f
506.957 301.449 mo
506.957 301.809 506.907 302.139 506.817 302.439 cv
506.717 302.739 506.577 302.999 506.397 303.219 cv
506.207 303.439 505.967 303.609 505.687 303.729 cv
505.407 303.839 505.077 303.899 504.717 303.899 cv
504.357 303.899 504.037 303.849 503.767 303.749 cv
503.497 303.649 503.277 303.489 503.097 303.289 cv
502.917 303.089 502.777 302.839 502.697 302.539 cv
502.607 302.249 502.567 301.919 502.567 301.539 cv
502.567 301.179 502.607 300.849 502.707 300.549 cv
502.797 300.249 502.937 299.989 503.127 299.769 cv
503.307 299.549 503.547 299.379 503.827 299.259 cv
504.107 299.139 504.427 299.079 504.807 299.079 cv
505.167 299.079 505.477 299.139 505.747 299.249 cv
506.017 299.359 506.247 299.519 506.427 299.719 cv
506.607 299.919 506.737 300.169 506.827 300.459 cv
506.907 300.759 506.957 301.089 506.957 301.449 cv
cp
506.107 301.509 mo
506.107 301.269 506.077 301.049 506.037 300.829 cv
505.997 300.619 505.927 300.439 505.827 300.279 cv
505.727 300.119 505.587 299.999 505.417 299.899 cv
505.237 299.809 505.027 299.759 504.777 299.759 cv
504.537 299.759 504.327 299.809 504.157 299.889 cv
503.987 299.969 503.847 300.089 503.737 300.249 cv
503.627 300.409 503.547 300.589 503.487 300.799 cv
503.427 301.009 503.407 301.239 503.407 301.489 cv
503.407 301.729 503.427 301.959 503.477 302.169 cv
503.517 302.379 503.597 302.559 503.697 302.719 cv
503.797 302.879 503.927 303.009 504.107 303.099 cv
504.277 303.189 504.497 303.229 504.757 303.229 cv
504.987 303.229 505.187 303.189 505.367 303.109 cv
505.537 303.029 505.677 302.909 505.787 302.749 cv
505.897 302.599 505.977 302.419 506.027 302.209 cv
506.077 301.999 506.107 301.769 506.107 301.509 cv
cp
f
511.927 303.699 mo
511.907 303.769 li
511.837 303.809 li
511.717 303.829 li
511.527 303.839 li
511.327 303.829 li
511.197 303.809 li
511.137 303.769 li
511.127 303.699 li
511.127 301.119 li
511.127 300.879 511.107 300.679 511.067 300.519 cv
511.027 300.369 510.967 300.239 510.887 300.129 cv
510.807 300.019 510.717 299.929 510.597 299.869 cv
510.477 299.809 510.347 299.779 510.187 299.779 cv
509.987 299.779 509.777 299.859 509.577 299.999 cv
509.377 300.139 509.167 300.349 508.947 300.629 cv
508.947 303.699 li
508.927 303.769 li
508.867 303.809 li
508.747 303.829 li
508.547 303.839 li
508.347 303.829 li
508.217 303.809 li
508.157 303.769 li
508.147 303.699 li
508.147 299.299 li
508.157 299.239 li
508.217 299.189 li
508.327 299.159 li
508.507 299.149 li
508.687 299.159 li
508.797 299.189 li
508.847 299.239 li
508.867 299.299 li
508.867 299.879 li
509.117 299.609 509.367 299.409 509.607 299.279 cv
509.847 299.149 510.097 299.079 510.357 299.079 cv
510.647 299.079 510.897 299.129 511.097 299.229 cv
511.297 299.329 511.457 299.469 511.577 299.629 cv
511.697 299.799 511.787 299.999 511.847 300.219 cv
511.897 300.439 511.927 300.709 511.927 301.019 cv
511.927 303.699 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
